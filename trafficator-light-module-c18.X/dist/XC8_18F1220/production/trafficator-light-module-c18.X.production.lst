

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Jul 31 16:37:25 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F1320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Version 2.40
    28                           ; Generated 17/11/2021 GMT
    29                           ; 
    30                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F1320 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62   000000                     _ADRESL	set	4035
    63   000000                     _ADRESH	set	4036
    64   000000                     _ADCON0	set	4034
    65   000000                     _GO_nDONE	set	32273
    66   000000                     _TRISA	set	3986
    67   000000                     _ADCON1	set	4033
    68   000000                     _PORTBbits	set	3969
    69   000000                     _PORTAbits	set	3968
    70   000000                     _ADCON2	set	4032
    71   000000                     _TRISB	set	3987
    72                           
    73                           ; #config settings
    74                           
    75                           	psect	cinit
    76   00057C                     __pcinit:
    77                           	callstack 0
    78   00057C                     start_initialization:
    79                           	callstack 0
    80   00057C                     __initialization:
    81                           	callstack 0
    82                           
    83                           ; Clear objects allocated to COMRAM (10 bytes)
    84   00057C  EE00  F021         	lfsr	0,__pbssCOMRAM
    85   000580  0E0A               	movlw	10
    86   000582                     clear_0:
    87   000582  6AEE               	clrf	postinc0,c
    88   000584  06E8               	decf	wreg,f,c
    89   000586  E1FD               	bnz	clear_0
    90   000588                     end_of_initialization:
    91                           	callstack 0
    92   000588                     __end_of__initialization:
    93                           	callstack 0
    94   000588  902B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    95   00058A  922B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    96   00058C  0E00               	movlw	low (__Lmediumconst shr (0+16))
    97   00058E  6EF8               	movwf	tblptru,c
    98   000590  0100               	movlb	0
    99   000592  EF09  F001         	goto	_main	;jump to C main() function
   100                           
   101                           	psect	bssCOMRAM
   102   000021                     __pbssCOMRAM:
   103                           	callstack 0
   104   000021                     _V_out_value:
   105                           	callstack 0
   106   000021                     	ds	2
   107   000023                     _V_in_value:
   108                           	callstack 0
   109   000023                     	ds	2
   110   000025                     _L_ch_in_value:
   111                           	callstack 0
   112   000025                     	ds	2
   113   000027                     _R_ch_in_value:
   114                           	callstack 0
   115   000027                     	ds	2
   116   000029                     _wasTurningLeft:
   117                           	callstack 0
   118   000029                     	ds	1
   119   00002A                     _wasTurningRight:
   120                           	callstack 0
   121   00002A                     	ds	1
   122                           
   123                           	psect	cstackCOMRAM
   124   000001                     __pcstackCOMRAM:
   125                           	callstack 0
   126   000001                     ??_low_isr:
   127   000001                     
   128                           ; 1 bytes @ 0x0
   129   000001                     	ds	1
   130   000002                     ??_ReversOn:
   131   000002                     ??_AddRightBlinks:
   132   000002                     ??_AddLeftBlinks:
   133   000002                     ?___awdiv:
   134                           	callstack 0
   135   000002                     ___awdiv@dividend:
   136                           	callstack 0
   137                           
   138                           ; 2 bytes @ 0x1
   139   000002                     	ds	2
   140   000004                     ___awdiv@divisor:
   141                           	callstack 0
   142                           
   143                           ; 2 bytes @ 0x3
   144   000004                     	ds	2
   145   000006                     ___awdiv@counter:
   146                           	callstack 0
   147                           
   148                           ; 1 bytes @ 0x5
   149   000006                     	ds	1
   150   000007                     ___awdiv@sign:
   151                           	callstack 0
   152                           
   153                           ; 1 bytes @ 0x6
   154   000007                     	ds	1
   155   000008                     ___awdiv@quotient:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x7
   159   000008                     	ds	2
   160   00000A                     ?_GetADCValue:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x9
   164   00000A                     	ds	2
   165   00000C                     ??_GetADCValue:
   166                           
   167                           ; 1 bytes @ 0xB
   168   00000C                     	ds	2
   169   00000E                     GetADCValue@Channel:
   170                           	callstack 0
   171                           
   172                           ; 1 bytes @ 0xD
   173   00000E                     	ds	1
   174   00000F                     GetADCValue@temp_1:
   175                           	callstack 0
   176                           
   177                           ; 2 bytes @ 0xE
   178   00000F                     	ds	2
   179   000011                     GetADCValue@temp_2:
   180                           	callstack 0
   181                           
   182                           ; 2 bytes @ 0x10
   183   000011                     	ds	2
   184   000013                     ?_GetCurrentValue:
   185                           	callstack 0
   186                           
   187                           ; 2 bytes @ 0x12
   188   000013                     	ds	2
   189   000015                     GetCurrentValue@V_in_value:
   190                           	callstack 0
   191                           
   192                           ; 2 bytes @ 0x14
   193   000015                     	ds	2
   194   000017                     GetCurrentValue@V_out_value:
   195                           	callstack 0
   196                           
   197                           ; 2 bytes @ 0x16
   198   000017                     	ds	2
   199   000019                     ??_Turn_49A:
   200                           
   201                           ; 1 bytes @ 0x18
   202   000019                     	ds	2
   203   00001B                     Turn_49A@Current_value:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0x1A
   207   00001B                     	ds	2
   208   00001D                     main@_49A_in_value:
   209                           	callstack 0
   210                           
   211                           ; 2 bytes @ 0x1C
   212   00001D                     	ds	2
   213   00001F                     main@Reverse_in_value:
   214                           	callstack 0
   215                           
   216                           ; 2 bytes @ 0x1E
   217   00001F                     	ds	2
   218                           
   219 ;;
   220 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   221 ;;
   222 ;; *************** function _main *****************
   223 ;; Defined at:
   224 ;;		line 83 in file "main.c"
   225 ;; Parameters:    Size  Location     Type
   226 ;;		None
   227 ;; Auto vars:     Size  Location     Type
   228 ;;  Reverse_in_v    2   30[COMRAM] int 
   229 ;;  _49A_in_valu    2   28[COMRAM] int 
   230 ;;  L_ch_in_valu    2    0        int 
   231 ;;  R_ch_in_valu    2    0        int 
   232 ;; Return value:  Size  Location     Type
   233 ;;                  1    wreg      void 
   234 ;; Registers used:
   235 ;;		wreg, status,2, status,0, cstack
   236 ;; Tracked objects:
   237 ;;		On entry : 0/0
   238 ;;		On exit  : 0/0
   239 ;;		Unchanged: 0/0
   240 ;; Data sizes:     COMRAM   BANK0
   241 ;;      Params:         0       0
   242 ;;      Locals:         4       0
   243 ;;      Temps:          0       0
   244 ;;      Totals:         4       0
   245 ;;Total ram usage:        4 bytes
   246 ;; Hardware stack levels required when called: 6
   247 ;; This function calls:
   248 ;;		_AddLeftBlinks
   249 ;;		_AddRightBlinks
   250 ;;		_GetADCValue
   251 ;;		_InitApp
   252 ;;		_ReversOn
   253 ;;		_Turn_49A
   254 ;; This function is called by:
   255 ;;		Startup code after reset
   256 ;; This function uses a non-reentrant model
   257 ;;
   258                           
   259                           	psect	text0
   260   000212                     __ptext0:
   261                           	callstack 0
   262   000212                     _main:
   263                           	callstack 25
   264   000212  ECCB  F002         	call	_InitApp	;wreg free
   265   000216                     l1213:
   266   000216  9880               	bcf	128,4,c	;volatile
   267   000218  9881               	bcf	129,4,c	;volatile
   268   00021A  9C80               	bcf	128,6,c	;volatile
   269   00021C  0E28               	movlw	40
   270   00021E  EC15  F000         	call	_GetADCValue
   271   000222  C00A  F01D         	movff	?_GetADCValue,main@_49A_in_value
   272   000226  C00B  F01E         	movff	?_GetADCValue+1,main@_49A_in_value+1
   273   00022A  0E30               	movlw	48
   274   00022C  EC15  F000         	call	_GetADCValue
   275   000230  C00A  F01F         	movff	?_GetADCValue,main@Reverse_in_value
   276   000234  C00B  F020         	movff	?_GetADCValue+1,main@Reverse_in_value+1
   277   000238  BE20               	btfsc	(main@Reverse_in_value+1)^0,7,c
   278   00023A  EF28  F001         	goto	u311
   279   00023E  5020               	movf	(main@Reverse_in_value+1)^0,w,c
   280   000240  E109               	bnz	u310
   281   000242  0E9C               	movlw	156
   282   000244  5C1F               	subwf	main@Reverse_in_value^0,w,c
   283   000246  A0D8               	btfss	status,0,c
   284   000248  EF28  F001         	goto	u311
   285   00024C  EF2A  F001         	goto	u310
   286   000250                     u311:
   287   000250  EF2E  F001         	goto	l1231
   288   000254                     u310:
   289   000254  ECAA  F002         	call	_ReversOn	;wreg free
   290   000258  EF5E  F001         	goto	l37
   291   00025C                     l1231:
   292   00025C  BE1E               	btfsc	(main@_49A_in_value+1)^0,7,c
   293   00025E  EF3C  F001         	goto	u320
   294   000262  501E               	movf	(main@_49A_in_value+1)^0,w,c
   295   000264  E107               	bnz	u321
   296   000266  0E0A               	movlw	10
   297   000268  5C1D               	subwf	main@_49A_in_value^0,w,c
   298   00026A  B0D8               	btfsc	status,0,c
   299   00026C  EF3A  F001         	goto	u321
   300   000270  EF3C  F001         	goto	u320
   301   000274                     u321:
   302   000274  EF40  F001         	goto	l1235
   303   000278                     u320:
   304   000278  ECB1  F001         	call	_Turn_49A	;wreg free
   305   00027C  EF0B  F001         	goto	l1213
   306   000280                     l1235:
   307   000280  042A               	decf	_wasTurningRight^0,w,c
   308   000282  A4D8               	btfss	status,2,c
   309   000284  EF46  F001         	goto	u331
   310   000288  EF48  F001         	goto	u330
   311   00028C                     u331:
   312   00028C  EF4C  F001         	goto	l1239
   313   000290                     u330:
   314   000290  EC01  F002         	call	_AddRightBlinks	;wreg free
   315   000294  EF0B  F001         	goto	l1213
   316   000298                     l1239:
   317   000298  0429               	decf	_wasTurningLeft^0,w,c
   318   00029A  A4D8               	btfss	status,2,c
   319   00029C  EF52  F001         	goto	u341
   320   0002A0  EF54  F001         	goto	u340
   321   0002A4                     u341:
   322   0002A4  EF58  F001         	goto	l1243
   323   0002A8                     u340:
   324   0002A8  EC4B  F002         	call	_AddLeftBlinks	;wreg free
   325   0002AC  EF0B  F001         	goto	l1213
   326   0002B0                     l1243:
   327   0002B0  0E00               	movlw	0
   328   0002B2  6E29               	movwf	_wasTurningLeft^0,c
   329   0002B4  0E00               	movlw	0
   330   0002B6  6E2A               	movwf	_wasTurningRight^0,c
   331   0002B8  EF0B  F001         	goto	l1213
   332   0002BC                     l37:
   333   0002BC  EF13  F000         	goto	start
   334   0002C0                     __end_of_main:
   335                           	callstack 0
   336                           
   337 ;; *************** function _Turn_49A *****************
   338 ;; Defined at:
   339 ;;		line 163 in file "user.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;  Current_valu    2   26[COMRAM] int 
   344 ;; Return value:  Size  Location     Type
   345 ;;                  1    wreg      _Bool 
   346 ;; Registers used:
   347 ;;		wreg, status,2, status,0, cstack
   348 ;; Tracked objects:
   349 ;;		On entry : 0/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMRAM   BANK0
   353 ;;      Params:         0       0
   354 ;;      Locals:         2       0
   355 ;;      Temps:          2       0
   356 ;;      Totals:         4       0
   357 ;;Total ram usage:        4 bytes
   358 ;; Hardware stack levels used: 1
   359 ;; Hardware stack levels required when called: 5
   360 ;; This function calls:
   361 ;;		_GetCurrentValue
   362 ;;		_GetDirection
   363 ;; This function is called by:
   364 ;;		_main
   365 ;; This function uses a non-reentrant model
   366 ;;
   367                           
   368                           	psect	text1
   369   000362                     __ptext1:
   370                           	callstack 0
   371   000362                     _Turn_49A:
   372                           	callstack 25
   373   000362                     
   374                           ;user.c: 166:         PORTAbits.RA6 = 1;
   375   000362  8C80               	bsf	128,6,c	;volatile
   376   000364                     
   377                           ;user.c: 167:         _delay((unsigned long)((100)*(4000000/4000.0)));
   378   000364  0E82               	movlw	130
   379   000366  6E19               	movwf	??_Turn_49A^0,c
   380   000368  0EDE               	movlw	222
   381   00036A                     u357:
   382   00036A  2EE8               	decfsz	wreg,f,c
   383   00036C  D7FE               	bra	u357
   384   00036E  2E19               	decfsz	??_Turn_49A^0,f,c
   385   000370  D7FC               	bra	u357
   386   000372                     
   387                           ;user.c: 169:         int Current_value = GetCurrentValue();
   388   000372  EC95  F002         	call	_GetCurrentValue	;wreg free
   389   000376  C013  F01B         	movff	?_GetCurrentValue,Turn_49A@Current_value
   390   00037A  C014  F01C         	movff	?_GetCurrentValue+1,Turn_49A@Current_value+1
   391   00037E                     
   392                           ;user.c: 171:         if (Current_value < 5)
   393   00037E  BE1C               	btfsc	(Turn_49A@Current_value+1)^0,7,c
   394   000380  EFCD  F001         	goto	u300
   395   000384  501C               	movf	(Turn_49A@Current_value+1)^0,w,c
   396   000386  E107               	bnz	u301
   397   000388  0E05               	movlw	5
   398   00038A  5C1B               	subwf	Turn_49A@Current_value^0,w,c
   399   00038C  B0D8               	btfsc	status,0,c
   400   00038E  EFCB  F001         	goto	u301
   401   000392  EFCD  F001         	goto	u300
   402   000396                     u301:
   403   000396  EFE7  F001         	goto	l118
   404   00039A                     u300:
   405   00039A                     
   406                           ;user.c: 172:                 {;user.c: 173:                 PORTAbits.RA6 = 1;
   407   00039A  8C80               	bsf	128,6,c	;volatile
   408   00039C                     
   409                           ;user.c: 175:                 GetDirection();
   410   00039C  EC60  F001         	call	_GetDirection	;wreg free
   411   0003A0                     
   412                           ;user.c: 176:                 _delay((unsigned long)((50)*(4000000/4000.0)));
   413   0003A0  0E41               	movlw	65
   414   0003A2  6E19               	movwf	??_Turn_49A^0,c
   415   0003A4  0EEE               	movlw	238
   416   0003A6                     u367:
   417   0003A6  2EE8               	decfsz	wreg,f,c
   418   0003A8  D7FE               	bra	u367
   419   0003AA  2E19               	decfsz	??_Turn_49A^0,f,c
   420   0003AC  D7FC               	bra	u367
   421   0003AE  D000               	nop2	
   422   0003B0                     
   423                           ;user.c: 177:                 PORTAbits.RA6 = 0;
   424   0003B0  9C80               	bcf	128,6,c	;volatile
   425   0003B2                     
   426                           ;user.c: 178:                 _delay((unsigned long)((200)*(4000000/4000.0)));
   427   0003B2  0E02               	movlw	2
   428   0003B4  6E1A               	movwf	(??_Turn_49A+1)^0,c
   429   0003B6  0E04               	movlw	4
   430   0003B8  6E19               	movwf	??_Turn_49A^0,c
   431   0003BA  0EBA               	movlw	186
   432   0003BC                     u377:
   433   0003BC  2EE8               	decfsz	wreg,f,c
   434   0003BE  D7FE               	bra	u377
   435   0003C0  2E19               	decfsz	??_Turn_49A^0,f,c
   436   0003C2  D7FC               	bra	u377
   437   0003C4  2E1A               	decfsz	(??_Turn_49A+1)^0,f,c
   438   0003C6  D7FA               	bra	u377
   439   0003C8  D000               	nop2	
   440   0003CA                     l1185:
   441   0003CA  EF00  F002         	goto	l119
   442   0003CE                     l118:
   443                           
   444                           ;user.c: 184:                 {;user.c: 185:                 PORTAbits.RA6 = 1;
   445   0003CE  8C80               	bsf	128,6,c	;volatile
   446   0003D0                     
   447                           ;user.c: 187:                 GetDirection();
   448   0003D0  EC60  F001         	call	_GetDirection	;wreg free
   449   0003D4                     
   450                           ;user.c: 188:                 _delay((unsigned long)((100)*(4000000/4000.0)));
   451   0003D4  0E82               	movlw	130
   452   0003D6  6E19               	movwf	??_Turn_49A^0,c
   453   0003D8  0EDE               	movlw	222
   454   0003DA                     u387:
   455   0003DA  2EE8               	decfsz	wreg,f,c
   456   0003DC  D7FE               	bra	u387
   457   0003DE  2E19               	decfsz	??_Turn_49A^0,f,c
   458   0003E0  D7FC               	bra	u387
   459   0003E2                     
   460                           ;user.c: 189:                 PORTAbits.RA6 = 0;
   461   0003E2  9C80               	bcf	128,6,c	;volatile
   462   0003E4                     
   463                           ;user.c: 190:                 _delay((unsigned long)((400)*(4000000/4000.0)));
   464   0003E4  0E03               	movlw	3
   465   0003E6  6E1A               	movwf	(??_Turn_49A+1)^0,c
   466   0003E8  0E08               	movlw	8
   467   0003EA  6E19               	movwf	??_Turn_49A^0,c
   468   0003EC  0E77               	movlw	119
   469   0003EE                     u397:
   470   0003EE  2EE8               	decfsz	wreg,f,c
   471   0003F0  D7FE               	bra	u397
   472   0003F2  2E19               	decfsz	??_Turn_49A^0,f,c
   473   0003F4  D7FC               	bra	u397
   474   0003F6  2E1A               	decfsz	(??_Turn_49A+1)^0,f,c
   475   0003F8  D7FA               	bra	u397
   476   0003FA  F000               	nop	
   477   0003FC  EFE5  F001         	goto	l1185
   478   000400                     l119:
   479   000400  0012               	return		;funcret
   480   000402                     __end_of_Turn_49A:
   481                           	callstack 0
   482                           
   483 ;; *************** function _GetDirection *****************
   484 ;; Defined at:
   485 ;;		line 141 in file "user.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;		None
   488 ;; Auto vars:     Size  Location     Type
   489 ;;		None
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      _Bool 
   492 ;; Registers used:
   493 ;;		wreg, status,2, status,0, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMRAM   BANK0
   499 ;;      Params:         0       0
   500 ;;      Locals:         0       0
   501 ;;      Temps:          0       0
   502 ;;      Totals:         0       0
   503 ;;Total ram usage:        0 bytes
   504 ;; Hardware stack levels used: 1
   505 ;; Hardware stack levels required when called: 4
   506 ;; This function calls:
   507 ;;		_GetADCValue
   508 ;; This function is called by:
   509 ;;		_Turn_49A
   510 ;; This function uses a non-reentrant model
   511 ;;
   512                           
   513                           	psect	text2
   514   0002C0                     __ptext2:
   515                           	callstack 0
   516   0002C0                     _GetDirection:
   517                           	callstack 25
   518   0002C0                     
   519                           ;user.c: 143:     R_ch_in_value = GetADCValue(0b00000100);
   520   0002C0  0E04               	movlw	4
   521   0002C2  EC15  F000         	call	_GetADCValue
   522   0002C6  C00A  F027         	movff	?_GetADCValue,_R_ch_in_value
   523   0002CA  C00B  F028         	movff	?_GetADCValue+1,_R_ch_in_value+1
   524                           
   525                           ;user.c: 144:     L_ch_in_value = GetADCValue(0b00011000);
   526   0002CE  0E18               	movlw	24
   527   0002D0  EC15  F000         	call	_GetADCValue
   528   0002D4  C00A  F025         	movff	?_GetADCValue,_L_ch_in_value
   529   0002D8  C00B  F026         	movff	?_GetADCValue+1,_L_ch_in_value+1
   530   0002DC                     
   531                           ;user.c: 146:     if (R_ch_in_value > 10 && R_ch_in_value < 10)
   532   0002DC  BE28               	btfsc	(_R_ch_in_value+1)^0,7,c
   533   0002DE  EF7A  F001         	goto	u261
   534   0002E2  5028               	movf	(_R_ch_in_value+1)^0,w,c
   535   0002E4  E109               	bnz	u260
   536   0002E6  0E0B               	movlw	11
   537   0002E8  5C27               	subwf	_R_ch_in_value^0,w,c
   538   0002EA  A0D8               	btfss	status,0,c
   539   0002EC  EF7A  F001         	goto	u261
   540   0002F0  EF7C  F001         	goto	u260
   541   0002F4                     u261:
   542   0002F4  EF8E  F001         	goto	l1151
   543   0002F8                     u260:
   544   0002F8  BE28               	btfsc	(_R_ch_in_value+1)^0,7,c
   545   0002FA  EF8A  F001         	goto	u270
   546   0002FE  5028               	movf	(_R_ch_in_value+1)^0,w,c
   547   000300  E107               	bnz	u271
   548   000302  0E0A               	movlw	10
   549   000304  5C27               	subwf	_R_ch_in_value^0,w,c
   550   000306  B0D8               	btfsc	status,0,c
   551   000308  EF88  F001         	goto	u271
   552   00030C  EF8A  F001         	goto	u270
   553   000310                     u271:
   554   000310  EF8E  F001         	goto	l1151
   555   000314                     u270:
   556   000314                     
   557                           ;user.c: 147:         {return;	Return value of _GetDirection is never used
   558   000314  0E01               	movlw	1
   559   000316  6E2A               	movwf	_wasTurningRight^0,c
   560   000318  EFB0  F001         	goto	l112
   561   00031C                     l1151:
   562   00031C  BE28               	btfsc	(_R_ch_in_value+1)^0,7,c
   563   00031E  EF9C  F001         	goto	u280
   564   000322  5028               	movf	(_R_ch_in_value+1)^0,w,c
   565   000324  E107               	bnz	u281
   566   000326  0E0A               	movlw	10
   567   000328  5C27               	subwf	_R_ch_in_value^0,w,c
   568   00032A  B0D8               	btfsc	status,0,c
   569   00032C  EF9A  F001         	goto	u281
   570   000330  EF9C  F001         	goto	u280
   571   000334                     u281:
   572   000334  EFAE  F001         	goto	l1161
   573   000338                     u280:
   574   000338  BE28               	btfsc	(_R_ch_in_value+1)^0,7,c
   575   00033A  EFA8  F001         	goto	u291
   576   00033E  5028               	movf	(_R_ch_in_value+1)^0,w,c
   577   000340  E109               	bnz	u290
   578   000342  0E0B               	movlw	11
   579   000344  5C27               	subwf	_R_ch_in_value^0,w,c
   580   000346  A0D8               	btfss	status,0,c
   581   000348  EFA8  F001         	goto	u291
   582   00034C  EFAA  F001         	goto	u290
   583   000350                     u291:
   584   000350  EFAE  F001         	goto	l1161
   585   000354                     u290:
   586   000354                     
   587                           ;user.c: 151:         {return;	Return value of _GetDirection is never used
   588   000354  0E01               	movlw	1
   589   000356  6E29               	movwf	_wasTurningLeft^0,c
   590   000358  EFB0  F001         	goto	l112
   591   00035C                     l1161:
   592                           
   593                           ;user.c: 155:     {return;	Return value of _GetDirection is never used
   594   00035C  0E00               	movlw	0
   595   00035E  6E29               	movwf	_wasTurningLeft^0,c
   596   000360                     l112:
   597   000360  0012               	return		;funcret
   598   000362                     __end_of_GetDirection:
   599                           	callstack 0
   600                           
   601 ;; *************** function _GetCurrentValue *****************
   602 ;; Defined at:
   603 ;;		line 132 in file "user.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;		None
   606 ;; Auto vars:     Size  Location     Type
   607 ;;  V_out_value     2   22[COMRAM] int 
   608 ;;  V_in_value      2   20[COMRAM] int 
   609 ;; Return value:  Size  Location     Type
   610 ;;                  2   18[COMRAM] int 
   611 ;; Registers used:
   612 ;;		wreg, status,2, status,0, cstack
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMRAM   BANK0
   618 ;;      Params:         2       0
   619 ;;      Locals:         4       0
   620 ;;      Temps:          0       0
   621 ;;      Totals:         6       0
   622 ;;Total ram usage:        6 bytes
   623 ;; Hardware stack levels used: 1
   624 ;; Hardware stack levels required when called: 4
   625 ;; This function calls:
   626 ;;		_GetADCValue
   627 ;; This function is called by:
   628 ;;		_Turn_49A
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632                           	psect	text3
   633   00052A                     __ptext3:
   634                           	callstack 0
   635   00052A                     _GetCurrentValue:
   636                           	callstack 25
   637   00052A                     
   638                           ;user.c: 134:     int V_in_value = GetADCValue(0b00000001);
   639   00052A  0E01               	movlw	1
   640   00052C  EC15  F000         	call	_GetADCValue
   641   000530  C00A  F015         	movff	?_GetADCValue,GetCurrentValue@V_in_value
   642   000534  C00B  F016         	movff	?_GetADCValue+1,GetCurrentValue@V_in_value+1
   643                           
   644                           ;user.c: 135:     int V_out_value = GetADCValue(0b00000010);
   645   000538  0E02               	movlw	2
   646   00053A  EC15  F000         	call	_GetADCValue
   647   00053E  C00A  F017         	movff	?_GetADCValue,GetCurrentValue@V_out_value
   648   000542  C00B  F018         	movff	?_GetADCValue+1,GetCurrentValue@V_out_value+1
   649   000546                     
   650                           ;user.c: 136:     return (V_in_value - V_out_value);
   651   000546  5017               	movf	GetCurrentValue@V_out_value^0,w,c
   652   000548  5C15               	subwf	GetCurrentValue@V_in_value^0,w,c
   653   00054A  6E13               	movwf	?_GetCurrentValue^0,c
   654   00054C  5018               	movf	(GetCurrentValue@V_out_value+1)^0,w,c
   655   00054E  5816               	subwfb	(GetCurrentValue@V_in_value+1)^0,w,c
   656   000550  6E14               	movwf	(?_GetCurrentValue+1)^0,c
   657   000552  0012               	return		;funcret
   658   000554                     __end_of_GetCurrentValue:
   659                           	callstack 0
   660                           
   661 ;; *************** function _GetADCValue *****************
   662 ;; Defined at:
   663 ;;		line 92 in file "user.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;  Channel         1    wreg     unsigned char 
   666 ;; Auto vars:     Size  Location     Type
   667 ;;  Channel         1   13[COMRAM] unsigned char 
   668 ;;  temp_2          2   16[COMRAM] int 
   669 ;;  temp_1          2   14[COMRAM] int 
   670 ;; Return value:  Size  Location     Type
   671 ;;                  2    9[COMRAM] int 
   672 ;; Registers used:
   673 ;;		wreg, status,2, status,0, cstack
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMRAM   BANK0
   679 ;;      Params:         2       0
   680 ;;      Locals:         5       0
   681 ;;      Temps:          2       0
   682 ;;      Totals:         9       0
   683 ;;Total ram usage:        9 bytes
   684 ;; Hardware stack levels used: 1
   685 ;; Hardware stack levels required when called: 3
   686 ;; This function calls:
   687 ;;		___awdiv
   688 ;; This function is called by:
   689 ;;		_main
   690 ;;		_GetCurrentValue
   691 ;;		_GetDirection
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           	psect	text4
   696   00002A                     __ptext4:
   697                           	callstack 0
   698   00002A                     _GetADCValue:
   699                           	callstack 25
   700                           
   701                           ;incstack = 0
   702                           ;GetADCValue@Channel stored from wreg
   703   00002A  6E0E               	movwf	GetADCValue@Channel^0,c
   704   00002C                     
   705                           ;user.c: 95:     int temp_2 =0;
   706   00002C  0E00               	movlw	0
   707   00002E  6E12               	movwf	(GetADCValue@temp_2+1)^0,c
   708   000030  0E00               	movlw	0
   709   000032  6E11               	movwf	GetADCValue@temp_2^0,c
   710                           
   711                           ;user.c: 97:     ADCON0 = 0b11100011;
   712   000034  0EE3               	movlw	227
   713   000036  6EC2               	movwf	194,c	;volatile
   714                           
   715                           ;user.c: 98:     switch(Channel)
   716   000038  EF3C  F000         	goto	l1111
   717   00003C                     l90:
   718   00003C  50C2               	movf	194,w,c	;volatile
   719   00003E  EF65  F000         	goto	l1113
   720   000042                     l1093:
   721   000042  84C2               	bsf	194,2,c	;volatile
   722   000044  EF65  F000         	goto	l1113
   723   000048                     l1095:
   724   000048  86C2               	bsf	194,3,c	;volatile
   725   00004A  EF65  F000         	goto	l1113
   726   00004E                     l1097:
   727   00004E  0E0C               	movlw	12
   728   000050  12C2               	iorwf	194,f,c	;volatile
   729   000052  EF65  F000         	goto	l1113
   730   000056                     l1099:
   731   000056  88C2               	bsf	194,4,c	;volatile
   732   000058  EF65  F000         	goto	l1113
   733   00005C                     l1101:
   734   00005C  0E14               	movlw	20
   735   00005E  12C2               	iorwf	194,f,c	;volatile
   736   000060  EF65  F000         	goto	l1113
   737   000064                     l1103:
   738   000064  0E18               	movlw	24
   739   000066  12C2               	iorwf	194,f,c	;volatile
   740   000068  EF65  F000         	goto	l1113
   741   00006C                     l1105:
   742   00006C  0E00               	movlw	0
   743   00006E  6E0B               	movwf	(?_GetADCValue+1)^0,c
   744   000070  0E00               	movlw	0
   745   000072  6E0A               	movwf	?_GetADCValue^0,c
   746   000074  EFA6  F000         	goto	l99
   747   000078                     l1111:
   748   000078  500E               	movf	GetADCValue@Channel^0,w,c
   749   00007A  6E0C               	movwf	??_GetADCValue^0,c
   750   00007C  6A0D               	clrf	(??_GetADCValue+1)^0,c
   751                           
   752                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   753                           ; Switch size 1, requested type "simple"
   754                           ; Number of cases is 1, Range of values is 0 to 0
   755                           ; switch strategies available:
   756                           ; Name         Instructions Cycles
   757                           ; simple_byte            4     3 (average)
   758                           ;	Chosen strategy is simple_byte
   759   00007E  500D               	movf	(??_GetADCValue+1)^0,w,c
   760   000080  0A00               	xorlw	0	; case 0
   761   000082  B4D8               	btfsc	status,2,c
   762   000084  EF46  F000         	goto	l1249
   763   000088  EF36  F000         	goto	l1105
   764   00008C                     l1249:
   765                           
   766                           ; Switch size 1, requested type "simple"
   767                           ; Number of cases is 7, Range of values is 1 to 56
   768                           ; switch strategies available:
   769                           ; Name         Instructions Cycles
   770                           ; simple_byte           22    12 (average)
   771                           ;	Chosen strategy is simple_byte
   772   00008C  500C               	movf	??_GetADCValue^0,w,c
   773   00008E  0A01               	xorlw	1	; case 1
   774   000090  B4D8               	btfsc	status,2,c
   775   000092  EF1E  F000         	goto	l90
   776   000096  0A03               	xorlw	3	; case 2
   777   000098  B4D8               	btfsc	status,2,c
   778   00009A  EF21  F000         	goto	l1093
   779   00009E  0A06               	xorlw	6	; case 4
   780   0000A0  B4D8               	btfsc	status,2,c
   781   0000A2  EF24  F000         	goto	l1095
   782   0000A6  0A1C               	xorlw	28	; case 24
   783   0000A8  B4D8               	btfsc	status,2,c
   784   0000AA  EF27  F000         	goto	l1097
   785   0000AE  0A30               	xorlw	48	; case 40
   786   0000B0  B4D8               	btfsc	status,2,c
   787   0000B2  EF2B  F000         	goto	l1099
   788   0000B6  0A18               	xorlw	24	; case 48
   789   0000B8  B4D8               	btfsc	status,2,c
   790   0000BA  EF2E  F000         	goto	l1101
   791   0000BE  0A08               	xorlw	8	; case 56
   792   0000C0  B4D8               	btfsc	status,2,c
   793   0000C2  EF32  F000         	goto	l1103
   794   0000C6  EF36  F000         	goto	l1105
   795   0000CA                     l1113:
   796                           
   797                           ;user.c: 110:     _delay((unsigned long)((10)*(4000000/4000.0)));
   798   0000CA  0E0D               	movlw	13
   799   0000CC  6E0C               	movwf	??_GetADCValue^0,c
   800   0000CE  0EFC               	movlw	252
   801   0000D0                     u407:
   802   0000D0  2EE8               	decfsz	wreg,f,c
   803   0000D2  D7FE               	bra	u407
   804   0000D4  2E0C               	decfsz	??_GetADCValue^0,f,c
   805   0000D6  D7FC               	bra	u407
   806   0000D8                     
   807                           ;user.c: 111:  GO_nDONE = 1;
   808   0000D8  82C2               	bsf	4034,1,c	;volatile
   809   0000DA                     l100:
   810                           
   811                           ;user.c: 112:  while(GO_nDONE)
   812   0000DA  B2C2               	btfsc	4034,1,c	;volatile
   813   0000DC  EF72  F000         	goto	u241
   814   0000E0  EF74  F000         	goto	u240
   815   0000E4                     u241:
   816   0000E4  EF6D  F000         	goto	l100
   817   0000E8                     u240:
   818   0000E8                     
   819                           ;user.c: 116:     temp_1 = ((ADRESH<<8)+ADRESL);
   820   0000E8  50C4               	movf	196,w,c	;volatile
   821   0000EA  6E0D               	movwf	(??_GetADCValue+1)^0,c
   822   0000EC  6A0C               	clrf	??_GetADCValue^0,c
   823   0000EE  50C3               	movf	195,w,c	;volatile
   824   0000F0  240C               	addwf	??_GetADCValue^0,w,c
   825   0000F2  6E0F               	movwf	GetADCValue@temp_1^0,c
   826   0000F4  0E00               	movlw	0
   827   0000F6  200D               	addwfc	(??_GetADCValue+1)^0,w,c
   828   0000F8  6E10               	movwf	(GetADCValue@temp_1+1)^0,c
   829   0000FA                     
   830                           ;user.c: 118:     _delay((unsigned long)((20)*(4000000/4000.0)));
   831   0000FA  0E1A               	movlw	26
   832   0000FC  6E0C               	movwf	??_GetADCValue^0,c
   833   0000FE  0EF8               	movlw	248
   834   000100                     u417:
   835   000100  2EE8               	decfsz	wreg,f,c
   836   000102  D7FE               	bra	u417
   837   000104  2E0C               	decfsz	??_GetADCValue^0,f,c
   838   000106  D7FC               	bra	u417
   839   000108  D000               	nop2	
   840   00010A                     
   841                           ;user.c: 119:  GO_nDONE = 1;
   842   00010A  82C2               	bsf	4034,1,c	;volatile
   843   00010C                     l103:
   844                           
   845                           ;user.c: 120:  while(GO_nDONE)
   846   00010C  B2C2               	btfsc	4034,1,c	;volatile
   847   00010E  EF8B  F000         	goto	u251
   848   000112  EF8D  F000         	goto	u250
   849   000116                     u251:
   850   000116  EF86  F000         	goto	l103
   851   00011A                     u250:
   852   00011A                     
   853                           ;user.c: 123:     temp_2 = ((ADRESH<<8)+ADRESL);
   854   00011A  50C4               	movf	196,w,c	;volatile
   855   00011C  6E0D               	movwf	(??_GetADCValue+1)^0,c
   856   00011E  6A0C               	clrf	??_GetADCValue^0,c
   857   000120  50C3               	movf	195,w,c	;volatile
   858   000122  240C               	addwf	??_GetADCValue^0,w,c
   859   000124  6E11               	movwf	GetADCValue@temp_2^0,c
   860   000126  0E00               	movlw	0
   861   000128  200D               	addwfc	(??_GetADCValue+1)^0,w,c
   862   00012A  6E12               	movwf	(GetADCValue@temp_2+1)^0,c
   863   00012C                     
   864                           ;user.c: 125:     return ((temp_1 + temp_2)/2);
   865   00012C  5011               	movf	GetADCValue@temp_2^0,w,c
   866   00012E  240F               	addwf	GetADCValue@temp_1^0,w,c
   867   000130  6E02               	movwf	___awdiv@dividend^0,c
   868   000132  5012               	movf	(GetADCValue@temp_2+1)^0,w,c
   869   000134  2010               	addwfc	(GetADCValue@temp_1+1)^0,w,c
   870   000136  6E03               	movwf	(___awdiv@dividend+1)^0,c
   871   000138  0E00               	movlw	0
   872   00013A  6E05               	movwf	(___awdiv@divisor+1)^0,c
   873   00013C  0E02               	movlw	2
   874   00013E  6E04               	movwf	___awdiv@divisor^0,c
   875   000140  ECA7  F000         	call	___awdiv	;wreg free
   876   000144  C002  F00A         	movff	?___awdiv,?_GetADCValue
   877   000148  C003  F00B         	movff	?___awdiv+1,?_GetADCValue+1
   878   00014C                     l99:
   879   00014C  0012               	return		;funcret
   880   00014E                     __end_of_GetADCValue:
   881                           	callstack 0
   882                           
   883 ;; *************** function ___awdiv *****************
   884 ;; Defined at:
   885 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;  dividend        2    1[COMRAM] int 
   888 ;;  divisor         2    3[COMRAM] int 
   889 ;; Auto vars:     Size  Location     Type
   890 ;;  quotient        2    7[COMRAM] int 
   891 ;;  sign            1    6[COMRAM] unsigned char 
   892 ;;  counter         1    5[COMRAM] unsigned char 
   893 ;; Return value:  Size  Location     Type
   894 ;;                  2    1[COMRAM] int 
   895 ;; Registers used:
   896 ;;		wreg, status,2, status,0
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0
   902 ;;      Params:         4       0
   903 ;;      Locals:         4       0
   904 ;;      Temps:          0       0
   905 ;;      Totals:         8       0
   906 ;;Total ram usage:        8 bytes
   907 ;; Hardware stack levels used: 1
   908 ;; Hardware stack levels required when called: 2
   909 ;; This function calls:
   910 ;;		Nothing
   911 ;; This function is called by:
   912 ;;		_GetADCValue
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           	psect	text5
   917   00014E                     __ptext5:
   918                           	callstack 0
   919   00014E                     ___awdiv:
   920                           	callstack 25
   921   00014E  0E00               	movlw	0
   922   000150  6E07               	movwf	___awdiv@sign^0,c
   923   000152  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
   924   000154  EFB0  F000         	goto	u180
   925   000158  EFAE  F000         	goto	u181
   926   00015C                     u181:
   927   00015C  EFB6  F000         	goto	l1055
   928   000160                     u180:
   929   000160  6C04               	negf	___awdiv@divisor^0,c
   930   000162  1E05               	comf	(___awdiv@divisor+1)^0,f,c
   931   000164  B0D8               	btfsc	status,0,c
   932   000166  2A05               	incf	(___awdiv@divisor+1)^0,f,c
   933   000168  0E01               	movlw	1
   934   00016A  6E07               	movwf	___awdiv@sign^0,c
   935   00016C                     l1055:
   936   00016C  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
   937   00016E  EFBD  F000         	goto	u190
   938   000172  EFBB  F000         	goto	u191
   939   000176                     u191:
   940   000176  EFC3  F000         	goto	l1061
   941   00017A                     u190:
   942   00017A  6C02               	negf	___awdiv@dividend^0,c
   943   00017C  1E03               	comf	(___awdiv@dividend+1)^0,f,c
   944   00017E  B0D8               	btfsc	status,0,c
   945   000180  2A03               	incf	(___awdiv@dividend+1)^0,f,c
   946   000182  0E01               	movlw	1
   947   000184  1A07               	xorwf	___awdiv@sign^0,f,c
   948   000186                     l1061:
   949   000186  0E00               	movlw	0
   950   000188  6E09               	movwf	(___awdiv@quotient+1)^0,c
   951   00018A  0E00               	movlw	0
   952   00018C  6E08               	movwf	___awdiv@quotient^0,c
   953   00018E  5004               	movf	___awdiv@divisor^0,w,c
   954   000190  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
   955   000192  B4D8               	btfsc	status,2,c
   956   000194  EFCE  F000         	goto	u201
   957   000198  EFD0  F000         	goto	u200
   958   00019C                     u201:
   959   00019C  EFF8  F000         	goto	l1083
   960   0001A0                     u200:
   961   0001A0  0E01               	movlw	1
   962   0001A2  6E06               	movwf	___awdiv@counter^0,c
   963   0001A4  EFD8  F000         	goto	l1069
   964   0001A8                     l1067:
   965   0001A8  90D8               	bcf	status,0,c
   966   0001AA  3604               	rlcf	___awdiv@divisor^0,f,c
   967   0001AC  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
   968   0001AE  2A06               	incf	___awdiv@counter^0,f,c
   969   0001B0                     l1069:
   970   0001B0  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
   971   0001B2  EFDD  F000         	goto	u211
   972   0001B6  EFDF  F000         	goto	u210
   973   0001BA                     u211:
   974   0001BA  EFD4  F000         	goto	l1067
   975   0001BE                     u210:
   976   0001BE                     l1071:
   977   0001BE  90D8               	bcf	status,0,c
   978   0001C0  3608               	rlcf	___awdiv@quotient^0,f,c
   979   0001C2  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
   980   0001C4  5004               	movf	___awdiv@divisor^0,w,c
   981   0001C6  5C02               	subwf	___awdiv@dividend^0,w,c
   982   0001C8  5005               	movf	(___awdiv@divisor+1)^0,w,c
   983   0001CA  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
   984   0001CC  A0D8               	btfss	status,0,c
   985   0001CE  EFEB  F000         	goto	u221
   986   0001D2  EFED  F000         	goto	u220
   987   0001D6                     u221:
   988   0001D6  EFF2  F000         	goto	l1079
   989   0001DA                     u220:
   990   0001DA  5004               	movf	___awdiv@divisor^0,w,c
   991   0001DC  5E02               	subwf	___awdiv@dividend^0,f,c
   992   0001DE  5005               	movf	(___awdiv@divisor+1)^0,w,c
   993   0001E0  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
   994   0001E2  8008               	bsf	___awdiv@quotient^0,0,c
   995   0001E4                     l1079:
   996   0001E4  90D8               	bcf	status,0,c
   997   0001E6  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
   998   0001E8  3204               	rrcf	___awdiv@divisor^0,f,c
   999   0001EA  2E06               	decfsz	___awdiv@counter^0,f,c
  1000   0001EC  EFDF  F000         	goto	l1071
  1001   0001F0                     l1083:
  1002   0001F0  5007               	movf	___awdiv@sign^0,w,c
  1003   0001F2  B4D8               	btfsc	status,2,c
  1004   0001F4  EFFE  F000         	goto	u231
  1005   0001F8  EF00  F001         	goto	u230
  1006   0001FC                     u231:
  1007   0001FC  EF04  F001         	goto	l1087
  1008   000200                     u230:
  1009   000200  6C08               	negf	___awdiv@quotient^0,c
  1010   000202  1E09               	comf	(___awdiv@quotient+1)^0,f,c
  1011   000204  B0D8               	btfsc	status,0,c
  1012   000206  2A09               	incf	(___awdiv@quotient+1)^0,f,c
  1013   000208                     l1087:
  1014   000208  C008  F002         	movff	___awdiv@quotient,?___awdiv
  1015   00020C  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
  1016   000210  0012               	return		;funcret
  1017   000212                     __end_of___awdiv:
  1018                           	callstack 0
  1019                           
  1020 ;; *************** function _ReversOn *****************
  1021 ;; Defined at:
  1022 ;;		line 246 in file "user.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;		None
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;		None
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		wreg
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMRAM   BANK0
  1036 ;;      Params:         0       0
  1037 ;;      Locals:         0       0
  1038 ;;      Temps:          2       0
  1039 ;;      Totals:         2       0
  1040 ;;Total ram usage:        2 bytes
  1041 ;; Hardware stack levels used: 1
  1042 ;; Hardware stack levels required when called: 2
  1043 ;; This function calls:
  1044 ;;		Nothing
  1045 ;; This function is called by:
  1046 ;;		_main
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           	psect	text6
  1051   000554                     __ptext6:
  1052                           	callstack 0
  1053   000554                     _ReversOn:
  1054                           	callstack 28
  1055   000554                     
  1056                           ;user.c: 251:             _delay((unsigned long)((120)*(4000000/4000.0)));
  1057   000554  0E9C               	movlw	156
  1058   000556  6E02               	movwf	??_ReversOn^0,c
  1059   000558  0ED7               	movlw	215
  1060   00055A                     u427:
  1061   00055A  2EE8               	decfsz	wreg,f,c
  1062   00055C  D7FE               	bra	u427
  1063   00055E  2E02               	decfsz	??_ReversOn^0,f,c
  1064   000560  D7FC               	bra	u427
  1065   000562  F000               	nop	
  1066                           
  1067                           ;user.c: 253:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1068   000564  0E03               	movlw	3
  1069   000566  6E03               	movwf	(??_ReversOn+1)^0,c
  1070   000568  0E8A               	movlw	138
  1071   00056A  6E02               	movwf	??_ReversOn^0,c
  1072   00056C  0E56               	movlw	86
  1073   00056E                     u437:
  1074   00056E  2EE8               	decfsz	wreg,f,c
  1075   000570  D7FE               	bra	u437
  1076   000572  2E02               	decfsz	??_ReversOn^0,f,c
  1077   000574  D7FC               	bra	u437
  1078   000576  2E03               	decfsz	(??_ReversOn+1)^0,f,c
  1079   000578  D7FA               	bra	u437
  1080   00057A  0012               	return		;funcret
  1081   00057C                     __end_of_ReversOn:
  1082                           	callstack 0
  1083                           
  1084 ;; *************** function _InitApp *****************
  1085 ;; Defined at:
  1086 ;;		line 34 in file "user.c"
  1087 ;; Parameters:    Size  Location     Type
  1088 ;;		None
  1089 ;; Auto vars:     Size  Location     Type
  1090 ;;		None
  1091 ;; Return value:  Size  Location     Type
  1092 ;;                  1    wreg      void 
  1093 ;; Registers used:
  1094 ;;		wreg, status,2
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMRAM   BANK0
  1100 ;;      Params:         0       0
  1101 ;;      Locals:         0       0
  1102 ;;      Temps:          0       0
  1103 ;;      Totals:         0       0
  1104 ;;Total ram usage:        0 bytes
  1105 ;; Hardware stack levels used: 1
  1106 ;; Hardware stack levels required when called: 2
  1107 ;; This function calls:
  1108 ;;		Nothing
  1109 ;; This function is called by:
  1110 ;;		_main
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           	psect	text7
  1115   000596                     __ptext7:
  1116                           	callstack 0
  1117   000596                     _InitApp:
  1118                           	callstack 28
  1119   000596                     
  1120                           ;user.c: 38:     ADCON1 = 0b00000000;
  1121   000596  0E00               	movlw	0
  1122   000598  6EC1               	movwf	193,c	;volatile
  1123                           
  1124                           ;user.c: 42:     TRISA = 0b00000000;
  1125   00059A  0E00               	movlw	0
  1126   00059C  6E92               	movwf	146,c	;volatile
  1127                           
  1128                           ;user.c: 43:     TRISB = 0b00000000;
  1129   00059E  0E00               	movlw	0
  1130   0005A0  6E93               	movwf	147,c	;volatile
  1131                           
  1132                           ;user.c: 44:     ADCON2 = 0b00001111;
  1133   0005A2  0E0F               	movlw	15
  1134   0005A4  6EC0               	movwf	192,c	;volatile
  1135   0005A6  0012               	return		;funcret
  1136   0005A8                     __end_of_InitApp:
  1137                           	callstack 0
  1138                           
  1139 ;; *************** function _AddRightBlinks *****************
  1140 ;; Defined at:
  1141 ;;		line 198 in file "user.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;		None
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;		None
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      _Bool 
  1148 ;; Registers used:
  1149 ;;		wreg, status,2
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMRAM   BANK0
  1155 ;;      Params:         0       0
  1156 ;;      Locals:         0       0
  1157 ;;      Temps:          2       0
  1158 ;;      Totals:         2       0
  1159 ;;Total ram usage:        2 bytes
  1160 ;; Hardware stack levels used: 1
  1161 ;; Hardware stack levels required when called: 2
  1162 ;; This function calls:
  1163 ;;		Nothing
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           	psect	text8
  1170   000402                     __ptext8:
  1171                           	callstack 0
  1172   000402                     _AddRightBlinks:
  1173                           	callstack 28
  1174   000402                     
  1175                           ;user.c: 202:             PORTAbits.RA4 = 1;
  1176   000402  8880               	bsf	128,4,c	;volatile
  1177   000404                     
  1178                           ;user.c: 204:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1179   000404  0E02               	movlw	2
  1180   000406  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1181   000408  0E86               	movlw	134
  1182   00040A  6E02               	movwf	??_AddRightBlinks^0,c
  1183   00040C  0E99               	movlw	153
  1184   00040E                     u447:
  1185   00040E  2EE8               	decfsz	wreg,f,c
  1186   000410  D7FE               	bra	u447
  1187   000412  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1188   000414  D7FC               	bra	u447
  1189   000416  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1190   000418  D7FA               	bra	u447
  1191   00041A  F000               	nop	
  1192   00041C                     
  1193                           ;user.c: 205:             PORTAbits.RA4 = 0;
  1194   00041C  9880               	bcf	128,4,c	;volatile
  1195                           
  1196                           ;user.c: 206:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1197   00041E  0E03               	movlw	3
  1198   000420  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1199   000422  0E8A               	movlw	138
  1200   000424  6E02               	movwf	??_AddRightBlinks^0,c
  1201   000426  0E56               	movlw	86
  1202   000428                     u457:
  1203   000428  2EE8               	decfsz	wreg,f,c
  1204   00042A  D7FE               	bra	u457
  1205   00042C  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1206   00042E  D7FC               	bra	u457
  1207   000430  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1208   000432  D7FA               	bra	u457
  1209   000434                     
  1210                           ;user.c: 207:             PORTAbits.RA4 = 1;
  1211   000434  8880               	bsf	128,4,c	;volatile
  1212                           
  1213                           ;user.c: 209:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1214   000436  0E02               	movlw	2
  1215   000438  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1216   00043A  0E86               	movlw	134
  1217   00043C  6E02               	movwf	??_AddRightBlinks^0,c
  1218   00043E  0E99               	movlw	153
  1219   000440                     u467:
  1220   000440  2EE8               	decfsz	wreg,f,c
  1221   000442  D7FE               	bra	u467
  1222   000444  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1223   000446  D7FC               	bra	u467
  1224   000448  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1225   00044A  D7FA               	bra	u467
  1226   00044C  F000               	nop	
  1227   00044E                     
  1228                           ;user.c: 210:             PORTAbits.RA4 = 0;
  1229   00044E  9880               	bcf	128,4,c	;volatile
  1230                           
  1231                           ;user.c: 211:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1232   000450  0E03               	movlw	3
  1233   000452  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1234   000454  0E8A               	movlw	138
  1235   000456  6E02               	movwf	??_AddRightBlinks^0,c
  1236   000458  0E56               	movlw	86
  1237   00045A                     u477:
  1238   00045A  2EE8               	decfsz	wreg,f,c
  1239   00045C  D7FE               	bra	u477
  1240   00045E  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1241   000460  D7FC               	bra	u477
  1242   000462  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1243   000464  D7FA               	bra	u477
  1244   000466                     
  1245                           ;user.c: 212:             PORTAbits.RA4 = 1;
  1246   000466  8880               	bsf	128,4,c	;volatile
  1247                           
  1248                           ;user.c: 214:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1249   000468  0E02               	movlw	2
  1250   00046A  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1251   00046C  0E86               	movlw	134
  1252   00046E  6E02               	movwf	??_AddRightBlinks^0,c
  1253   000470  0E99               	movlw	153
  1254   000472                     u487:
  1255   000472  2EE8               	decfsz	wreg,f,c
  1256   000474  D7FE               	bra	u487
  1257   000476  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1258   000478  D7FC               	bra	u487
  1259   00047A  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1260   00047C  D7FA               	bra	u487
  1261   00047E  F000               	nop	
  1262   000480                     
  1263                           ;user.c: 215:             PORTAbits.RA4 = 0;
  1264   000480  9880               	bcf	128,4,c	;volatile
  1265                           
  1266                           ;user.c: 216:             _delay((unsigned long)((100)*(4000000/4000.0)));
  1267   000482  0E82               	movlw	130
  1268   000484  6E02               	movwf	??_AddRightBlinks^0,c
  1269   000486  0EDE               	movlw	222
  1270   000488                     u497:
  1271   000488  2EE8               	decfsz	wreg,f,c
  1272   00048A  D7FE               	bra	u497
  1273   00048C  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1274   00048E  D7FC               	bra	u497
  1275   000490                     
  1276                           ;user.c: 217:             return wasTurningRight = 0;;	Return value of _AddRightBlinks i
      +                          s never used
  1277   000490  0E00               	movlw	0
  1278   000492  6E2A               	movwf	_wasTurningRight^0,c
  1279   000494  0012               	return		;funcret
  1280   000496                     __end_of_AddRightBlinks:
  1281                           	callstack 0
  1282                           
  1283 ;; *************** function _AddLeftBlinks *****************
  1284 ;; Defined at:
  1285 ;;		line 222 in file "user.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;		None
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  1    wreg      _Bool 
  1292 ;; Registers used:
  1293 ;;		wreg, status,2
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0
  1299 ;;      Params:         0       0
  1300 ;;      Locals:         0       0
  1301 ;;      Temps:          2       0
  1302 ;;      Totals:         2       0
  1303 ;;Total ram usage:        2 bytes
  1304 ;; Hardware stack levels used: 1
  1305 ;; Hardware stack levels required when called: 2
  1306 ;; This function calls:
  1307 ;;		Nothing
  1308 ;; This function is called by:
  1309 ;;		_main
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           	psect	text9
  1314   000496                     __ptext9:
  1315                           	callstack 0
  1316   000496                     _AddLeftBlinks:
  1317                           	callstack 28
  1318   000496                     
  1319                           ;user.c: 226:             PORTBbits.RB4 = 1;
  1320   000496  8881               	bsf	129,4,c	;volatile
  1321   000498                     
  1322                           ;user.c: 228:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1323   000498  0E02               	movlw	2
  1324   00049A  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1325   00049C  0E86               	movlw	134
  1326   00049E  6E02               	movwf	??_AddLeftBlinks^0,c
  1327   0004A0  0E99               	movlw	153
  1328   0004A2                     u507:
  1329   0004A2  2EE8               	decfsz	wreg,f,c
  1330   0004A4  D7FE               	bra	u507
  1331   0004A6  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1332   0004A8  D7FC               	bra	u507
  1333   0004AA  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1334   0004AC  D7FA               	bra	u507
  1335   0004AE  F000               	nop	
  1336   0004B0                     
  1337                           ;user.c: 229:             PORTBbits.RB4 = 0;
  1338   0004B0  9881               	bcf	129,4,c	;volatile
  1339                           
  1340                           ;user.c: 230:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1341   0004B2  0E03               	movlw	3
  1342   0004B4  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1343   0004B6  0E8A               	movlw	138
  1344   0004B8  6E02               	movwf	??_AddLeftBlinks^0,c
  1345   0004BA  0E56               	movlw	86
  1346   0004BC                     u517:
  1347   0004BC  2EE8               	decfsz	wreg,f,c
  1348   0004BE  D7FE               	bra	u517
  1349   0004C0  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1350   0004C2  D7FC               	bra	u517
  1351   0004C4  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1352   0004C6  D7FA               	bra	u517
  1353   0004C8                     
  1354                           ;user.c: 231:             PORTBbits.RB4 = 1;
  1355   0004C8  8881               	bsf	129,4,c	;volatile
  1356                           
  1357                           ;user.c: 233:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1358   0004CA  0E02               	movlw	2
  1359   0004CC  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1360   0004CE  0E86               	movlw	134
  1361   0004D0  6E02               	movwf	??_AddLeftBlinks^0,c
  1362   0004D2  0E99               	movlw	153
  1363   0004D4                     u527:
  1364   0004D4  2EE8               	decfsz	wreg,f,c
  1365   0004D6  D7FE               	bra	u527
  1366   0004D8  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1367   0004DA  D7FC               	bra	u527
  1368   0004DC  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1369   0004DE  D7FA               	bra	u527
  1370   0004E0  F000               	nop	
  1371   0004E2                     
  1372                           ;user.c: 234:             PORTBbits.RB4 = 0;
  1373   0004E2  9881               	bcf	129,4,c	;volatile
  1374                           
  1375                           ;user.c: 235:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1376   0004E4  0E03               	movlw	3
  1377   0004E6  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1378   0004E8  0E8A               	movlw	138
  1379   0004EA  6E02               	movwf	??_AddLeftBlinks^0,c
  1380   0004EC  0E56               	movlw	86
  1381   0004EE                     u537:
  1382   0004EE  2EE8               	decfsz	wreg,f,c
  1383   0004F0  D7FE               	bra	u537
  1384   0004F2  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1385   0004F4  D7FC               	bra	u537
  1386   0004F6  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1387   0004F8  D7FA               	bra	u537
  1388   0004FA                     
  1389                           ;user.c: 236:             PORTBbits.RB4 = 1;
  1390   0004FA  8881               	bsf	129,4,c	;volatile
  1391                           
  1392                           ;user.c: 238:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1393   0004FC  0E02               	movlw	2
  1394   0004FE  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1395   000500  0E86               	movlw	134
  1396   000502  6E02               	movwf	??_AddLeftBlinks^0,c
  1397   000504  0E99               	movlw	153
  1398   000506                     u547:
  1399   000506  2EE8               	decfsz	wreg,f,c
  1400   000508  D7FE               	bra	u547
  1401   00050A  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1402   00050C  D7FC               	bra	u547
  1403   00050E  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1404   000510  D7FA               	bra	u547
  1405   000512  F000               	nop	
  1406   000514                     
  1407                           ;user.c: 239:             PORTBbits.RB4 = 0;
  1408   000514  9881               	bcf	129,4,c	;volatile
  1409                           
  1410                           ;user.c: 240:             _delay((unsigned long)((100)*(4000000/4000.0)));
  1411   000516  0E82               	movlw	130
  1412   000518  6E02               	movwf	??_AddLeftBlinks^0,c
  1413   00051A  0EDE               	movlw	222
  1414   00051C                     u557:
  1415   00051C  2EE8               	decfsz	wreg,f,c
  1416   00051E  D7FE               	bra	u557
  1417   000520  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1418   000522  D7FC               	bra	u557
  1419   000524                     
  1420                           ;user.c: 241:             return wasTurningLeft = 0;;	Return value of _AddLeftBlinks is 
      +                          never used
  1421   000524  0E00               	movlw	0
  1422   000526  6E29               	movwf	_wasTurningLeft^0,c
  1423   000528  0012               	return		;funcret
  1424   00052A                     __end_of_AddLeftBlinks:
  1425                           	callstack 0
  1426                           
  1427 ;; *************** function _low_isr *****************
  1428 ;; Defined at:
  1429 ;;		line 67 in file "interrupts.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;		None
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;		None
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  1    wreg      void 
  1436 ;; Registers used:
  1437 ;;		None
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMRAM   BANK0
  1443 ;;      Params:         0       0
  1444 ;;      Locals:         0       0
  1445 ;;      Temps:          1       0
  1446 ;;      Totals:         1       0
  1447 ;;Total ram usage:        1 bytes
  1448 ;; Hardware stack levels used: 1
  1449 ;; Hardware stack levels required when called: 1
  1450 ;; This function calls:
  1451 ;;		Nothing
  1452 ;; This function is called by:
  1453 ;;		Interrupt level 1
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	intcodelo
  1458   000018                     __pintcodelo:
  1459                           	callstack 0
  1460   000018                     _low_isr:
  1461                           	callstack 25
  1462                           
  1463                           ;incstack = 0
  1464   000018  802B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  1465   00001A  CFE0 F001          	movff	bsr,??_low_isr
  1466   00001E  C001  FFE0         	movff	??_low_isr,bsr
  1467   000022  902B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1468   000024  0010               	retfie	
  1469   000026                     __end_of_low_isr:
  1470                           	callstack 0
  1471                           
  1472 ;; *************** function _high_isr *****************
  1473 ;; Defined at:
  1474 ;;		line 27 in file "interrupts.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;		None
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;		None
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		None
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0
  1488 ;;      Params:         0       0
  1489 ;;      Locals:         0       0
  1490 ;;      Temps:          0       0
  1491 ;;      Totals:         0       0
  1492 ;;Total ram usage:        0 bytes
  1493 ;; Hardware stack levels used: 1
  1494 ;; This function calls:
  1495 ;;		Nothing
  1496 ;; This function is called by:
  1497 ;;		Interrupt level 2
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	intcode
  1502   000008                     __pintcode:
  1503                           	callstack 0
  1504   000008                     _high_isr:
  1505                           	callstack 25
  1506                           
  1507                           ;incstack = 0
  1508   000008  822B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1509   00000A  EFD4  F002         	goto	int_func
  1510                           
  1511                           	psect	intcode_body
  1512   0005A8                     __pintcode_body:
  1513                           	callstack 25
  1514   0005A8                     int_func:
  1515                           	callstack 25
  1516   0005A8  922B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1517   0005AA  0011               	retfie		f
  1518   0005AC                     __end_of_high_isr:
  1519                           	callstack 0
  1520   000000                     
  1521                           	psect	rparam
  1522   000000                     
  1523                           	psect	temp
  1524   00002B                     btemp:
  1525                           	callstack 0
  1526   00002B                     	ds	1
  1527   000000                     int$flags	set	btemp
  1528   000000                     wtemp8	set	btemp+1
  1529   000000                     ttemp5	set	btemp+1
  1530   000000                     ttemp6	set	btemp+4
  1531   000000                     ttemp7	set	btemp+8
  1532                           
  1533                           	psect	idloc
  1534                           
  1535                           ;Config register IDLOC0 @ 0x200000
  1536                           ;	unspecified, using default values
  1537   200000                     	org	2097152
  1538   200000  FF                 	db	255
  1539                           
  1540                           ;Config register IDLOC1 @ 0x200001
  1541                           ;	unspecified, using default values
  1542   200001                     	org	2097153
  1543   200001  FF                 	db	255
  1544                           
  1545                           ;Config register IDLOC2 @ 0x200002
  1546                           ;	unspecified, using default values
  1547   200002                     	org	2097154
  1548   200002  FF                 	db	255
  1549                           
  1550                           ;Config register IDLOC3 @ 0x200003
  1551                           ;	unspecified, using default values
  1552   200003                     	org	2097155
  1553   200003  FF                 	db	255
  1554                           
  1555                           ;Config register IDLOC4 @ 0x200004
  1556                           ;	unspecified, using default values
  1557   200004                     	org	2097156
  1558   200004  FF                 	db	255
  1559                           
  1560                           ;Config register IDLOC5 @ 0x200005
  1561                           ;	unspecified, using default values
  1562   200005                     	org	2097157
  1563   200005  FF                 	db	255
  1564                           
  1565                           ;Config register IDLOC6 @ 0x200006
  1566                           ;	unspecified, using default values
  1567   200006                     	org	2097158
  1568   200006  FF                 	db	255
  1569                           
  1570                           ;Config register IDLOC7 @ 0x200007
  1571                           ;	unspecified, using default values
  1572   200007                     	org	2097159
  1573   200007  FF                 	db	255
  1574                           
  1575                           	psect	config
  1576                           
  1577                           ; Padding undefined space
  1578   300000                     	org	3145728
  1579   300000  FF                 	db	255
  1580                           
  1581                           ;Config register CONFIG1H @ 0x300001
  1582                           ;	Oscillator Selection bits
  1583                           ;	OSC = INTIO2, Internal RC oscillator, port function on RA6 and port function on RA7
  1584                           ;	Fail-Safe Clock Monitor Enable bit
  1585                           ;	FSCM = ON, Fail-Safe Clock Monitor enabled
  1586                           ;	Internal External Switchover bit
  1587                           ;	IESO = ON, Internal External Switchover mode enabled
  1588   300001                     	org	3145729
  1589   300001  C8                 	db	200
  1590                           
  1591                           ;Config register CONFIG2L @ 0x300002
  1592                           ;	Power-up Timer Enable bit
  1593                           ;	PWRT = OFF, PWRT disabled
  1594                           ;	Brown-out Reset Enable bit
  1595                           ;	BOR = ON, Brown-out Reset enabled
  1596                           ;	Brown-out Reset Voltage bits
  1597                           ;	BORV = 0x3, unprogrammed default
  1598   300002                     	org	3145730
  1599   300002  0F                 	db	15
  1600                           
  1601                           ;Config register CONFIG2H @ 0x300003
  1602                           ;	Watchdog Timer Enable bit
  1603                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1604                           ;	Watchdog Timer Postscale Select bits
  1605                           ;	WDTPS = 32768, 1:32768
  1606   300003                     	org	3145731
  1607   300003  1E                 	db	30
  1608                           
  1609                           ; Padding undefined space
  1610   300004                     	org	3145732
  1611   300004  FF                 	db	255
  1612                           
  1613                           ;Config register CONFIG3H @ 0x300005
  1614                           ;	MCLR Pin Enable bit
  1615                           ;	MCLRE = OFF, RA5 input pin enabled, MCLR disabled
  1616   300005                     	org	3145733
  1617   300005  00                 	db	0
  1618                           
  1619                           ;Config register CONFIG4L @ 0x300006
  1620                           ;	Stack Full/Underflow Reset Enable bit
  1621                           ;	STVR = ON, Stack full/underflow will cause Reset
  1622                           ;	Low-Voltage ICSP Enable bit
  1623                           ;	LVP = ON, Low-Voltage ICSP enabled
  1624                           ;	Background Debugger Enable bit
  1625                           ;	DEBUG = 0x1, unprogrammed default
  1626   300006                     	org	3145734
  1627   300006  85                 	db	133
  1628                           
  1629                           ; Padding undefined space
  1630   300007                     	org	3145735
  1631   300007  FF                 	db	255
  1632                           
  1633                           ;Config register CONFIG5L @ 0x300008
  1634                           ;	Code Protection bit
  1635                           ;	CP0 = OFF, Block 0 (00200-000FFFh) not code-protected
  1636                           ;	Code Protection bit
  1637                           ;	CP1 = OFF, Block 1 (001000-001FFFh) not code-protected
  1638   300008                     	org	3145736
  1639   300008  03                 	db	3
  1640                           
  1641                           ;Config register CONFIG5H @ 0x300009
  1642                           ;	Boot Block Code Protection bit
  1643                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  1644                           ;	Data EEPROM Code Protection bit
  1645                           ;	CPD = OFF, Data EEPROM not code-protected
  1646   300009                     	org	3145737
  1647   300009  C0                 	db	192
  1648                           
  1649                           ;Config register CONFIG6L @ 0x30000A
  1650                           ;	Write Protection bit
  1651                           ;	WRT0 = OFF, Block 0 (00200-000FFFh) not write-protected
  1652                           ;	Write Protection bit
  1653                           ;	WRT1 = OFF, Block 1 (001000-001FFFh) not write-protected
  1654   30000A                     	org	3145738
  1655   30000A  03                 	db	3
  1656                           
  1657                           ;Config register CONFIG6H @ 0x30000B
  1658                           ;	Configuration Register Write Protection bit
  1659                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1660                           ;	Boot Block Write Protection bit
  1661                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  1662                           ;	Data EEPROM Write Protection bit
  1663                           ;	WRTD = OFF, Data EEPROM not write-protected
  1664   30000B                     	org	3145739
  1665   30000B  E0                 	db	224
  1666                           
  1667                           ;Config register CONFIG7L @ 0x30000C
  1668                           ;	Table Read Protection bit
  1669                           ;	EBTR0 = OFF, Block 0 (00200-000FFFh) not protected from table reads executed in other 
      +                          blocks
  1670                           ;	Table Read Protection bit
  1671                           ;	EBTR1 = OFF, Block 1 (001000-001FFFh) not protected from table reads executed in other
      +                           blocks
  1672   30000C                     	org	3145740
  1673   30000C  03                 	db	3
  1674                           
  1675                           ;Config register CONFIG7H @ 0x30000D
  1676                           ;	Boot Block Table Read Protection bit
  1677                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  1678   30000D                     	org	3145741
  1679   30000D  40                 	db	64
  1680                           tosu	equ	0xFFF
  1681                           tosh	equ	0xFFE
  1682                           tosl	equ	0xFFD
  1683                           stkptr	equ	0xFFC
  1684                           pclatu	equ	0xFFB
  1685                           pclath	equ	0xFFA
  1686                           pcl	equ	0xFF9
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           prodh	equ	0xFF4
  1692                           prodl	equ	0xFF3
  1693                           indf0	equ	0xFEF
  1694                           postinc0	equ	0xFEE
  1695                           postdec0	equ	0xFED
  1696                           preinc0	equ	0xFEC
  1697                           plusw0	equ	0xFEB
  1698                           fsr0h	equ	0xFEA
  1699                           fsr0l	equ	0xFE9
  1700                           wreg	equ	0xFE8
  1701                           indf1	equ	0xFE7
  1702                           postinc1	equ	0xFE6
  1703                           postdec1	equ	0xFE5
  1704                           preinc1	equ	0xFE4
  1705                           plusw1	equ	0xFE3
  1706                           fsr1h	equ	0xFE2
  1707                           fsr1l	equ	0xFE1
  1708                           bsr	equ	0xFE0
  1709                           indf2	equ	0xFDF
  1710                           postinc2	equ	0xFDE
  1711                           postdec2	equ	0xFDD
  1712                           preinc2	equ	0xFDC
  1713                           plusw2	equ	0xFDB
  1714                           fsr2h	equ	0xFDA
  1715                           fsr2l	equ	0xFD9
  1716                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     32      42
    BANK0           128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Turn_49A
    _Turn_49A->_GetCurrentValue
    _GetDirection->_GetADCValue
    _GetCurrentValue->_GetADCValue
    _GetADCValue->___awdiv

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    1691
                                             28 COMRAM     4     4      0
                      _AddLeftBlinks
                     _AddRightBlinks
                        _GetADCValue
                            _InitApp
                           _ReversOn
                           _Turn_49A
 ---------------------------------------------------------------------------------
 (1) _Turn_49A                                             4     4      0    1115
                                             24 COMRAM     4     4      0
                    _GetCurrentValue
                       _GetDirection
 ---------------------------------------------------------------------------------
 (2) _GetDirection                                         0     0      0     522
                        _GetADCValue
 ---------------------------------------------------------------------------------
 (2) _GetCurrentValue                                      6     4      2     568
                                             18 COMRAM     6     4      2
                        _GetADCValue
 ---------------------------------------------------------------------------------
 (3) _GetADCValue                                          9     7      2     522
                                              9 COMRAM     9     7      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     452
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _ReversOn                                             2     2      0       0
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddRightBlinks                                       2     2      0       0
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _AddLeftBlinks                                        2     2      0       0
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddLeftBlinks
   _AddRightBlinks
   _GetADCValue
     ___awdiv
   _InitApp
   _ReversOn
   _Turn_49A
     _GetCurrentValue
       _GetADCValue
     _GetDirection
       _GetADCValue

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0      10        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     20      2A       1       33.3%
BITBIGSFRhh         3B      0       0       6        0.0%
BITBIGSFRlh         2C      0       0       7        0.0%
BITBIGSFRll         10      0       0       8        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A       9        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Jul 31 16:37:25 2022

                        l37 02BC                          l90 003C                          l86 05A6  
                        l99 014C                ___awdiv@sign 0007                          bsr 000FE0  
                       l100 00DA                         l103 010C                         l112 0360  
                       l123 0494                         l108 0552                         l126 0528  
                       l118 03CE                         l119 0400                         l129 057A  
                       l363 0210                         l925 0596                         l927 0554  
                       l971 0434                         l973 044E                         l965 0402  
                       l991 04E2                         l983 0496                         l975 0466  
                       l967 0404                         l993 04FA                         l985 0498  
                       l977 0480                         l969 041C                         l995 0514  
                       l987 04B0                         l979 0490                         l997 0524  
                       l989 04C8                         u200 01A0                         u201 019C  
                       u210 01BE                         u211 01BA                         u220 01DA  
                       u300 039A                         u221 01D6                         u301 0396  
                       u230 0200                         u310 0254                         u231 01FC  
                       u311 0250                         u240 00E8                         u320 0278  
                       u241 00E4                         u321 0274                         u250 011A  
                       u330 0290                         u251 0116                         u331 028C  
                       u180 0160                         u260 02F8                         u340 02A8  
                       u181 015C                         u261 02F4                         u341 02A4  
                       u190 017A                         u270 0314                         u191 0176  
                       u407 00D0                         u271 0310                         u280 0338  
                       u417 0100                         u281 0334                         u290 0354  
                       u507 04A2                         u427 055A                         u291 0350  
                       u517 04BC                         u437 056E                         u357 036A  
                       u527 04D4                         u447 040E                         u367 03A6  
                       u537 04EE                         u457 0428                         u377 03BC  
                       u547 0506                         u467 0440                         u387 03DA  
                       i2l5 05A8                         u557 051C                         u477 045A  
                       u397 03EE                         u487 0472                         u497 0488  
                       wreg 000FE8        __end_of_GetDirection 0362             ??_AddLeftBlinks 0002  
             _R_ch_in_value 0027                        l1101 005C                        l1103 0064  
                      l1111 0078                        l1121 010A                        l1105 006C  
                      l1113 00CA                        l1051 0160                        l1123 011A  
                      l1115 00D8                        l1211 0216                        l1203 0212  
                      l1061 0186                        l1053 0168                        l1125 012C  
                      l1117 00E8                        l1133 052A                        l1141 02DC  
                      l1221 022A                        l1213 0216                        l1205 0216  
                      l1071 01BE                        l1063 018E                        l1055 016C  
                      l1047 014E                        l1119 00FA                        l1135 0546  
                      l1143 02F8                        l1151 031C                        l1231 025C  
                      l1223 0238                        l1215 0218                        l1207 0216  
                      l1081 01EA                        l1073 01C4                        l1065 01A0  
                      l1057 017A                        l1049 0152                        l1153 0338  
                      l1161 035C                        l1145 0314                        l1241 02A8  
                      l1233 0278                        l1225 0254                        l1217 021A  
                      l1209 0216                        l1075 01DA                        l1067 01A8  
                      l1083 01F0                        l1059 0182                        l1091 002C  
                      l1155 0354                        l1139 02C0                        l1171 0372  
                      l1243 02B0                        l1235 0280                        l1219 021C  
                      l1085 0200                        l1077 01E2                        l1069 01B0  
                      l1093 0042                        l1181 03B0                        l1173 037E  
                      l1237 0290                        l1087 0208                        l1079 01E4  
                      l1095 0048                        l1191 03D0                        l1183 03B2  
                      l1175 039A                        l1167 0362                        l1239 0298  
                      l1249 008C                        l1097 004E                        l1193 03D4  
                      l1185 03CA                        l1177 039C                        l1169 0364  
                      l1099 0056                        l1195 03E2                        l1179 03A0  
                      l1197 03E4                        i1l10 001E                        _main 0212  
                      btemp 002B                 _GetADCValue 002A                        start 0026  
              ___param_bank 000000             __end_of_InitApp 05A8                       ?_main 0001  
           __end_of___awdiv 0212             ___awdiv@divisor 0004             ___awdiv@counter 0006  
                     _TRISA 000F92                       _TRISB 000F93             __end_of_low_isr 0026  
         ??_GetCurrentValue 0015                       ttemp5 002C                       ttemp6 002F  
                     ttemp7 0033                       status 000FD8                       wtemp8 002C  
           __initialization 057C                __end_of_main 02C0                      ??_main 001D  
         main@_49A_in_value 001D               __activetblptr 000002            __end_of_ReversOn 057C  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      _ADCON2 000FC0  
          __end_of_Turn_49A 0402                      _ADRESH 000FC4                      _ADRESL 000FC3  
          ___awdiv@dividend 0002                  _V_in_value 0023                   ??_InitApp 0002  
          __end_of_high_isr 05AC                   ??___awdiv 0006   GetCurrentValue@V_in_value 0015  
          ??_AddRightBlinks 0002                      clear_0 0582            ___awdiv@quotient 0008  
                    isa$std 000001                   ??_low_isr 0001                      tblptru 000FF8  
                __accesstop 0080     __end_of__initialization 0588               ___rparam_used 000001  
              _GetDirection 02C0              __pcstackCOMRAM 0001             _wasTurningRight 002A  
              ?_GetADCValue 000A                   ?_ReversOn 0001                   ?_Turn_49A 0001  
           _GetCurrentValue 052A       __end_of_AddLeftBlinks 052A                   ?_high_isr 0001  
                   _InitApp 0596                     __Hparam 0000                     __Lparam 0000  
                ??_ReversOn 0002                     ___awdiv 014E                  ??_Turn_49A 0019  
                   __pcinit 057C                     __ramtop 0100                     __ptext0 0212  
                   __ptext1 0362                     __ptext2 02C0                     __ptext3 052A  
                   __ptext4 002A                     __ptext5 014E                     __ptext6 0554  
                   __ptext7 0596                     __ptext8 0402                     __ptext9 0496  
               _V_out_value 0021                     _low_isr 0018                  ??_high_isr 0001  
            __pintcode_body 05A8        end_of_initialization 0588               __Lmediumconst 0000  
                   int_func 05A8       Turn_49A@Current_value 001B                     postinc0 000FEE  
   __end_of_GetCurrentValue 0554  GetCurrentValue@V_out_value 0017                   _PORTAbits 000F80  
                 _PORTBbits 000F81          GetADCValue@Channel 000E         start_initialization 057C  
          ?_GetCurrentValue 0013                 __pbssCOMRAM 0021               _L_ch_in_value 0025  
            _wasTurningLeft 0029                    ?_InitApp 0001                   __pintcode 0008  
                  ?___awdiv 0002                 __pintcodelo 0018                    ?_low_isr 0001  
                  _GO_nDONE 007E11                    __Hrparam 0000               ?_GetDirection 0001  
                  _ReversOn 0554                    __Lrparam 0000           GetADCValue@temp_1 000F  
         GetADCValue@temp_2 0011                    _Turn_49A 0362              _AddRightBlinks 0402  
                  _high_isr 0008               _AddLeftBlinks 0496               ??_GetADCValue 000C  
            ??_GetDirection 0013                    isa$xinst 000000        main@Reverse_in_value 001F  
                  int$flags 002B      __end_of_AddRightBlinks 0496              ?_AddLeftBlinks 0001  
                  intlevel1 0000                    intlevel2 0000         __end_of_GetADCValue 014E  
           ?_AddRightBlinks 0001  
