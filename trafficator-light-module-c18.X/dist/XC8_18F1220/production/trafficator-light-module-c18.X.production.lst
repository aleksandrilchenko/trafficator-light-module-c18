

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Jul 25 23:33:19 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F1320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Version 2.40
    28                           ; Generated 17/11/2021 GMT
    29                           ; 
    30                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F1320 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62   000000                     _ADRESL	set	4035
    63   000000                     _ADRESH	set	4036
    64   000000                     _ADCON0	set	4034
    65   000000                     _GO_nDONE	set	32273
    66   000000                     _ADCON2	set	4032
    67   000000                     _ADCON1	set	4033
    68   000000                     _PORTBbits	set	3969
    69   000000                     _PORTAbits	set	3968
    70                           
    71                           ; #config settings
    72                           
    73                           	psect	cinit
    74   000578                     __pcinit:
    75                           	callstack 0
    76   000578                     start_initialization:
    77                           	callstack 0
    78   000578                     __initialization:
    79                           	callstack 0
    80                           
    81                           ; Clear objects allocated to COMRAM (10 bytes)
    82   000578  EE00  F025         	lfsr	0,__pbssCOMRAM
    83   00057C  0E0A               	movlw	10
    84   00057E                     clear_0:
    85   00057E  6AEE               	clrf	postinc0,c
    86   000580  06E8               	decf	wreg,f,c
    87   000582  E1FD               	bnz	clear_0
    88   000584                     end_of_initialization:
    89                           	callstack 0
    90   000584                     __end_of__initialization:
    91                           	callstack 0
    92   000584  902F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    93   000586  922F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    94   000588  0E00               	movlw	low (__Lmediumconst shr (0+16))
    95   00058A  6EF8               	movwf	tblptru,c
    96   00058C  0100               	movlb	0
    97   00058E  EF90  F000         	goto	_main	;jump to C main() function
    98                           
    99                           	psect	bssCOMRAM
   100   000025                     __pbssCOMRAM:
   101                           	callstack 0
   102   000025                     _V_out_value:
   103                           	callstack 0
   104   000025                     	ds	2
   105   000027                     _V_in_value:
   106                           	callstack 0
   107   000027                     	ds	2
   108   000029                     _L_ch_in_value:
   109                           	callstack 0
   110   000029                     	ds	2
   111   00002B                     _R_ch_in_value:
   112                           	callstack 0
   113   00002B                     	ds	2
   114   00002D                     _wasTurningLeft:
   115                           	callstack 0
   116   00002D                     	ds	1
   117   00002E                     _wasTurningRight:
   118                           	callstack 0
   119   00002E                     	ds	1
   120                           
   121                           	psect	cstackCOMRAM
   122   000001                     __pcstackCOMRAM:
   123                           	callstack 0
   124   000001                     ??_low_isr:
   125   000001                     
   126                           ; 1 bytes @ 0x0
   127   000001                     	ds	1
   128   000002                     ??_ReversOn:
   129   000002                     ??_AddRightBlinks:
   130   000002                     ??_AddLeftBlinks:
   131   000002                     ?___awdiv:
   132                           	callstack 0
   133   000002                     InitADC@Channel:
   134                           	callstack 0
   135   000002                     ___awdiv@dividend:
   136                           	callstack 0
   137                           
   138                           ; 2 bytes @ 0x1
   139   000002                     	ds	2
   140   000004                     ___awdiv@divisor:
   141                           	callstack 0
   142                           
   143                           ; 2 bytes @ 0x3
   144   000004                     	ds	2
   145   000006                     ___awdiv@counter:
   146                           	callstack 0
   147                           
   148                           ; 1 bytes @ 0x5
   149   000006                     	ds	1
   150   000007                     ___awdiv@sign:
   151                           	callstack 0
   152                           
   153                           ; 1 bytes @ 0x6
   154   000007                     	ds	1
   155   000008                     ___awdiv@quotient:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x7
   159   000008                     	ds	2
   160   00000A                     ?_GetADCValue:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x9
   164   00000A                     	ds	2
   165   00000C                     ??_GetADCValue:
   166                           
   167                           ; 1 bytes @ 0xB
   168   00000C                     	ds	2
   169   00000E                     GetADCValue@Channel:
   170                           	callstack 0
   171                           
   172                           ; 1 bytes @ 0xD
   173   00000E                     	ds	1
   174   00000F                     GetADCValue@temp_1:
   175                           	callstack 0
   176                           
   177                           ; 2 bytes @ 0xE
   178   00000F                     	ds	2
   179   000011                     GetADCValue@temp_2:
   180                           	callstack 0
   181                           
   182                           ; 2 bytes @ 0x10
   183   000011                     	ds	2
   184   000013                     ?_GetCurrentValue:
   185                           	callstack 0
   186                           
   187                           ; 2 bytes @ 0x12
   188   000013                     	ds	2
   189   000015                     GetCurrentValue@V_in_value:
   190                           	callstack 0
   191                           
   192                           ; 2 bytes @ 0x14
   193   000015                     	ds	2
   194   000017                     GetCurrentValue@V_out_value:
   195                           	callstack 0
   196                           
   197                           ; 2 bytes @ 0x16
   198   000017                     	ds	2
   199   000019                     ??_Turn_49A:
   200                           
   201                           ; 1 bytes @ 0x18
   202   000019                     	ds	2
   203   00001B                     Turn_49A@Current_value:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0x1A
   207   00001B                     	ds	2
   208   00001D                     main@R_ch_in_value:
   209                           	callstack 0
   210                           
   211                           ; 2 bytes @ 0x1C
   212   00001D                     	ds	2
   213   00001F                     main@L_ch_in_value:
   214                           	callstack 0
   215                           
   216                           ; 2 bytes @ 0x1E
   217   00001F                     	ds	2
   218   000021                     main@_49A_in_value:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0x20
   222   000021                     	ds	2
   223   000023                     main@Reverse_in_value:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0x22
   227   000023                     	ds	2
   228                           
   229 ;;
   230 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   231 ;;
   232 ;; *************** function _main *****************
   233 ;; Defined at:
   234 ;;		line 85 in file "main.c"
   235 ;; Parameters:    Size  Location     Type
   236 ;;		None
   237 ;; Auto vars:     Size  Location     Type
   238 ;;  Reverse_in_v    2   34[COMRAM] int 
   239 ;;  _49A_in_valu    2   32[COMRAM] int 
   240 ;;  L_ch_in_valu    2   30[COMRAM] int 
   241 ;;  R_ch_in_valu    2   28[COMRAM] int 
   242 ;; Return value:  Size  Location     Type
   243 ;;                  1    wreg      void 
   244 ;; Registers used:
   245 ;;		wreg, status,2, status,0, cstack
   246 ;; Tracked objects:
   247 ;;		On entry : 0/0
   248 ;;		On exit  : 0/0
   249 ;;		Unchanged: 0/0
   250 ;; Data sizes:     COMRAM   BANK0
   251 ;;      Params:         0       0
   252 ;;      Locals:         8       0
   253 ;;      Temps:          0       0
   254 ;;      Totals:         8       0
   255 ;;Total ram usage:        8 bytes
   256 ;; Hardware stack levels required when called: 6
   257 ;; This function calls:
   258 ;;		_AddLeftBlinks
   259 ;;		_AddRightBlinks
   260 ;;		_GetADCValue
   261 ;;		_InitADC
   262 ;;		_ReversOn
   263 ;;		_Turn_49A
   264 ;; This function is called by:
   265 ;;		Startup code after reset
   266 ;; This function uses a non-reentrant model
   267 ;;
   268                           
   269                           	psect	text0
   270   000120                     __ptext0:
   271                           	callstack 0
   272   000120                     _main:
   273                           	callstack 25
   274   000120                     
   275                           ;main.c: 88:     int Reverse_in_value = 0;
   276   000120  0E00               	movlw	0
   277   000122  6E24               	movwf	(main@Reverse_in_value+1)^0,c
   278   000124  0E00               	movlw	0
   279   000126  6E23               	movwf	main@Reverse_in_value^0,c
   280                           
   281                           ;main.c: 89:     int R_ch_in_value = 0;
   282   000128  0E00               	movlw	0
   283   00012A  6E1E               	movwf	(main@R_ch_in_value+1)^0,c
   284   00012C  0E00               	movlw	0
   285   00012E  6E1D               	movwf	main@R_ch_in_value^0,c
   286                           
   287                           ;main.c: 90:     int L_ch_in_value = 0;
   288   000130  0E00               	movlw	0
   289   000132  6E20               	movwf	(main@L_ch_in_value+1)^0,c
   290   000134  0E00               	movlw	0
   291   000136  6E1F               	movwf	main@L_ch_in_value^0,c
   292   000138                     l1191:
   293                           
   294                           ;main.c: 96:     {;main.c: 99:     PORTAbits.RA4 = 0;
   295   000138  9880               	bcf	128,4,c	;volatile
   296   00013A                     
   297                           ;main.c: 100:     PORTBbits.RB4 = 0;
   298   00013A  9881               	bcf	129,4,c	;volatile
   299   00013C                     
   300                           ;main.c: 101:     PORTAbits.RA6 = 0;
   301   00013C  9C80               	bcf	128,6,c	;volatile
   302   00013E                     
   303                           ;main.c: 103:     InitADC(4<<3|5<<3);
   304   00013E  0E28               	movlw	40
   305   000140  ECC9  F002         	call	_InitADC
   306   000144                     
   307                           ;main.c: 104:     _49A_in_value = GetADCValue(4<<3);
   308   000144  0E20               	movlw	32
   309   000146  EC15  F000         	call	_GetADCValue
   310   00014A  C00A  F021         	movff	?_GetADCValue,main@_49A_in_value
   311   00014E  C00B  F022         	movff	?_GetADCValue+1,main@_49A_in_value+1
   312   000152                     
   313                           ;main.c: 107:     Reverse_in_value = GetADCValue(5<<3);
   314   000152  0E28               	movlw	40
   315   000154  EC15  F000         	call	_GetADCValue
   316   000158  C00A  F023         	movff	?_GetADCValue,main@Reverse_in_value
   317   00015C  C00B  F024         	movff	?_GetADCValue+1,main@Reverse_in_value+1
   318   000160                     
   319                           ;main.c: 110:     if (Reverse_in_value > 155)
   320   000160  BE24               	btfsc	(main@Reverse_in_value+1)^0,7,c
   321   000162  EFBC  F000         	goto	u311
   322   000166  5024               	movf	(main@Reverse_in_value+1)^0,w,c
   323   000168  E109               	bnz	u310
   324   00016A  0E9C               	movlw	156
   325   00016C  5C23               	subwf	main@Reverse_in_value^0,w,c
   326   00016E  A0D8               	btfss	status,0,c
   327   000170  EFBC  F000         	goto	u311
   328   000174  EFBE  F000         	goto	u310
   329   000178                     u311:
   330   000178  EFC2  F000         	goto	l1211
   331   00017C                     u310:
   332   00017C                     
   333                           ;main.c: 111:     {;main.c: 112:      ReversOn();
   334   00017C  ECA8  F002         	call	_ReversOn	;wreg free
   335   000180  EFF2  F000         	goto	l37
   336   000184                     l1211:
   337                           
   338                           ;main.c: 118:           if (_49A_in_value < 10)
   339   000184  BE22               	btfsc	(main@_49A_in_value+1)^0,7,c
   340   000186  EFD0  F000         	goto	u320
   341   00018A  5022               	movf	(main@_49A_in_value+1)^0,w,c
   342   00018C  E107               	bnz	u321
   343   00018E  0E0A               	movlw	10
   344   000190  5C21               	subwf	main@_49A_in_value^0,w,c
   345   000192  B0D8               	btfsc	status,0,c
   346   000194  EFCE  F000         	goto	u321
   347   000198  EFD0  F000         	goto	u320
   348   00019C                     u321:
   349   00019C  EFD4  F000         	goto	l1215
   350   0001A0                     u320:
   351   0001A0                     
   352                           ;main.c: 119:             {;main.c: 120:             Turn_49A();
   353   0001A0  ECAC  F001         	call	_Turn_49A	;wreg free
   354                           
   355                           ;main.c: 121:             }
   356   0001A4  EF9C  F000         	goto	l1191
   357   0001A8                     l1215:
   358   0001A8  042E               	decf	_wasTurningRight^0,w,c
   359   0001AA  A4D8               	btfss	status,2,c
   360   0001AC  EFDA  F000         	goto	u331
   361   0001B0  EFDC  F000         	goto	u330
   362   0001B4                     u331:
   363   0001B4  EFE0  F000         	goto	l1219
   364   0001B8                     u330:
   365   0001B8                     
   366                           ;main.c: 123:             {;main.c: 124:             AddRightBlinks();
   367   0001B8  ECFC  F001         	call	_AddRightBlinks	;wreg free
   368                           
   369                           ;main.c: 125:             }
   370   0001BC  EF9C  F000         	goto	l1191
   371   0001C0                     l1219:
   372   0001C0  042D               	decf	_wasTurningLeft^0,w,c
   373   0001C2  A4D8               	btfss	status,2,c
   374   0001C4  EFE6  F000         	goto	u341
   375   0001C8  EFE8  F000         	goto	u340
   376   0001CC                     u341:
   377   0001CC  EFEC  F000         	goto	l1223
   378   0001D0                     u340:
   379   0001D0                     
   380                           ;main.c: 127:             {;main.c: 128:             AddLeftBlinks();
   381   0001D0  EC46  F002         	call	_AddLeftBlinks	;wreg free
   382                           
   383                           ;main.c: 129:             }
   384   0001D4  EF9C  F000         	goto	l1191
   385   0001D8                     l1223:
   386                           
   387                           ;main.c: 138:             wasTurningLeft = 0;
   388   0001D8  0E00               	movlw	0
   389   0001DA  6E2D               	movwf	_wasTurningLeft^0,c
   390                           
   391                           ;main.c: 139:             wasTurningRight = 0;
   392   0001DC  0E00               	movlw	0
   393   0001DE  6E2E               	movwf	_wasTurningRight^0,c
   394   0001E0  EF9C  F000         	goto	l1191
   395   0001E4                     l37:
   396   0001E4  EF13  F000         	goto	start
   397   0001E8                     __end_of_main:
   398                           	callstack 0
   399                           
   400 ;; *************** function _Turn_49A *****************
   401 ;; Defined at:
   402 ;;		line 188 in file "user.c"
   403 ;; Parameters:    Size  Location     Type
   404 ;;		None
   405 ;; Auto vars:     Size  Location     Type
   406 ;;  Current_valu    2   26[COMRAM] int 
   407 ;; Return value:  Size  Location     Type
   408 ;;                  1    wreg      _Bool 
   409 ;; Registers used:
   410 ;;		wreg, status,2, status,0, cstack
   411 ;; Tracked objects:
   412 ;;		On entry : 0/0
   413 ;;		On exit  : 0/0
   414 ;;		Unchanged: 0/0
   415 ;; Data sizes:     COMRAM   BANK0
   416 ;;      Params:         0       0
   417 ;;      Locals:         2       0
   418 ;;      Temps:          2       0
   419 ;;      Totals:         4       0
   420 ;;Total ram usage:        4 bytes
   421 ;; Hardware stack levels used: 1
   422 ;; Hardware stack levels required when called: 5
   423 ;; This function calls:
   424 ;;		_GetCurrentValue
   425 ;;		_GetDirection
   426 ;; This function is called by:
   427 ;;		_main
   428 ;; This function uses a non-reentrant model
   429 ;;
   430                           
   431                           	psect	text1
   432   000358                     __ptext1:
   433                           	callstack 0
   434   000358                     _Turn_49A:
   435                           	callstack 25
   436   000358                     
   437                           ;user.c: 191:         PORTAbits.RA6 = 1;
   438   000358  8C80               	bsf	128,6,c	;volatile
   439   00035A                     
   440                           ;user.c: 192:         _delay((unsigned long)((100)*(4000000/4000.0)));
   441   00035A  0E82               	movlw	130
   442   00035C  6E19               	movwf	??_Turn_49A^0,c
   443   00035E  0EDE               	movlw	222
   444   000360                     u357:
   445   000360  2EE8               	decfsz	wreg,f,c
   446   000362  D7FE               	bra	u357
   447   000364  2E19               	decfsz	??_Turn_49A^0,f,c
   448   000366  D7FC               	bra	u357
   449   000368                     
   450                           ;user.c: 194:         int Current_value = GetCurrentValue();
   451   000368  EC90  F002         	call	_GetCurrentValue	;wreg free
   452   00036C  C013  F01B         	movff	?_GetCurrentValue,Turn_49A@Current_value
   453   000370  C014  F01C         	movff	?_GetCurrentValue+1,Turn_49A@Current_value+1
   454   000374                     
   455                           ;user.c: 196:         if (Current_value < 5)
   456   000374  BE1C               	btfsc	(Turn_49A@Current_value+1)^0,7,c
   457   000376  EFC8  F001         	goto	u300
   458   00037A  501C               	movf	(Turn_49A@Current_value+1)^0,w,c
   459   00037C  E107               	bnz	u301
   460   00037E  0E05               	movlw	5
   461   000380  5C1B               	subwf	Turn_49A@Current_value^0,w,c
   462   000382  B0D8               	btfsc	status,0,c
   463   000384  EFC6  F001         	goto	u301
   464   000388  EFC8  F001         	goto	u300
   465   00038C                     u301:
   466   00038C  EFE2  F001         	goto	l114
   467   000390                     u300:
   468   000390                     
   469                           ;user.c: 197:                 {;user.c: 198:                 PORTAbits.RA6 = 1;
   470   000390  8C80               	bsf	128,6,c	;volatile
   471   000392                     
   472                           ;user.c: 200:                 GetDirection();
   473   000392  EC56  F001         	call	_GetDirection	;wreg free
   474   000396                     
   475                           ;user.c: 201:                 _delay((unsigned long)((50)*(4000000/4000.0)));
   476   000396  0E41               	movlw	65
   477   000398  6E19               	movwf	??_Turn_49A^0,c
   478   00039A  0EEE               	movlw	238
   479   00039C                     u367:
   480   00039C  2EE8               	decfsz	wreg,f,c
   481   00039E  D7FE               	bra	u367
   482   0003A0  2E19               	decfsz	??_Turn_49A^0,f,c
   483   0003A2  D7FC               	bra	u367
   484   0003A4  D000               	nop2	
   485   0003A6                     
   486                           ;user.c: 202:                 PORTAbits.RA6 = 0;
   487   0003A6  9C80               	bcf	128,6,c	;volatile
   488   0003A8                     
   489                           ;user.c: 203:                 _delay((unsigned long)((200)*(4000000/4000.0)));
   490   0003A8  0E02               	movlw	2
   491   0003AA  6E1A               	movwf	(??_Turn_49A+1)^0,c
   492   0003AC  0E04               	movlw	4
   493   0003AE  6E19               	movwf	??_Turn_49A^0,c
   494   0003B0  0EBA               	movlw	186
   495   0003B2                     u377:
   496   0003B2  2EE8               	decfsz	wreg,f,c
   497   0003B4  D7FE               	bra	u377
   498   0003B6  2E19               	decfsz	??_Turn_49A^0,f,c
   499   0003B8  D7FC               	bra	u377
   500   0003BA  2E1A               	decfsz	(??_Turn_49A+1)^0,f,c
   501   0003BC  D7FA               	bra	u377
   502   0003BE  D000               	nop2	
   503   0003C0                     l1171:
   504   0003C0  EFFB  F001         	goto	l115
   505   0003C4                     l114:
   506                           
   507                           ;user.c: 209:                 {;user.c: 210:                 PORTAbits.RA6 = 1;
   508   0003C4  8C80               	bsf	128,6,c	;volatile
   509   0003C6                     
   510                           ;user.c: 212:                 GetDirection();
   511   0003C6  EC56  F001         	call	_GetDirection	;wreg free
   512   0003CA                     
   513                           ;user.c: 213:                 _delay((unsigned long)((100)*(4000000/4000.0)));
   514   0003CA  0E82               	movlw	130
   515   0003CC  6E19               	movwf	??_Turn_49A^0,c
   516   0003CE  0EDE               	movlw	222
   517   0003D0                     u387:
   518   0003D0  2EE8               	decfsz	wreg,f,c
   519   0003D2  D7FE               	bra	u387
   520   0003D4  2E19               	decfsz	??_Turn_49A^0,f,c
   521   0003D6  D7FC               	bra	u387
   522   0003D8                     
   523                           ;user.c: 214:                 PORTAbits.RA6 = 0;
   524   0003D8  9C80               	bcf	128,6,c	;volatile
   525   0003DA                     
   526                           ;user.c: 215:                 _delay((unsigned long)((400)*(4000000/4000.0)));
   527   0003DA  0E03               	movlw	3
   528   0003DC  6E1A               	movwf	(??_Turn_49A+1)^0,c
   529   0003DE  0E08               	movlw	8
   530   0003E0  6E19               	movwf	??_Turn_49A^0,c
   531   0003E2  0E77               	movlw	119
   532   0003E4                     u397:
   533   0003E4  2EE8               	decfsz	wreg,f,c
   534   0003E6  D7FE               	bra	u397
   535   0003E8  2E19               	decfsz	??_Turn_49A^0,f,c
   536   0003EA  D7FC               	bra	u397
   537   0003EC  2E1A               	decfsz	(??_Turn_49A+1)^0,f,c
   538   0003EE  D7FA               	bra	u397
   539   0003F0  F000               	nop	
   540   0003F2  EFE0  F001         	goto	l1171
   541   0003F6                     l115:
   542   0003F6  0012               	return		;funcret
   543   0003F8                     __end_of_Turn_49A:
   544                           	callstack 0
   545                           
   546 ;; *************** function _GetDirection *****************
   547 ;; Defined at:
   548 ;;		line 169 in file "user.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;		None
   551 ;; Auto vars:     Size  Location     Type
   552 ;;		None
   553 ;; Return value:  Size  Location     Type
   554 ;;                  1    wreg      _Bool 
   555 ;; Registers used:
   556 ;;		wreg, status,2, status,0, cstack
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMRAM   BANK0
   562 ;;      Params:         0       0
   563 ;;      Locals:         0       0
   564 ;;      Temps:          0       0
   565 ;;      Totals:         0       0
   566 ;;Total ram usage:        0 bytes
   567 ;; Hardware stack levels used: 1
   568 ;; Hardware stack levels required when called: 4
   569 ;; This function calls:
   570 ;;		_GetADCValue
   571 ;;		_InitADC
   572 ;; This function is called by:
   573 ;;		_Turn_49A
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           	psect	text2
   578   0002AC                     __ptext2:
   579                           	callstack 0
   580   0002AC                     _GetDirection:
   581                           	callstack 25
   582   0002AC                     
   583                           ;user.c: 171:     InitADC(1<<2|3<<3);
   584   0002AC  0E1C               	movlw	28
   585   0002AE  ECC9  F002         	call	_InitADC
   586                           
   587                           ;user.c: 172:     R_ch_in_value = GetADCValue(1<<2);
   588   0002B2  0E04               	movlw	4
   589   0002B4  EC15  F000         	call	_GetADCValue
   590   0002B8  C00A  F02B         	movff	?_GetADCValue,_R_ch_in_value
   591   0002BC  C00B  F02C         	movff	?_GetADCValue+1,_R_ch_in_value+1
   592                           
   593                           ;user.c: 173:     L_ch_in_value = GetADCValue(3<<3);
   594   0002C0  0E18               	movlw	24
   595   0002C2  EC15  F000         	call	_GetADCValue
   596   0002C6  C00A  F029         	movff	?_GetADCValue,_L_ch_in_value
   597   0002CA  C00B  F02A         	movff	?_GetADCValue+1,_L_ch_in_value+1
   598   0002CE                     
   599                           ;user.c: 175:     if (R_ch_in_value > 10 && R_ch_in_value < 10)
   600   0002CE  BE2C               	btfsc	(_R_ch_in_value+1)^0,7,c
   601   0002D0  EF73  F001         	goto	u261
   602   0002D4  502C               	movf	(_R_ch_in_value+1)^0,w,c
   603   0002D6  E109               	bnz	u260
   604   0002D8  0E0B               	movlw	11
   605   0002DA  5C2B               	subwf	_R_ch_in_value^0,w,c
   606   0002DC  A0D8               	btfss	status,0,c
   607   0002DE  EF73  F001         	goto	u261
   608   0002E2  EF75  F001         	goto	u260
   609   0002E6                     u261:
   610   0002E6  EF87  F001         	goto	l1139
   611   0002EA                     u260:
   612   0002EA  BE2C               	btfsc	(_R_ch_in_value+1)^0,7,c
   613   0002EC  EF83  F001         	goto	u270
   614   0002F0  502C               	movf	(_R_ch_in_value+1)^0,w,c
   615   0002F2  E107               	bnz	u271
   616   0002F4  0E0A               	movlw	10
   617   0002F6  5C2B               	subwf	_R_ch_in_value^0,w,c
   618   0002F8  B0D8               	btfsc	status,0,c
   619   0002FA  EF81  F001         	goto	u271
   620   0002FE  EF83  F001         	goto	u270
   621   000302                     u271:
   622   000302  EF87  F001         	goto	l1139
   623   000306                     u270:
   624   000306                     
   625                           ;user.c: 176:         {return wasTurningRight = 1;};	Return value of _GetDirection is ne
      +                          ver used
   626   000306  0E01               	movlw	1
   627   000308  6E2E               	movwf	_wasTurningRight^0,c
   628   00030A  EFAB  F001         	goto	l108
   629   00030E                     l1139:
   630   00030E  BE2C               	btfsc	(_R_ch_in_value+1)^0,7,c
   631   000310  EF95  F001         	goto	u280
   632   000314  502C               	movf	(_R_ch_in_value+1)^0,w,c
   633   000316  E107               	bnz	u281
   634   000318  0E0A               	movlw	10
   635   00031A  5C2B               	subwf	_R_ch_in_value^0,w,c
   636   00031C  B0D8               	btfsc	status,0,c
   637   00031E  EF93  F001         	goto	u281
   638   000322  EF95  F001         	goto	u280
   639   000326                     u281:
   640   000326  EFA7  F001         	goto	l1149
   641   00032A                     u280:
   642   00032A  BE2C               	btfsc	(_R_ch_in_value+1)^0,7,c
   643   00032C  EFA1  F001         	goto	u291
   644   000330  502C               	movf	(_R_ch_in_value+1)^0,w,c
   645   000332  E109               	bnz	u290
   646   000334  0E0B               	movlw	11
   647   000336  5C2B               	subwf	_R_ch_in_value^0,w,c
   648   000338  A0D8               	btfss	status,0,c
   649   00033A  EFA1  F001         	goto	u291
   650   00033E  EFA3  F001         	goto	u290
   651   000342                     u291:
   652   000342  EFA7  F001         	goto	l1149
   653   000346                     u290:
   654   000346                     
   655                           ;user.c: 178:         {return wasTurningLeft = 1;};	Return value of _GetDirection is nev
      +                          er used
   656   000346  0E01               	movlw	1
   657   000348  6E2D               	movwf	_wasTurningLeft^0,c
   658   00034A  EFAB  F001         	goto	l108
   659   00034E                     l1149:
   660                           
   661                           ;user.c: 180:     {wasTurningRight = 0;
   662   00034E  0E00               	movlw	0
   663   000350  6E2E               	movwf	_wasTurningRight^0,c
   664                           
   665                           ;user.c: 181:     wasTurningLeft = 0;
   666   000352  0E00               	movlw	0
   667   000354  6E2D               	movwf	_wasTurningLeft^0,c
   668   000356                     l108:
   669   000356  0012               	return		;funcret
   670   000358                     __end_of_GetDirection:
   671                           	callstack 0
   672                           
   673 ;; *************** function _GetCurrentValue *****************
   674 ;; Defined at:
   675 ;;		line 159 in file "user.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;  V_out_value     2   22[COMRAM] int 
   680 ;;  V_in_value      2   20[COMRAM] int 
   681 ;; Return value:  Size  Location     Type
   682 ;;                  2   18[COMRAM] int 
   683 ;; Registers used:
   684 ;;		wreg, status,2, status,0, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMRAM   BANK0
   690 ;;      Params:         2       0
   691 ;;      Locals:         4       0
   692 ;;      Temps:          0       0
   693 ;;      Totals:         6       0
   694 ;;Total ram usage:        6 bytes
   695 ;; Hardware stack levels used: 1
   696 ;; Hardware stack levels required when called: 4
   697 ;; This function calls:
   698 ;;		_GetADCValue
   699 ;;		_InitADC
   700 ;; This function is called by:
   701 ;;		_Turn_49A
   702 ;; This function uses a non-reentrant model
   703 ;;
   704                           
   705                           	psect	text3
   706   000520                     __ptext3:
   707                           	callstack 0
   708   000520                     _GetCurrentValue:
   709                           	callstack 25
   710   000520                     
   711                           ;user.c: 161:     InitADC(1<<0|1<<1);
   712   000520  0E03               	movlw	3
   713   000522  ECC9  F002         	call	_InitADC
   714                           
   715                           ;user.c: 162:     int V_in_value = GetADCValue(1<<0);
   716   000526  0E01               	movlw	1
   717   000528  EC15  F000         	call	_GetADCValue
   718   00052C  C00A  F015         	movff	?_GetADCValue,GetCurrentValue@V_in_value
   719   000530  C00B  F016         	movff	?_GetADCValue+1,GetCurrentValue@V_in_value+1
   720                           
   721                           ;user.c: 163:     int V_out_value = GetADCValue(1<<1);
   722   000534  0E02               	movlw	2
   723   000536  EC15  F000         	call	_GetADCValue
   724   00053A  C00A  F017         	movff	?_GetADCValue,GetCurrentValue@V_out_value
   725   00053E  C00B  F018         	movff	?_GetADCValue+1,GetCurrentValue@V_out_value+1
   726   000542                     
   727                           ;user.c: 164:     return (V_in_value - V_out_value);
   728   000542  5017               	movf	GetCurrentValue@V_out_value^0,w,c
   729   000544  5C15               	subwf	GetCurrentValue@V_in_value^0,w,c
   730   000546  6E13               	movwf	?_GetCurrentValue^0,c
   731   000548  5018               	movf	(GetCurrentValue@V_out_value+1)^0,w,c
   732   00054A  5816               	subwfb	(GetCurrentValue@V_in_value+1)^0,w,c
   733   00054C  6E14               	movwf	(?_GetCurrentValue+1)^0,c
   734   00054E  0012               	return		;funcret
   735   000550                     __end_of_GetCurrentValue:
   736                           	callstack 0
   737                           
   738 ;; *************** function _InitADC *****************
   739 ;; Defined at:
   740 ;;		line 53 in file "user.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;  Channel         1    wreg     unsigned char 
   743 ;; Auto vars:     Size  Location     Type
   744 ;;  Channel         1    1[COMRAM] unsigned char 
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, status,2, status,0
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0
   754 ;;      Params:         0       0
   755 ;;      Locals:         1       0
   756 ;;      Temps:          0       0
   757 ;;      Totals:         1       0
   758 ;;Total ram usage:        1 bytes
   759 ;; Hardware stack levels used: 1
   760 ;; Hardware stack levels required when called: 2
   761 ;; This function calls:
   762 ;;		Nothing
   763 ;; This function is called by:
   764 ;;		_main
   765 ;;		_GetCurrentValue
   766 ;;		_GetDirection
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text4
   771   000592                     __ptext4:
   772                           	callstack 0
   773   000592                     _InitADC:
   774                           	callstack 26
   775                           
   776                           ;incstack = 0
   777                           ;InitADC@Channel stored from wreg
   778   000592  6E02               	movwf	InitADC@Channel^0,c
   779   000594                     
   780                           ;user.c: 53: void InitADC(unsigned char Channel);user.c: 54: {;user.c: 57:     ADCON1 = 
      +                          0b00000000;
   781   000594  0E00               	movlw	0
   782   000596  6EC1               	movwf	193,c	;volatile
   783                           
   784                           ;user.c: 61:     ADCON0 = 0b00000000;
   785   000598  0E00               	movlw	0
   786   00059A  6EC2               	movwf	194,c	;volatile
   787   00059C                     
   788                           ;user.c: 62:     ADCON0 |= Channel;
   789   00059C  5002               	movf	InitADC@Channel^0,w,c	;volatile
   790   00059E  12C2               	iorwf	194,f,c	;volatile
   791   0005A0                     
   792                           ;user.c: 79:     ADCON2 = 0b00000111;
   793   0005A0  0E07               	movlw	7
   794   0005A2  6EC0               	movwf	192,c	;volatile
   795   0005A4  0012               	return		;funcret
   796   0005A6                     __end_of_InitADC:
   797                           	callstack 0
   798                           
   799 ;; *************** function _GetADCValue *****************
   800 ;; Defined at:
   801 ;;		line 123 in file "user.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;  Channel         1    wreg     unsigned char 
   804 ;; Auto vars:     Size  Location     Type
   805 ;;  Channel         1   13[COMRAM] unsigned char 
   806 ;;  temp_2          2   16[COMRAM] int 
   807 ;;  temp_1          2   14[COMRAM] int 
   808 ;; Return value:  Size  Location     Type
   809 ;;                  2    9[COMRAM] int 
   810 ;; Registers used:
   811 ;;		wreg, status,2, status,0, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0
   817 ;;      Params:         2       0
   818 ;;      Locals:         5       0
   819 ;;      Temps:          2       0
   820 ;;      Totals:         9       0
   821 ;;Total ram usage:        9 bytes
   822 ;; Hardware stack levels used: 1
   823 ;; Hardware stack levels required when called: 3
   824 ;; This function calls:
   825 ;;		___awdiv
   826 ;; This function is called by:
   827 ;;		_main
   828 ;;		_GetCurrentValue
   829 ;;		_GetDirection
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text5
   834   00002A                     __ptext5:
   835                           	callstack 0
   836   00002A                     _GetADCValue:
   837                           	callstack 25
   838                           
   839                           ;incstack = 0
   840                           ;GetADCValue@Channel stored from wreg
   841   00002A  6E0E               	movwf	GetADCValue@Channel^0,c
   842   00002C                     
   843                           ;user.c: 126:     int temp_2 =0;
   844   00002C  0E00               	movlw	0
   845   00002E  6E12               	movwf	(GetADCValue@temp_2+1)^0,c
   846   000030  0E00               	movlw	0
   847   000032  6E11               	movwf	GetADCValue@temp_2^0,c
   848   000034                     
   849                           ;user.c: 127:     ADCON0 &= 0b11110011;
   850   000034  0EF3               	movlw	243
   851   000036  16C2               	andwf	194,f,c	;volatile
   852                           
   853                           ;user.c: 128:     switch(Channel)
   854   000038  EF31  F000         	goto	l1099
   855   00003C                     l1085:
   856   00003C  50C2               	movf	194,w,c	;volatile
   857   00003E  EF4E  F000         	goto	l1101
   858   000042                     l1087:
   859   000042  84C2               	bsf	194,2,c	;volatile
   860   000044  EF4E  F000         	goto	l1101
   861   000048                     l1089:
   862   000048  86C2               	bsf	194,3,c	;volatile
   863   00004A  EF4E  F000         	goto	l1101
   864   00004E                     l1091:
   865   00004E  0E0C               	movlw	12
   866   000050  12C2               	iorwf	194,f,c	;volatile
   867   000052  EF4E  F000         	goto	l1101
   868   000056                     l1093:
   869   000056  0E00               	movlw	0
   870   000058  6E0B               	movwf	(?_GetADCValue+1)^0,c
   871   00005A  0E00               	movlw	0
   872   00005C  6E0A               	movwf	?_GetADCValue^0,c
   873   00005E  EF8F  F000         	goto	l95
   874   000062                     l1099:
   875   000062  500E               	movf	GetADCValue@Channel^0,w,c
   876   000064  6E0C               	movwf	??_GetADCValue^0,c
   877   000066  6A0D               	clrf	(??_GetADCValue+1)^0,c
   878                           
   879                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   880                           ; Switch size 1, requested type "simple"
   881                           ; Number of cases is 1, Range of values is 0 to 0
   882                           ; switch strategies available:
   883                           ; Name         Instructions Cycles
   884                           ; simple_byte            4     3 (average)
   885                           ;	Chosen strategy is simple_byte
   886   000068  500D               	movf	(??_GetADCValue+1)^0,w,c
   887   00006A  0A00               	xorlw	0	; case 0
   888   00006C  B4D8               	btfsc	status,2,c
   889   00006E  EF3B  F000         	goto	l1229
   890   000072  EF2B  F000         	goto	l1093
   891   000076                     l1229:
   892                           
   893                           ; Switch size 1, requested type "simple"
   894                           ; Number of cases is 4, Range of values is 1 to 24
   895                           ; switch strategies available:
   896                           ; Name         Instructions Cycles
   897                           ; simple_byte           13     7 (average)
   898                           ;	Chosen strategy is simple_byte
   899   000076  500C               	movf	??_GetADCValue^0,w,c
   900   000078  0A01               	xorlw	1	; case 1
   901   00007A  B4D8               	btfsc	status,2,c
   902   00007C  EF1E  F000         	goto	l1085
   903   000080  0A03               	xorlw	3	; case 2
   904   000082  B4D8               	btfsc	status,2,c
   905   000084  EF21  F000         	goto	l1087
   906   000088  0A06               	xorlw	6	; case 4
   907   00008A  B4D8               	btfsc	status,2,c
   908   00008C  EF24  F000         	goto	l1089
   909   000090  0A1C               	xorlw	28	; case 24
   910   000092  B4D8               	btfsc	status,2,c
   911   000094  EF27  F000         	goto	l1091
   912   000098  EF2B  F000         	goto	l1093
   913   00009C                     l1101:
   914                           
   915                           ;user.c: 137:     _delay((unsigned long)((10)*(4000000/4000.0)));
   916   00009C  0E0D               	movlw	13
   917   00009E  6E0C               	movwf	??_GetADCValue^0,c
   918   0000A0  0EFC               	movlw	252
   919   0000A2                     u407:
   920   0000A2  2EE8               	decfsz	wreg,f,c
   921   0000A4  D7FE               	bra	u407
   922   0000A6  2E0C               	decfsz	??_GetADCValue^0,f,c
   923   0000A8  D7FC               	bra	u407
   924   0000AA                     
   925                           ;user.c: 138:  GO_nDONE = 1;
   926   0000AA  82C2               	bsf	4034,1,c	;volatile
   927   0000AC                     l96:
   928                           
   929                           ;user.c: 139:  while(GO_nDONE)
   930   0000AC  B2C2               	btfsc	4034,1,c	;volatile
   931   0000AE  EF5B  F000         	goto	u241
   932   0000B2  EF5D  F000         	goto	u240
   933   0000B6                     u241:
   934   0000B6  EF56  F000         	goto	l96
   935   0000BA                     u240:
   936   0000BA                     
   937                           ;user.c: 143:     temp_1 = ((ADRESH<<8)+ADRESL);
   938   0000BA  50C4               	movf	196,w,c	;volatile
   939   0000BC  6E0D               	movwf	(??_GetADCValue+1)^0,c
   940   0000BE  6A0C               	clrf	??_GetADCValue^0,c
   941   0000C0  50C3               	movf	195,w,c	;volatile
   942   0000C2  240C               	addwf	??_GetADCValue^0,w,c
   943   0000C4  6E0F               	movwf	GetADCValue@temp_1^0,c
   944   0000C6  0E00               	movlw	0
   945   0000C8  200D               	addwfc	(??_GetADCValue+1)^0,w,c
   946   0000CA  6E10               	movwf	(GetADCValue@temp_1+1)^0,c
   947   0000CC                     
   948                           ;user.c: 145:     _delay((unsigned long)((20)*(4000000/4000.0)));
   949   0000CC  0E1A               	movlw	26
   950   0000CE  6E0C               	movwf	??_GetADCValue^0,c
   951   0000D0  0EF8               	movlw	248
   952   0000D2                     u417:
   953   0000D2  2EE8               	decfsz	wreg,f,c
   954   0000D4  D7FE               	bra	u417
   955   0000D6  2E0C               	decfsz	??_GetADCValue^0,f,c
   956   0000D8  D7FC               	bra	u417
   957   0000DA  D000               	nop2	
   958   0000DC                     
   959                           ;user.c: 146:  GO_nDONE = 1;
   960   0000DC  82C2               	bsf	4034,1,c	;volatile
   961   0000DE                     l99:
   962                           
   963                           ;user.c: 147:  while(GO_nDONE)
   964   0000DE  B2C2               	btfsc	4034,1,c	;volatile
   965   0000E0  EF74  F000         	goto	u251
   966   0000E4  EF76  F000         	goto	u250
   967   0000E8                     u251:
   968   0000E8  EF6F  F000         	goto	l99
   969   0000EC                     u250:
   970   0000EC                     
   971                           ;user.c: 150:     temp_2 = ((ADRESH<<8)+ADRESL);
   972   0000EC  50C4               	movf	196,w,c	;volatile
   973   0000EE  6E0D               	movwf	(??_GetADCValue+1)^0,c
   974   0000F0  6A0C               	clrf	??_GetADCValue^0,c
   975   0000F2  50C3               	movf	195,w,c	;volatile
   976   0000F4  240C               	addwf	??_GetADCValue^0,w,c
   977   0000F6  6E11               	movwf	GetADCValue@temp_2^0,c
   978   0000F8  0E00               	movlw	0
   979   0000FA  200D               	addwfc	(??_GetADCValue+1)^0,w,c
   980   0000FC  6E12               	movwf	(GetADCValue@temp_2+1)^0,c
   981   0000FE                     
   982                           ;user.c: 152:     return ((temp_1 + temp_2)/2);
   983   0000FE  5011               	movf	GetADCValue@temp_2^0,w,c
   984   000100  240F               	addwf	GetADCValue@temp_1^0,w,c
   985   000102  6E02               	movwf	___awdiv@dividend^0,c
   986   000104  5012               	movf	(GetADCValue@temp_2+1)^0,w,c
   987   000106  2010               	addwfc	(GetADCValue@temp_1+1)^0,w,c
   988   000108  6E03               	movwf	(___awdiv@dividend+1)^0,c
   989   00010A  0E00               	movlw	0
   990   00010C  6E05               	movwf	(___awdiv@divisor+1)^0,c
   991   00010E  0E02               	movlw	2
   992   000110  6E04               	movwf	___awdiv@divisor^0,c
   993   000112  ECF4  F000         	call	___awdiv	;wreg free
   994   000116  C002  F00A         	movff	?___awdiv,?_GetADCValue
   995   00011A  C003  F00B         	movff	?___awdiv+1,?_GetADCValue+1
   996   00011E                     l95:
   997   00011E  0012               	return		;funcret
   998   000120                     __end_of_GetADCValue:
   999                           	callstack 0
  1000                           
  1001 ;; *************** function ___awdiv *****************
  1002 ;; Defined at:
  1003 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;  dividend        2    1[COMRAM] int 
  1006 ;;  divisor         2    3[COMRAM] int 
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;  quotient        2    7[COMRAM] int 
  1009 ;;  sign            1    6[COMRAM] unsigned char 
  1010 ;;  counter         1    5[COMRAM] unsigned char 
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  2    1[COMRAM] int 
  1013 ;; Registers used:
  1014 ;;		wreg, status,2, status,0
  1015 ;; Tracked objects:
  1016 ;;		On entry : 0/0
  1017 ;;		On exit  : 0/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMRAM   BANK0
  1020 ;;      Params:         4       0
  1021 ;;      Locals:         4       0
  1022 ;;      Temps:          0       0
  1023 ;;      Totals:         8       0
  1024 ;;Total ram usage:        8 bytes
  1025 ;; Hardware stack levels used: 1
  1026 ;; Hardware stack levels required when called: 2
  1027 ;; This function calls:
  1028 ;;		Nothing
  1029 ;; This function is called by:
  1030 ;;		_GetADCValue
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           	psect	text6
  1035   0001E8                     __ptext6:
  1036                           	callstack 0
  1037   0001E8                     ___awdiv:
  1038                           	callstack 25
  1039   0001E8  0E00               	movlw	0
  1040   0001EA  6E07               	movwf	___awdiv@sign^0,c
  1041   0001EC  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
  1042   0001EE  EFFD  F000         	goto	u180
  1043   0001F2  EFFB  F000         	goto	u181
  1044   0001F6                     u181:
  1045   0001F6  EF03  F001         	goto	l1045
  1046   0001FA                     u180:
  1047   0001FA  6C04               	negf	___awdiv@divisor^0,c
  1048   0001FC  1E05               	comf	(___awdiv@divisor+1)^0,f,c
  1049   0001FE  B0D8               	btfsc	status,0,c
  1050   000200  2A05               	incf	(___awdiv@divisor+1)^0,f,c
  1051   000202  0E01               	movlw	1
  1052   000204  6E07               	movwf	___awdiv@sign^0,c
  1053   000206                     l1045:
  1054   000206  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
  1055   000208  EF0A  F001         	goto	u190
  1056   00020C  EF08  F001         	goto	u191
  1057   000210                     u191:
  1058   000210  EF10  F001         	goto	l1051
  1059   000214                     u190:
  1060   000214  6C02               	negf	___awdiv@dividend^0,c
  1061   000216  1E03               	comf	(___awdiv@dividend+1)^0,f,c
  1062   000218  B0D8               	btfsc	status,0,c
  1063   00021A  2A03               	incf	(___awdiv@dividend+1)^0,f,c
  1064   00021C  0E01               	movlw	1
  1065   00021E  1A07               	xorwf	___awdiv@sign^0,f,c
  1066   000220                     l1051:
  1067   000220  0E00               	movlw	0
  1068   000222  6E09               	movwf	(___awdiv@quotient+1)^0,c
  1069   000224  0E00               	movlw	0
  1070   000226  6E08               	movwf	___awdiv@quotient^0,c
  1071   000228  5004               	movf	___awdiv@divisor^0,w,c
  1072   00022A  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
  1073   00022C  B4D8               	btfsc	status,2,c
  1074   00022E  EF1B  F001         	goto	u201
  1075   000232  EF1D  F001         	goto	u200
  1076   000236                     u201:
  1077   000236  EF45  F001         	goto	l1073
  1078   00023A                     u200:
  1079   00023A  0E01               	movlw	1
  1080   00023C  6E06               	movwf	___awdiv@counter^0,c
  1081   00023E  EF25  F001         	goto	l1059
  1082   000242                     l1057:
  1083   000242  90D8               	bcf	status,0,c
  1084   000244  3604               	rlcf	___awdiv@divisor^0,f,c
  1085   000246  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
  1086   000248  2A06               	incf	___awdiv@counter^0,f,c
  1087   00024A                     l1059:
  1088   00024A  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
  1089   00024C  EF2A  F001         	goto	u211
  1090   000250  EF2C  F001         	goto	u210
  1091   000254                     u211:
  1092   000254  EF21  F001         	goto	l1057
  1093   000258                     u210:
  1094   000258                     l1061:
  1095   000258  90D8               	bcf	status,0,c
  1096   00025A  3608               	rlcf	___awdiv@quotient^0,f,c
  1097   00025C  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
  1098   00025E  5004               	movf	___awdiv@divisor^0,w,c
  1099   000260  5C02               	subwf	___awdiv@dividend^0,w,c
  1100   000262  5005               	movf	(___awdiv@divisor+1)^0,w,c
  1101   000264  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
  1102   000266  A0D8               	btfss	status,0,c
  1103   000268  EF38  F001         	goto	u221
  1104   00026C  EF3A  F001         	goto	u220
  1105   000270                     u221:
  1106   000270  EF3F  F001         	goto	l1069
  1107   000274                     u220:
  1108   000274  5004               	movf	___awdiv@divisor^0,w,c
  1109   000276  5E02               	subwf	___awdiv@dividend^0,f,c
  1110   000278  5005               	movf	(___awdiv@divisor+1)^0,w,c
  1111   00027A  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
  1112   00027C  8008               	bsf	___awdiv@quotient^0,0,c
  1113   00027E                     l1069:
  1114   00027E  90D8               	bcf	status,0,c
  1115   000280  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
  1116   000282  3204               	rrcf	___awdiv@divisor^0,f,c
  1117   000284  2E06               	decfsz	___awdiv@counter^0,f,c
  1118   000286  EF2C  F001         	goto	l1061
  1119   00028A                     l1073:
  1120   00028A  5007               	movf	___awdiv@sign^0,w,c
  1121   00028C  B4D8               	btfsc	status,2,c
  1122   00028E  EF4B  F001         	goto	u231
  1123   000292  EF4D  F001         	goto	u230
  1124   000296                     u231:
  1125   000296  EF51  F001         	goto	l1077
  1126   00029A                     u230:
  1127   00029A  6C08               	negf	___awdiv@quotient^0,c
  1128   00029C  1E09               	comf	(___awdiv@quotient+1)^0,f,c
  1129   00029E  B0D8               	btfsc	status,0,c
  1130   0002A0  2A09               	incf	(___awdiv@quotient+1)^0,f,c
  1131   0002A2                     l1077:
  1132   0002A2  C008  F002         	movff	___awdiv@quotient,?___awdiv
  1133   0002A6  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
  1134   0002AA  0012               	return		;funcret
  1135   0002AC                     __end_of___awdiv:
  1136                           	callstack 0
  1137                           
  1138 ;; *************** function _ReversOn *****************
  1139 ;; Defined at:
  1140 ;;		line 271 in file "user.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;		None
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  1    wreg      void 
  1147 ;; Registers used:
  1148 ;;		wreg
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0
  1154 ;;      Params:         0       0
  1155 ;;      Locals:         0       0
  1156 ;;      Temps:          2       0
  1157 ;;      Totals:         2       0
  1158 ;;Total ram usage:        2 bytes
  1159 ;; Hardware stack levels used: 1
  1160 ;; Hardware stack levels required when called: 2
  1161 ;; This function calls:
  1162 ;;		Nothing
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text7
  1169   000550                     __ptext7:
  1170                           	callstack 0
  1171   000550                     _ReversOn:
  1172                           	callstack 28
  1173   000550                     
  1174                           ;user.c: 276:             _delay((unsigned long)((120)*(4000000/4000.0)));
  1175   000550  0E9C               	movlw	156
  1176   000552  6E02               	movwf	??_ReversOn^0,c
  1177   000554  0ED7               	movlw	215
  1178   000556                     u427:
  1179   000556  2EE8               	decfsz	wreg,f,c
  1180   000558  D7FE               	bra	u427
  1181   00055A  2E02               	decfsz	??_ReversOn^0,f,c
  1182   00055C  D7FC               	bra	u427
  1183   00055E  F000               	nop	
  1184                           
  1185                           ;user.c: 278:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1186   000560  0E03               	movlw	3
  1187   000562  6E03               	movwf	(??_ReversOn+1)^0,c
  1188   000564  0E8A               	movlw	138
  1189   000566  6E02               	movwf	??_ReversOn^0,c
  1190   000568  0E56               	movlw	86
  1191   00056A                     u437:
  1192   00056A  2EE8               	decfsz	wreg,f,c
  1193   00056C  D7FE               	bra	u437
  1194   00056E  2E02               	decfsz	??_ReversOn^0,f,c
  1195   000570  D7FC               	bra	u437
  1196   000572  2E03               	decfsz	(??_ReversOn+1)^0,f,c
  1197   000574  D7FA               	bra	u437
  1198   000576  0012               	return		;funcret
  1199   000578                     __end_of_ReversOn:
  1200                           	callstack 0
  1201                           
  1202 ;; *************** function _AddRightBlinks *****************
  1203 ;; Defined at:
  1204 ;;		line 223 in file "user.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;		None
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      _Bool 
  1211 ;; Registers used:
  1212 ;;		wreg, status,2
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0
  1218 ;;      Params:         0       0
  1219 ;;      Locals:         0       0
  1220 ;;      Temps:          2       0
  1221 ;;      Totals:         2       0
  1222 ;;Total ram usage:        2 bytes
  1223 ;; Hardware stack levels used: 1
  1224 ;; Hardware stack levels required when called: 2
  1225 ;; This function calls:
  1226 ;;		Nothing
  1227 ;; This function is called by:
  1228 ;;		_main
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232                           	psect	text8
  1233   0003F8                     __ptext8:
  1234                           	callstack 0
  1235   0003F8                     _AddRightBlinks:
  1236                           	callstack 28
  1237   0003F8                     
  1238                           ;user.c: 227:             PORTAbits.RA4 = 1;
  1239   0003F8  8880               	bsf	128,4,c	;volatile
  1240   0003FA                     
  1241                           ;user.c: 229:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1242   0003FA  0E02               	movlw	2
  1243   0003FC  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1244   0003FE  0E86               	movlw	134
  1245   000400  6E02               	movwf	??_AddRightBlinks^0,c
  1246   000402  0E99               	movlw	153
  1247   000404                     u447:
  1248   000404  2EE8               	decfsz	wreg,f,c
  1249   000406  D7FE               	bra	u447
  1250   000408  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1251   00040A  D7FC               	bra	u447
  1252   00040C  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1253   00040E  D7FA               	bra	u447
  1254   000410  F000               	nop	
  1255   000412                     
  1256                           ;user.c: 230:             PORTAbits.RA4 = 0;
  1257   000412  9880               	bcf	128,4,c	;volatile
  1258                           
  1259                           ;user.c: 231:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1260   000414  0E03               	movlw	3
  1261   000416  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1262   000418  0E8A               	movlw	138
  1263   00041A  6E02               	movwf	??_AddRightBlinks^0,c
  1264   00041C  0E56               	movlw	86
  1265   00041E                     u457:
  1266   00041E  2EE8               	decfsz	wreg,f,c
  1267   000420  D7FE               	bra	u457
  1268   000422  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1269   000424  D7FC               	bra	u457
  1270   000426  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1271   000428  D7FA               	bra	u457
  1272   00042A                     
  1273                           ;user.c: 232:             PORTAbits.RA4 = 1;
  1274   00042A  8880               	bsf	128,4,c	;volatile
  1275                           
  1276                           ;user.c: 234:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1277   00042C  0E02               	movlw	2
  1278   00042E  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1279   000430  0E86               	movlw	134
  1280   000432  6E02               	movwf	??_AddRightBlinks^0,c
  1281   000434  0E99               	movlw	153
  1282   000436                     u467:
  1283   000436  2EE8               	decfsz	wreg,f,c
  1284   000438  D7FE               	bra	u467
  1285   00043A  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1286   00043C  D7FC               	bra	u467
  1287   00043E  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1288   000440  D7FA               	bra	u467
  1289   000442  F000               	nop	
  1290   000444                     
  1291                           ;user.c: 235:             PORTAbits.RA4 = 0;
  1292   000444  9880               	bcf	128,4,c	;volatile
  1293                           
  1294                           ;user.c: 236:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1295   000446  0E03               	movlw	3
  1296   000448  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1297   00044A  0E8A               	movlw	138
  1298   00044C  6E02               	movwf	??_AddRightBlinks^0,c
  1299   00044E  0E56               	movlw	86
  1300   000450                     u477:
  1301   000450  2EE8               	decfsz	wreg,f,c
  1302   000452  D7FE               	bra	u477
  1303   000454  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1304   000456  D7FC               	bra	u477
  1305   000458  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1306   00045A  D7FA               	bra	u477
  1307   00045C                     
  1308                           ;user.c: 237:             PORTAbits.RA4 = 1;
  1309   00045C  8880               	bsf	128,4,c	;volatile
  1310                           
  1311                           ;user.c: 239:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1312   00045E  0E02               	movlw	2
  1313   000460  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1314   000462  0E86               	movlw	134
  1315   000464  6E02               	movwf	??_AddRightBlinks^0,c
  1316   000466  0E99               	movlw	153
  1317   000468                     u487:
  1318   000468  2EE8               	decfsz	wreg,f,c
  1319   00046A  D7FE               	bra	u487
  1320   00046C  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1321   00046E  D7FC               	bra	u487
  1322   000470  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1323   000472  D7FA               	bra	u487
  1324   000474  F000               	nop	
  1325   000476                     
  1326                           ;user.c: 240:             PORTAbits.RA4 = 0;
  1327   000476  9880               	bcf	128,4,c	;volatile
  1328                           
  1329                           ;user.c: 241:             _delay((unsigned long)((100)*(4000000/4000.0)));
  1330   000478  0E82               	movlw	130
  1331   00047A  6E02               	movwf	??_AddRightBlinks^0,c
  1332   00047C  0EDE               	movlw	222
  1333   00047E                     u497:
  1334   00047E  2EE8               	decfsz	wreg,f,c
  1335   000480  D7FE               	bra	u497
  1336   000482  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1337   000484  D7FC               	bra	u497
  1338   000486                     
  1339                           ;user.c: 242:             return wasTurningRight = 0;;	Return value of _AddRightBlinks i
      +                          s never used
  1340   000486  0E00               	movlw	0
  1341   000488  6E2E               	movwf	_wasTurningRight^0,c
  1342   00048A  0012               	return		;funcret
  1343   00048C                     __end_of_AddRightBlinks:
  1344                           	callstack 0
  1345                           
  1346 ;; *************** function _AddLeftBlinks *****************
  1347 ;; Defined at:
  1348 ;;		line 247 in file "user.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;		None
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;		None
  1353 ;; Return value:  Size  Location     Type
  1354 ;;                  1    wreg      _Bool 
  1355 ;; Registers used:
  1356 ;;		wreg, status,2
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMRAM   BANK0
  1362 ;;      Params:         0       0
  1363 ;;      Locals:         0       0
  1364 ;;      Temps:          2       0
  1365 ;;      Totals:         2       0
  1366 ;;Total ram usage:        2 bytes
  1367 ;; Hardware stack levels used: 1
  1368 ;; Hardware stack levels required when called: 2
  1369 ;; This function calls:
  1370 ;;		Nothing
  1371 ;; This function is called by:
  1372 ;;		_main
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           	psect	text9
  1377   00048C                     __ptext9:
  1378                           	callstack 0
  1379   00048C                     _AddLeftBlinks:
  1380                           	callstack 28
  1381   00048C                     
  1382                           ;user.c: 251:             PORTBbits.RB4 = 1;
  1383   00048C  8881               	bsf	129,4,c	;volatile
  1384   00048E                     
  1385                           ;user.c: 253:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1386   00048E  0E02               	movlw	2
  1387   000490  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1388   000492  0E86               	movlw	134
  1389   000494  6E02               	movwf	??_AddLeftBlinks^0,c
  1390   000496  0E99               	movlw	153
  1391   000498                     u507:
  1392   000498  2EE8               	decfsz	wreg,f,c
  1393   00049A  D7FE               	bra	u507
  1394   00049C  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1395   00049E  D7FC               	bra	u507
  1396   0004A0  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1397   0004A2  D7FA               	bra	u507
  1398   0004A4  F000               	nop	
  1399   0004A6                     
  1400                           ;user.c: 254:             PORTBbits.RB4 = 0;
  1401   0004A6  9881               	bcf	129,4,c	;volatile
  1402                           
  1403                           ;user.c: 255:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1404   0004A8  0E03               	movlw	3
  1405   0004AA  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1406   0004AC  0E8A               	movlw	138
  1407   0004AE  6E02               	movwf	??_AddLeftBlinks^0,c
  1408   0004B0  0E56               	movlw	86
  1409   0004B2                     u517:
  1410   0004B2  2EE8               	decfsz	wreg,f,c
  1411   0004B4  D7FE               	bra	u517
  1412   0004B6  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1413   0004B8  D7FC               	bra	u517
  1414   0004BA  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1415   0004BC  D7FA               	bra	u517
  1416   0004BE                     
  1417                           ;user.c: 256:             PORTBbits.RB4 = 1;
  1418   0004BE  8881               	bsf	129,4,c	;volatile
  1419                           
  1420                           ;user.c: 258:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1421   0004C0  0E02               	movlw	2
  1422   0004C2  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1423   0004C4  0E86               	movlw	134
  1424   0004C6  6E02               	movwf	??_AddLeftBlinks^0,c
  1425   0004C8  0E99               	movlw	153
  1426   0004CA                     u527:
  1427   0004CA  2EE8               	decfsz	wreg,f,c
  1428   0004CC  D7FE               	bra	u527
  1429   0004CE  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1430   0004D0  D7FC               	bra	u527
  1431   0004D2  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1432   0004D4  D7FA               	bra	u527
  1433   0004D6  F000               	nop	
  1434   0004D8                     
  1435                           ;user.c: 259:             PORTBbits.RB4 = 0;
  1436   0004D8  9881               	bcf	129,4,c	;volatile
  1437                           
  1438                           ;user.c: 260:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1439   0004DA  0E03               	movlw	3
  1440   0004DC  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1441   0004DE  0E8A               	movlw	138
  1442   0004E0  6E02               	movwf	??_AddLeftBlinks^0,c
  1443   0004E2  0E56               	movlw	86
  1444   0004E4                     u537:
  1445   0004E4  2EE8               	decfsz	wreg,f,c
  1446   0004E6  D7FE               	bra	u537
  1447   0004E8  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1448   0004EA  D7FC               	bra	u537
  1449   0004EC  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1450   0004EE  D7FA               	bra	u537
  1451   0004F0                     
  1452                           ;user.c: 261:             PORTBbits.RB4 = 1;
  1453   0004F0  8881               	bsf	129,4,c	;volatile
  1454                           
  1455                           ;user.c: 263:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1456   0004F2  0E02               	movlw	2
  1457   0004F4  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1458   0004F6  0E86               	movlw	134
  1459   0004F8  6E02               	movwf	??_AddLeftBlinks^0,c
  1460   0004FA  0E99               	movlw	153
  1461   0004FC                     u547:
  1462   0004FC  2EE8               	decfsz	wreg,f,c
  1463   0004FE  D7FE               	bra	u547
  1464   000500  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1465   000502  D7FC               	bra	u547
  1466   000504  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1467   000506  D7FA               	bra	u547
  1468   000508  F000               	nop	
  1469   00050A                     
  1470                           ;user.c: 264:             PORTBbits.RB4 = 0;
  1471   00050A  9881               	bcf	129,4,c	;volatile
  1472                           
  1473                           ;user.c: 265:             _delay((unsigned long)((100)*(4000000/4000.0)));
  1474   00050C  0E82               	movlw	130
  1475   00050E  6E02               	movwf	??_AddLeftBlinks^0,c
  1476   000510  0EDE               	movlw	222
  1477   000512                     u557:
  1478   000512  2EE8               	decfsz	wreg,f,c
  1479   000514  D7FE               	bra	u557
  1480   000516  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1481   000518  D7FC               	bra	u557
  1482   00051A                     
  1483                           ;user.c: 266:             return wasTurningLeft = 0;;	Return value of _AddLeftBlinks is 
      +                          never used
  1484   00051A  0E00               	movlw	0
  1485   00051C  6E2D               	movwf	_wasTurningLeft^0,c
  1486   00051E  0012               	return		;funcret
  1487   000520                     __end_of_AddLeftBlinks:
  1488                           	callstack 0
  1489                           
  1490 ;; *************** function _low_isr *****************
  1491 ;; Defined at:
  1492 ;;		line 67 in file "interrupts.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;		None
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;		None
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      void 
  1499 ;; Registers used:
  1500 ;;		None
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0
  1506 ;;      Params:         0       0
  1507 ;;      Locals:         0       0
  1508 ;;      Temps:          1       0
  1509 ;;      Totals:         1       0
  1510 ;;Total ram usage:        1 bytes
  1511 ;; Hardware stack levels used: 1
  1512 ;; Hardware stack levels required when called: 1
  1513 ;; This function calls:
  1514 ;;		Nothing
  1515 ;; This function is called by:
  1516 ;;		Interrupt level 1
  1517 ;; This function uses a non-reentrant model
  1518 ;;
  1519                           
  1520                           	psect	intcodelo
  1521   000018                     __pintcodelo:
  1522                           	callstack 0
  1523   000018                     _low_isr:
  1524                           	callstack 25
  1525                           
  1526                           ;incstack = 0
  1527   000018  802F               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  1528   00001A  CFE0 F001          	movff	bsr,??_low_isr
  1529   00001E  C001  FFE0         	movff	??_low_isr,bsr
  1530   000022  902F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1531   000024  0010               	retfie	
  1532   000026                     __end_of_low_isr:
  1533                           	callstack 0
  1534                           
  1535 ;; *************** function _high_isr *****************
  1536 ;; Defined at:
  1537 ;;		line 27 in file "interrupts.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;		None
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;		None
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      void 
  1544 ;; Registers used:
  1545 ;;		None
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMRAM   BANK0
  1551 ;;      Params:         0       0
  1552 ;;      Locals:         0       0
  1553 ;;      Temps:          0       0
  1554 ;;      Totals:         0       0
  1555 ;;Total ram usage:        0 bytes
  1556 ;; Hardware stack levels used: 1
  1557 ;; This function calls:
  1558 ;;		Nothing
  1559 ;; This function is called by:
  1560 ;;		Interrupt level 2
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	intcode
  1565   000008                     __pintcode:
  1566                           	callstack 0
  1567   000008                     _high_isr:
  1568                           	callstack 25
  1569                           
  1570                           ;incstack = 0
  1571   000008  822F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1572   00000A  EFD3  F002         	goto	int_func
  1573                           
  1574                           	psect	intcode_body
  1575   0005A6                     __pintcode_body:
  1576                           	callstack 25
  1577   0005A6                     int_func:
  1578                           	callstack 25
  1579   0005A6  922F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1580   0005A8  0011               	retfie		f
  1581   0005AA                     __end_of_high_isr:
  1582                           	callstack 0
  1583   000000                     
  1584                           	psect	rparam
  1585   000000                     
  1586                           	psect	temp
  1587   00002F                     btemp:
  1588                           	callstack 0
  1589   00002F                     	ds	1
  1590   000000                     int$flags	set	btemp
  1591   000000                     wtemp8	set	btemp+1
  1592   000000                     ttemp5	set	btemp+1
  1593   000000                     ttemp6	set	btemp+4
  1594   000000                     ttemp7	set	btemp+8
  1595                           
  1596                           	psect	idloc
  1597                           
  1598                           ;Config register IDLOC0 @ 0x200000
  1599                           ;	unspecified, using default values
  1600   200000                     	org	2097152
  1601   200000  FF                 	db	255
  1602                           
  1603                           ;Config register IDLOC1 @ 0x200001
  1604                           ;	unspecified, using default values
  1605   200001                     	org	2097153
  1606   200001  FF                 	db	255
  1607                           
  1608                           ;Config register IDLOC2 @ 0x200002
  1609                           ;	unspecified, using default values
  1610   200002                     	org	2097154
  1611   200002  FF                 	db	255
  1612                           
  1613                           ;Config register IDLOC3 @ 0x200003
  1614                           ;	unspecified, using default values
  1615   200003                     	org	2097155
  1616   200003  FF                 	db	255
  1617                           
  1618                           ;Config register IDLOC4 @ 0x200004
  1619                           ;	unspecified, using default values
  1620   200004                     	org	2097156
  1621   200004  FF                 	db	255
  1622                           
  1623                           ;Config register IDLOC5 @ 0x200005
  1624                           ;	unspecified, using default values
  1625   200005                     	org	2097157
  1626   200005  FF                 	db	255
  1627                           
  1628                           ;Config register IDLOC6 @ 0x200006
  1629                           ;	unspecified, using default values
  1630   200006                     	org	2097158
  1631   200006  FF                 	db	255
  1632                           
  1633                           ;Config register IDLOC7 @ 0x200007
  1634                           ;	unspecified, using default values
  1635   200007                     	org	2097159
  1636   200007  FF                 	db	255
  1637                           
  1638                           	psect	config
  1639                           
  1640                           ; Padding undefined space
  1641   300000                     	org	3145728
  1642   300000  FF                 	db	255
  1643                           
  1644                           ;Config register CONFIG1H @ 0x300001
  1645                           ;	Oscillator Selection bits
  1646                           ;	OSC = INTIO2, Internal RC oscillator, port function on RA6 and port function on RA7
  1647                           ;	Fail-Safe Clock Monitor Enable bit
  1648                           ;	FSCM = ON, Fail-Safe Clock Monitor enabled
  1649                           ;	Internal External Switchover bit
  1650                           ;	IESO = ON, Internal External Switchover mode enabled
  1651   300001                     	org	3145729
  1652   300001  C8                 	db	200
  1653                           
  1654                           ;Config register CONFIG2L @ 0x300002
  1655                           ;	Power-up Timer Enable bit
  1656                           ;	PWRT = OFF, PWRT disabled
  1657                           ;	Brown-out Reset Enable bit
  1658                           ;	BOR = ON, Brown-out Reset enabled
  1659                           ;	Brown-out Reset Voltage bits
  1660                           ;	BORV = 0x3, unprogrammed default
  1661   300002                     	org	3145730
  1662   300002  0F                 	db	15
  1663                           
  1664                           ;Config register CONFIG2H @ 0x300003
  1665                           ;	Watchdog Timer Enable bit
  1666                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1667                           ;	Watchdog Timer Postscale Select bits
  1668                           ;	WDTPS = 32768, 1:32768
  1669   300003                     	org	3145731
  1670   300003  1E                 	db	30
  1671                           
  1672                           ; Padding undefined space
  1673   300004                     	org	3145732
  1674   300004  FF                 	db	255
  1675                           
  1676                           ;Config register CONFIG3H @ 0x300005
  1677                           ;	MCLR Pin Enable bit
  1678                           ;	MCLRE = OFF, RA5 input pin enabled, MCLR disabled
  1679   300005                     	org	3145733
  1680   300005  00                 	db	0
  1681                           
  1682                           ;Config register CONFIG4L @ 0x300006
  1683                           ;	Stack Full/Underflow Reset Enable bit
  1684                           ;	STVR = ON, Stack full/underflow will cause Reset
  1685                           ;	Low-Voltage ICSP Enable bit
  1686                           ;	LVP = ON, Low-Voltage ICSP enabled
  1687                           ;	Background Debugger Enable bit
  1688                           ;	DEBUG = 0x1, unprogrammed default
  1689   300006                     	org	3145734
  1690   300006  85                 	db	133
  1691                           
  1692                           ; Padding undefined space
  1693   300007                     	org	3145735
  1694   300007  FF                 	db	255
  1695                           
  1696                           ;Config register CONFIG5L @ 0x300008
  1697                           ;	Code Protection bit
  1698                           ;	CP0 = OFF, Block 0 (00200-000FFFh) not code-protected
  1699                           ;	Code Protection bit
  1700                           ;	CP1 = OFF, Block 1 (001000-001FFFh) not code-protected
  1701   300008                     	org	3145736
  1702   300008  03                 	db	3
  1703                           
  1704                           ;Config register CONFIG5H @ 0x300009
  1705                           ;	Boot Block Code Protection bit
  1706                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  1707                           ;	Data EEPROM Code Protection bit
  1708                           ;	CPD = OFF, Data EEPROM not code-protected
  1709   300009                     	org	3145737
  1710   300009  C0                 	db	192
  1711                           
  1712                           ;Config register CONFIG6L @ 0x30000A
  1713                           ;	Write Protection bit
  1714                           ;	WRT0 = OFF, Block 0 (00200-000FFFh) not write-protected
  1715                           ;	Write Protection bit
  1716                           ;	WRT1 = OFF, Block 1 (001000-001FFFh) not write-protected
  1717   30000A                     	org	3145738
  1718   30000A  03                 	db	3
  1719                           
  1720                           ;Config register CONFIG6H @ 0x30000B
  1721                           ;	Configuration Register Write Protection bit
  1722                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1723                           ;	Boot Block Write Protection bit
  1724                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  1725                           ;	Data EEPROM Write Protection bit
  1726                           ;	WRTD = OFF, Data EEPROM not write-protected
  1727   30000B                     	org	3145739
  1728   30000B  E0                 	db	224
  1729                           
  1730                           ;Config register CONFIG7L @ 0x30000C
  1731                           ;	Table Read Protection bit
  1732                           ;	EBTR0 = OFF, Block 0 (00200-000FFFh) not protected from table reads executed in other 
      +                          blocks
  1733                           ;	Table Read Protection bit
  1734                           ;	EBTR1 = OFF, Block 1 (001000-001FFFh) not protected from table reads executed in other
      +                           blocks
  1735   30000C                     	org	3145740
  1736   30000C  03                 	db	3
  1737                           
  1738                           ;Config register CONFIG7H @ 0x30000D
  1739                           ;	Boot Block Table Read Protection bit
  1740                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  1741   30000D                     	org	3145741
  1742   30000D  40                 	db	64
  1743                           tosu	equ	0xFFF
  1744                           tosh	equ	0xFFE
  1745                           tosl	equ	0xFFD
  1746                           stkptr	equ	0xFFC
  1747                           pclatu	equ	0xFFB
  1748                           pclath	equ	0xFFA
  1749                           pcl	equ	0xFF9
  1750                           tblptru	equ	0xFF8
  1751                           tblptrh	equ	0xFF7
  1752                           tblptrl	equ	0xFF6
  1753                           tablat	equ	0xFF5
  1754                           prodh	equ	0xFF4
  1755                           prodl	equ	0xFF3
  1756                           indf0	equ	0xFEF
  1757                           postinc0	equ	0xFEE
  1758                           postdec0	equ	0xFED
  1759                           preinc0	equ	0xFEC
  1760                           plusw0	equ	0xFEB
  1761                           fsr0h	equ	0xFEA
  1762                           fsr0l	equ	0xFE9
  1763                           wreg	equ	0xFE8
  1764                           indf1	equ	0xFE7
  1765                           postinc1	equ	0xFE6
  1766                           postdec1	equ	0xFE5
  1767                           preinc1	equ	0xFE4
  1768                           plusw1	equ	0xFE3
  1769                           fsr1h	equ	0xFE2
  1770                           fsr1l	equ	0xFE1
  1771                           bsr	equ	0xFE0
  1772                           indf2	equ	0xFDF
  1773                           postinc2	equ	0xFDE
  1774                           postdec2	equ	0xFDD
  1775                           preinc2	equ	0xFDC
  1776                           plusw2	equ	0xFDB
  1777                           fsr2h	equ	0xFDA
  1778                           fsr2l	equ	0xFD9
  1779                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     36      46
    BANK0           128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Turn_49A
    _Turn_49A->_GetCurrentValue
    _GetDirection->_GetADCValue
    _GetCurrentValue->_GetADCValue
    _GetADCValue->___awdiv

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    1736
                                             28 COMRAM     8     8      0
                      _AddLeftBlinks
                     _AddRightBlinks
                        _GetADCValue
                            _InitADC
                           _ReversOn
                           _Turn_49A
 ---------------------------------------------------------------------------------
 (1) _Turn_49A                                             4     4      0    1145
                                             24 COMRAM     4     4      0
                    _GetCurrentValue
                       _GetDirection
 ---------------------------------------------------------------------------------
 (2) _GetDirection                                         0     0      0     537
                        _GetADCValue
                            _InitADC
 ---------------------------------------------------------------------------------
 (2) _GetCurrentValue                                      6     4      2     583
                                             18 COMRAM     6     4      2
                        _GetADCValue
                            _InitADC
 ---------------------------------------------------------------------------------
 (3) _InitADC                                              1     1      0      15
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _GetADCValue                                          9     7      2     522
                                              9 COMRAM     9     7      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     452
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _ReversOn                                             2     2      0       0
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _AddRightBlinks                                       2     2      0       0
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _AddLeftBlinks                                        2     2      0       0
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddLeftBlinks
   _AddRightBlinks
   _GetADCValue
     ___awdiv
   _InitADC
   _ReversOn
   _Turn_49A
     _GetCurrentValue
       _GetADCValue
       _InitADC
     _GetDirection
       _GetADCValue
       _InitADC

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       9        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     24      2E       1       36.5%
BITBIGSFRl          3E      0       0       7        0.0%
BITBIGSFRhh         3B      0       0       6        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2E       8        0.0%
DATA                 0      0      2E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Jul 25 23:33:19 2022

                        l37 01E4                          l85 05A4                          l95 011E  
                        l96 00AC                          l99 00DE                ___awdiv@sign 0007  
                        bsr 000FE0                         l104 054E                         l122 051E  
                       l114 03C4                         l115 03F6                         l108 0356  
                       l125 0576                         l119 048A                         l359 02AA  
                       l923 0550                         l845 0594                         l847 059C  
                       l961 03F8                         l849 05A0                         l971 045C  
                       l963 03FA                         l981 048E                         l973 0476  
                       l965 0412                         l991 050A                         l983 04A6  
                       l975 0486                         l967 042A                         l993 051A  
                       l985 04BE                         l969 0444                         l987 04D8  
                       l979 048C                         l989 04F0                         u200 023A  
                       u201 0236                         u210 0258                         u211 0254  
                       u220 0274                         u300 0390                         u221 0270  
                       u301 038C                         u230 029A                         u310 017C  
                       u231 0296                         u311 0178                         u240 00BA  
                       u320 01A0                         u241 00B6                         u321 019C  
                       u250 00EC                         u330 01B8                         u251 00E8  
                       u331 01B4                         u180 01FA                         u260 02EA  
                       u340 01D0                         u181 01F6                         u261 02E6  
                       u341 01CC                         u190 0214                         u270 0306  
                       u191 0210                         u407 00A2                         u271 0302  
                       u280 032A                         u417 00D2                         u281 0326  
                       u290 0346                         u507 0498                         u427 0556  
                       u291 0342                         u517 04B2                         u437 056A  
                       u357 0360                         u527 04CA                         u447 0404  
                       u367 039C                         u537 04E4                         u457 041E  
                       u377 03B2                         u547 04FC                         u467 0436  
                       u387 03D0                         i2l5 05A6                         u557 0512  
                       u477 0450                         u397 03E4                         u487 0468  
                       u497 047E                         wreg 000FE8        __end_of_GetDirection 0358  
           ??_AddLeftBlinks 0002               _R_ch_in_value 002B                        l1101 009C  
                      l1111 00EC                        l1103 00AA                        l1041 01FA  
                      l1113 00FE                        l1105 00BA                        l1121 0520  
                      l1201 0152                        l1051 0220                        l1043 0202  
                      l1107 00CC                        l1123 0542                        l1131 02EA  
                      l1211 0184                        l1203 0160                        l1061 0258  
                      l1053 0228                        l1045 0206                        l1037 01E8  
                      l1109 00DC                        l1141 032A                        l1133 0306  
                      l1221 01D0                        l1213 01A0                        l1205 017C  
                      l1071 0284                        l1063 025E                        l1055 023A  
                      l1047 0214                        l1039 01EC                        l1143 0346  
                      l1127 02AC                        l1223 01D8                        l1215 01A8  
                      l1065 0274                        l1057 0242                        l1073 028A  
                      l1049 021C                        l1081 002C                        l1129 02CE  
                      l1161 0390                        l1153 0358                        l1217 01B8  
                      l1075 029A                        l1067 027C                        l1059 024A  
                      l1091 004E                        l1083 0034                        l1139 030E  
                      l1171 03C0                        l1163 0392                        l1155 035A  
                      l1219 01C0                        l1077 02A2                        l1069 027E  
                      l1229 0076                        l1093 0056                        l1085 003C  
                      l1149 034E                        l1181 03D8                        l1165 0396  
                      l1157 0368                        l1087 0042                        l1183 03DA  
                      l1167 03A6                        l1159 0374                        l1191 0138  
                      l1089 0048                        l1177 03C6                        l1169 03A8  
                      l1193 013A                        l1099 0062                        l1179 03CA  
                      l1195 013C                        l1197 013E                        l1189 0120  
                      l1199 0144                        i1l10 001E                        _main 0120  
                      btemp 002F                 _GetADCValue 002A                        start 0026  
              ___param_bank 000000             __end_of_InitADC 05A6                       ?_main 0001  
           __end_of___awdiv 02AC             ___awdiv@divisor 0004             ___awdiv@counter 0006  
           __end_of_low_isr 0026           ??_GetCurrentValue 0015                       ttemp5 0030  
                     ttemp6 0033                       ttemp7 0037                       status 000FD8  
                     wtemp8 0030             __initialization 0578                __end_of_main 01E8  
                    ??_main 001D           main@_49A_in_value 0021               __activetblptr 000002  
          __end_of_ReversOn 0578                      _ADCON0 000FC2                      _ADCON1 000FC1  
                    _ADCON2 000FC0            __end_of_Turn_49A 03F8                      _ADRESH 000FC4  
                    _ADRESL 000FC3            ___awdiv@dividend 0002                  _V_in_value 0027  
                 ??_InitADC 0002            __end_of_high_isr 05AA                   ??___awdiv 0006  
 GetCurrentValue@V_in_value 0015            ??_AddRightBlinks 0002                      clear_0 057E  
          ___awdiv@quotient 0008                      isa$std 000001                   ??_low_isr 0001  
                    tblptru 000FF8                  __accesstop 0080     __end_of__initialization 0584  
             ___rparam_used 000001                _GetDirection 02AC              __pcstackCOMRAM 0001  
           _wasTurningRight 002E                ?_GetADCValue 000A                   ?_ReversOn 0001  
                 ?_Turn_49A 0001             _GetCurrentValue 0520           main@L_ch_in_value 001F  
     __end_of_AddLeftBlinks 0520                   ?_high_isr 0001                     _InitADC 0592  
                   __Hparam 0000                     __Lparam 0000                  ??_ReversOn 0002  
                   ___awdiv 01E8                  ??_Turn_49A 0019                     __pcinit 0578  
                   __ramtop 0100                     __ptext0 0120                     __ptext1 0358  
                   __ptext2 02AC                     __ptext3 0520                     __ptext4 0592  
                   __ptext5 002A                     __ptext6 01E8                     __ptext7 0550  
                   __ptext8 03F8                     __ptext9 048C                 _V_out_value 0025  
                   _low_isr 0018                  ??_high_isr 0001              __pintcode_body 05A6  
      end_of_initialization 0584               __Lmediumconst 0000                     int_func 05A6  
     Turn_49A@Current_value 001B                     postinc0 000FEE     __end_of_GetCurrentValue 0550  
GetCurrentValue@V_out_value 0017                   _PORTAbits 000F80                   _PORTBbits 000F81  
        GetADCValue@Channel 000E         start_initialization 0578            ?_GetCurrentValue 0013  
               __pbssCOMRAM 0025               _L_ch_in_value 0029              _wasTurningLeft 002D  
                  ?_InitADC 0001                   __pintcode 0008                    ?___awdiv 0002  
               __pintcodelo 0018                    ?_low_isr 0001                    _GO_nDONE 007E11  
         main@R_ch_in_value 001D                    __Hrparam 0000               ?_GetDirection 0001  
                  _ReversOn 0550                    __Lrparam 0000           GetADCValue@temp_1 000F  
         GetADCValue@temp_2 0011                    _Turn_49A 0358              _AddRightBlinks 03F8  
                  _high_isr 0008               _AddLeftBlinks 048C               ??_GetADCValue 000C  
            ??_GetDirection 0013                    isa$xinst 000000        main@Reverse_in_value 0023  
                  int$flags 002F      __end_of_AddRightBlinks 048C              ?_AddLeftBlinks 0001  
                  intlevel1 0000                    intlevel2 0000         __end_of_GetADCValue 0120  
           ?_AddRightBlinks 0001              InitADC@Channel 0002  
