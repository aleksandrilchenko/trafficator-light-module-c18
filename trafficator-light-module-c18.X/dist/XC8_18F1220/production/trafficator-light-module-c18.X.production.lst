

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Jul 24 23:28:47 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F1320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Version 2.40
    28                           ; Generated 17/11/2021 GMT
    29                           ; 
    30                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F1320 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62   000000                     _ADRESL	set	4035
    63   000000                     _ADRESH	set	4036
    64   000000                     _ADCON0	set	4034
    65   000000                     _GO_nDONE	set	32273
    66   000000                     _ADCON2	set	4032
    67   000000                     _ADCON1	set	4033
    68   000000                     _PORTBbits	set	3969
    69   000000                     _PORTAbits	set	3968
    70                           
    71                           ; #config settings
    72                           
    73                           	psect	cinit
    74   000578                     __pcinit:
    75                           	callstack 0
    76   000578                     start_initialization:
    77                           	callstack 0
    78   000578                     __initialization:
    79                           	callstack 0
    80                           
    81                           ; Clear objects allocated to COMRAM (7 bytes)
    82   000578  EE00  F025         	lfsr	0,__pbssCOMRAM
    83   00057C  0E07               	movlw	7
    84   00057E                     clear_0:
    85   00057E  6AEE               	clrf	postinc0,c
    86   000580  06E8               	decf	wreg,f,c
    87   000582  E1FD               	bnz	clear_0
    88   000584                     end_of_initialization:
    89                           	callstack 0
    90   000584                     __end_of__initialization:
    91                           	callstack 0
    92   000584  902C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    93   000586  922C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    94   000588  0E00               	movlw	low (__Lmediumconst shr (0+16))
    95   00058A  6EF8               	movwf	tblptru,c
    96   00058C  0100               	movlb	0
    97   00058E  EF90  F000         	goto	_main	;jump to C main() function
    98                           
    99                           	psect	bssCOMRAM
   100   000025                     __pbssCOMRAM:
   101                           	callstack 0
   102   000025                     _L_ch_in_value:
   103                           	callstack 0
   104   000025                     	ds	2
   105   000027                     _R_ch_in_value:
   106                           	callstack 0
   107   000027                     	ds	2
   108   000029                     _hazardIsOn:
   109                           	callstack 0
   110   000029                     	ds	1
   111   00002A                     _wasTurningLeft:
   112                           	callstack 0
   113   00002A                     	ds	1
   114   00002B                     _wasTurningRight:
   115                           	callstack 0
   116   00002B                     	ds	1
   117                           
   118                           	psect	cstackCOMRAM
   119   000001                     __pcstackCOMRAM:
   120                           	callstack 0
   121   000001                     ??_low_isr:
   122   000001                     
   123                           ; 1 bytes @ 0x0
   124   000001                     	ds	1
   125   000002                     ??_ReversOn:
   126   000002                     ??_AddRightBlinks:
   127   000002                     ??_AddLeftBlinks:
   128   000002                     ?___awdiv:
   129                           	callstack 0
   130   000002                     InitADC@Channel:
   131                           	callstack 0
   132   000002                     ___awdiv@dividend:
   133                           	callstack 0
   134                           
   135                           ; 2 bytes @ 0x1
   136   000002                     	ds	2
   137   000004                     ___awdiv@divisor:
   138                           	callstack 0
   139                           
   140                           ; 2 bytes @ 0x3
   141   000004                     	ds	2
   142   000006                     ___awdiv@counter:
   143                           	callstack 0
   144                           
   145                           ; 1 bytes @ 0x5
   146   000006                     	ds	1
   147   000007                     ___awdiv@sign:
   148                           	callstack 0
   149                           
   150                           ; 1 bytes @ 0x6
   151   000007                     	ds	1
   152   000008                     ___awdiv@quotient:
   153                           	callstack 0
   154                           
   155                           ; 2 bytes @ 0x7
   156   000008                     	ds	2
   157   00000A                     ?_GetADCValue:
   158                           	callstack 0
   159                           
   160                           ; 2 bytes @ 0x9
   161   00000A                     	ds	2
   162   00000C                     ??_GetADCValue:
   163                           
   164                           ; 1 bytes @ 0xB
   165   00000C                     	ds	2
   166   00000E                     GetADCValue@Channel:
   167                           	callstack 0
   168                           
   169                           ; 1 bytes @ 0xD
   170   00000E                     	ds	1
   171   00000F                     GetADCValue@temp_1:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0xE
   175   00000F                     	ds	2
   176   000011                     GetADCValue@temp_2:
   177                           	callstack 0
   178                           
   179                           ; 2 bytes @ 0x10
   180   000011                     	ds	2
   181   000013                     ?_GetCurrentValue:
   182                           	callstack 0
   183                           
   184                           ; 2 bytes @ 0x12
   185   000013                     	ds	2
   186   000015                     GetCurrentValue@ADC0_value:
   187                           	callstack 0
   188                           
   189                           ; 2 bytes @ 0x14
   190   000015                     	ds	2
   191   000017                     GetCurrentValue@ADC1_value:
   192                           	callstack 0
   193                           
   194                           ; 2 bytes @ 0x16
   195   000017                     	ds	2
   196   000019                     ??_Turn_49A:
   197                           
   198                           ; 1 bytes @ 0x18
   199   000019                     	ds	2
   200   00001B                     Turn_49A@Current_value:
   201                           	callstack 0
   202                           
   203                           ; 2 bytes @ 0x1A
   204   00001B                     	ds	2
   205   00001D                     main@R_ch_in_value:
   206                           	callstack 0
   207                           
   208                           ; 2 bytes @ 0x1C
   209   00001D                     	ds	2
   210   00001F                     main@L_ch_in_value:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x1E
   214   00001F                     	ds	2
   215   000021                     main@_49A_in_value:
   216                           	callstack 0
   217                           
   218                           ; 2 bytes @ 0x20
   219   000021                     	ds	2
   220   000023                     main@Reverse_in_value:
   221                           	callstack 0
   222                           
   223                           ; 2 bytes @ 0x22
   224   000023                     	ds	2
   225                           
   226 ;;
   227 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   228 ;;
   229 ;; *************** function _main *****************
   230 ;; Defined at:
   231 ;;		line 85 in file "main.c"
   232 ;; Parameters:    Size  Location     Type
   233 ;;		None
   234 ;; Auto vars:     Size  Location     Type
   235 ;;  Reverse_in_v    2   34[COMRAM] int 
   236 ;;  _49A_in_valu    2   32[COMRAM] int 
   237 ;;  L_ch_in_valu    2   30[COMRAM] int 
   238 ;;  R_ch_in_valu    2   28[COMRAM] int 
   239 ;; Return value:  Size  Location     Type
   240 ;;                  1    wreg      void 
   241 ;; Registers used:
   242 ;;		wreg, status,2, status,0, cstack
   243 ;; Tracked objects:
   244 ;;		On entry : 0/0
   245 ;;		On exit  : 0/0
   246 ;;		Unchanged: 0/0
   247 ;; Data sizes:     COMRAM   BANK0
   248 ;;      Params:         0       0
   249 ;;      Locals:         8       0
   250 ;;      Temps:          0       0
   251 ;;      Totals:         8       0
   252 ;;Total ram usage:        8 bytes
   253 ;; Hardware stack levels required when called: 6
   254 ;; This function calls:
   255 ;;		_AddLeftBlinks
   256 ;;		_AddRightBlinks
   257 ;;		_GetADCValue
   258 ;;		_InitADC
   259 ;;		_ReversOn
   260 ;;		_Turn_49A
   261 ;; This function is called by:
   262 ;;		Startup code after reset
   263 ;; This function uses a non-reentrant model
   264 ;;
   265                           
   266                           	psect	text0
   267   000120                     __ptext0:
   268                           	callstack 0
   269   000120                     _main:
   270                           	callstack 25
   271   000120                     
   272                           ;main.c: 88:     int Reverse_in_value = 0;
   273   000120  0E00               	movlw	0
   274   000122  6E24               	movwf	(main@Reverse_in_value+1)^0,c
   275   000124  0E00               	movlw	0
   276   000126  6E23               	movwf	main@Reverse_in_value^0,c
   277                           
   278                           ;main.c: 89:     int R_ch_in_value = 0;
   279   000128  0E00               	movlw	0
   280   00012A  6E1E               	movwf	(main@R_ch_in_value+1)^0,c
   281   00012C  0E00               	movlw	0
   282   00012E  6E1D               	movwf	main@R_ch_in_value^0,c
   283                           
   284                           ;main.c: 90:     int L_ch_in_value = 0;
   285   000130  0E00               	movlw	0
   286   000132  6E20               	movwf	(main@L_ch_in_value+1)^0,c
   287   000134  0E00               	movlw	0
   288   000136  6E1F               	movwf	main@L_ch_in_value^0,c
   289   000138                     l1189:
   290                           
   291                           ;main.c: 96:     {;main.c: 99:     PORTAbits.RA4 = 0;
   292   000138  9880               	bcf	128,4,c	;volatile
   293   00013A                     
   294                           ;main.c: 100:     PORTBbits.RB3 = 0;
   295   00013A  9681               	bcf	129,3,c	;volatile
   296   00013C                     
   297                           ;main.c: 101:     PORTAbits.RA7 = 0;
   298   00013C  9E80               	bcf	128,7,c	;volatile
   299   00013E                     
   300                           ;main.c: 103:     InitADC(3<<4|3<<5);
   301   00013E  0E70               	movlw	112
   302   000140  ECC9  F002         	call	_InitADC
   303   000144                     
   304                           ;main.c: 104:     _49A_in_value = GetADCValue(3<<4);
   305   000144  0E30               	movlw	48
   306   000146  EC15  F000         	call	_GetADCValue
   307   00014A  C00A  F021         	movff	?_GetADCValue,main@_49A_in_value
   308   00014E  C00B  F022         	movff	?_GetADCValue+1,main@_49A_in_value+1
   309   000152                     
   310                           ;main.c: 107:     Reverse_in_value = GetADCValue(3<<5);
   311   000152  0E60               	movlw	96
   312   000154  EC15  F000         	call	_GetADCValue
   313   000158  C00A  F023         	movff	?_GetADCValue,main@Reverse_in_value
   314   00015C  C00B  F024         	movff	?_GetADCValue+1,main@Reverse_in_value+1
   315   000160                     
   316                           ;main.c: 110:     if (Reverse_in_value > 155)
   317   000160  BE24               	btfsc	(main@Reverse_in_value+1)^0,7,c
   318   000162  EFBC  F000         	goto	u311
   319   000166  5024               	movf	(main@Reverse_in_value+1)^0,w,c
   320   000168  E109               	bnz	u310
   321   00016A  0E9C               	movlw	156
   322   00016C  5C23               	subwf	main@Reverse_in_value^0,w,c
   323   00016E  A0D8               	btfss	status,0,c
   324   000170  EFBC  F000         	goto	u311
   325   000174  EFBE  F000         	goto	u310
   326   000178                     u311:
   327   000178  EFC2  F000         	goto	l1209
   328   00017C                     u310:
   329   00017C                     
   330                           ;main.c: 111:     {;main.c: 112:      ReversOn();
   331   00017C  ECA8  F002         	call	_ReversOn	;wreg free
   332   000180  EFF2  F000         	goto	l39
   333   000184                     l1209:
   334                           
   335                           ;main.c: 118:           if (_49A_in_value < 10)
   336   000184  BE22               	btfsc	(main@_49A_in_value+1)^0,7,c
   337   000186  EFD0  F000         	goto	u320
   338   00018A  5022               	movf	(main@_49A_in_value+1)^0,w,c
   339   00018C  E107               	bnz	u321
   340   00018E  0E0A               	movlw	10
   341   000190  5C21               	subwf	main@_49A_in_value^0,w,c
   342   000192  B0D8               	btfsc	status,0,c
   343   000194  EFCE  F000         	goto	u321
   344   000198  EFD0  F000         	goto	u320
   345   00019C                     u321:
   346   00019C  EFD4  F000         	goto	l1213
   347   0001A0                     u320:
   348   0001A0                     
   349                           ;main.c: 119:             {;main.c: 120:             Turn_49A();
   350   0001A0  ECAC  F001         	call	_Turn_49A	;wreg free
   351                           
   352                           ;main.c: 121:             }
   353   0001A4  EF9C  F000         	goto	l1189
   354   0001A8                     l1213:
   355   0001A8  042B               	decf	_wasTurningRight^0,w,c
   356   0001AA  A4D8               	btfss	status,2,c
   357   0001AC  EFDA  F000         	goto	u331
   358   0001B0  EFDC  F000         	goto	u330
   359   0001B4                     u331:
   360   0001B4  EFE0  F000         	goto	l1217
   361   0001B8                     u330:
   362   0001B8                     
   363                           ;main.c: 123:             {;main.c: 124:             AddRightBlinks();
   364   0001B8  ECFC  F001         	call	_AddRightBlinks	;wreg free
   365                           
   366                           ;main.c: 125:             }
   367   0001BC  EF9C  F000         	goto	l1189
   368   0001C0                     l1217:
   369   0001C0  042A               	decf	_wasTurningLeft^0,w,c
   370   0001C2  A4D8               	btfss	status,2,c
   371   0001C4  EFE6  F000         	goto	u341
   372   0001C8  EFE8  F000         	goto	u340
   373   0001CC                     u341:
   374   0001CC  EFEC  F000         	goto	l1221
   375   0001D0                     u340:
   376   0001D0                     
   377                           ;main.c: 127:             {;main.c: 128:             AddLeftBlinks();
   378   0001D0  EC46  F002         	call	_AddLeftBlinks	;wreg free
   379                           
   380                           ;main.c: 129:             }
   381   0001D4  EF9C  F000         	goto	l1189
   382   0001D8                     l1221:
   383                           
   384                           ;main.c: 138:             wasTurningLeft = 0;
   385   0001D8  0E00               	movlw	0
   386   0001DA  6E2A               	movwf	_wasTurningLeft^0,c
   387                           
   388                           ;main.c: 139:             wasTurningRight = 0;
   389   0001DC  0E00               	movlw	0
   390   0001DE  6E2B               	movwf	_wasTurningRight^0,c
   391   0001E0  EF9C  F000         	goto	l1189
   392   0001E4                     l39:
   393   0001E4  EF13  F000         	goto	start
   394   0001E8                     __end_of_main:
   395                           	callstack 0
   396                           
   397 ;; *************** function _Turn_49A *****************
   398 ;; Defined at:
   399 ;;		line 186 in file "user.c"
   400 ;; Parameters:    Size  Location     Type
   401 ;;		None
   402 ;; Auto vars:     Size  Location     Type
   403 ;;  Current_valu    2   26[COMRAM] int 
   404 ;; Return value:  Size  Location     Type
   405 ;;                  1    wreg      _Bool 
   406 ;; Registers used:
   407 ;;		wreg, status,2, status,0, cstack
   408 ;; Tracked objects:
   409 ;;		On entry : 0/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMRAM   BANK0
   413 ;;      Params:         0       0
   414 ;;      Locals:         2       0
   415 ;;      Temps:          2       0
   416 ;;      Totals:         4       0
   417 ;;Total ram usage:        4 bytes
   418 ;; Hardware stack levels used: 1
   419 ;; Hardware stack levels required when called: 5
   420 ;; This function calls:
   421 ;;		_GetCurrentValue
   422 ;;		_GetDirection
   423 ;; This function is called by:
   424 ;;		_main
   425 ;; This function uses a non-reentrant model
   426 ;;
   427                           
   428                           	psect	text1
   429   000358                     __ptext1:
   430                           	callstack 0
   431   000358                     _Turn_49A:
   432                           	callstack 25
   433   000358                     
   434                           ;user.c: 189:         PORTAbits.RA7 = 1;
   435   000358  8E80               	bsf	128,7,c	;volatile
   436   00035A                     
   437                           ;user.c: 190:         _delay((unsigned long)((100)*(4000000/4000.0)));
   438   00035A  0E82               	movlw	130
   439   00035C  6E19               	movwf	??_Turn_49A^0,c
   440   00035E  0EDE               	movlw	222
   441   000360                     u357:
   442   000360  2EE8               	decfsz	wreg,f,c
   443   000362  D7FE               	bra	u357
   444   000364  2E19               	decfsz	??_Turn_49A^0,f,c
   445   000366  D7FC               	bra	u357
   446   000368                     
   447                           ;user.c: 192:         int Current_value = GetCurrentValue();
   448   000368  EC90  F002         	call	_GetCurrentValue	;wreg free
   449   00036C  C013  F01B         	movff	?_GetCurrentValue,Turn_49A@Current_value
   450   000370  C014  F01C         	movff	?_GetCurrentValue+1,Turn_49A@Current_value+1
   451   000374                     
   452                           ;user.c: 194:         if (Current_value < 5)
   453   000374  BE1C               	btfsc	(Turn_49A@Current_value+1)^0,7,c
   454   000376  EFC8  F001         	goto	u300
   455   00037A  501C               	movf	(Turn_49A@Current_value+1)^0,w,c
   456   00037C  E107               	bnz	u301
   457   00037E  0E05               	movlw	5
   458   000380  5C1B               	subwf	Turn_49A@Current_value^0,w,c
   459   000382  B0D8               	btfsc	status,0,c
   460   000384  EFC6  F001         	goto	u301
   461   000388  EFC8  F001         	goto	u300
   462   00038C                     u301:
   463   00038C  EFE2  F001         	goto	l112
   464   000390                     u300:
   465   000390                     
   466                           ;user.c: 195:                 {;user.c: 196:                 PORTAbits.RA7 = 1;
   467   000390  8E80               	bsf	128,7,c	;volatile
   468   000392                     
   469                           ;user.c: 198:                 GetDirection();
   470   000392  EC56  F001         	call	_GetDirection	;wreg free
   471   000396                     
   472                           ;user.c: 199:                 _delay((unsigned long)((50)*(4000000/4000.0)));
   473   000396  0E41               	movlw	65
   474   000398  6E19               	movwf	??_Turn_49A^0,c
   475   00039A  0EEE               	movlw	238
   476   00039C                     u367:
   477   00039C  2EE8               	decfsz	wreg,f,c
   478   00039E  D7FE               	bra	u367
   479   0003A0  2E19               	decfsz	??_Turn_49A^0,f,c
   480   0003A2  D7FC               	bra	u367
   481   0003A4  D000               	nop2	
   482   0003A6                     
   483                           ;user.c: 201:                 PORTAbits.RA7 = 0;
   484   0003A6  9E80               	bcf	128,7,c	;volatile
   485   0003A8                     
   486                           ;user.c: 202:                 _delay((unsigned long)((200)*(4000000/4000.0)));
   487   0003A8  0E02               	movlw	2
   488   0003AA  6E1A               	movwf	(??_Turn_49A+1)^0,c
   489   0003AC  0E04               	movlw	4
   490   0003AE  6E19               	movwf	??_Turn_49A^0,c
   491   0003B0  0EBA               	movlw	186
   492   0003B2                     u377:
   493   0003B2  2EE8               	decfsz	wreg,f,c
   494   0003B4  D7FE               	bra	u377
   495   0003B6  2E19               	decfsz	??_Turn_49A^0,f,c
   496   0003B8  D7FC               	bra	u377
   497   0003BA  2E1A               	decfsz	(??_Turn_49A+1)^0,f,c
   498   0003BC  D7FA               	bra	u377
   499   0003BE  D000               	nop2	
   500   0003C0                     l1169:
   501   0003C0  EFFB  F001         	goto	l113
   502   0003C4                     l112:
   503                           
   504                           ;user.c: 208:                 {;user.c: 209:                 PORTAbits.RA7 = 1;
   505   0003C4  8E80               	bsf	128,7,c	;volatile
   506   0003C6                     
   507                           ;user.c: 211:                 GetDirection();
   508   0003C6  EC56  F001         	call	_GetDirection	;wreg free
   509   0003CA                     
   510                           ;user.c: 212:                 _delay((unsigned long)((100)*(4000000/4000.0)));
   511   0003CA  0E82               	movlw	130
   512   0003CC  6E19               	movwf	??_Turn_49A^0,c
   513   0003CE  0EDE               	movlw	222
   514   0003D0                     u387:
   515   0003D0  2EE8               	decfsz	wreg,f,c
   516   0003D2  D7FE               	bra	u387
   517   0003D4  2E19               	decfsz	??_Turn_49A^0,f,c
   518   0003D6  D7FC               	bra	u387
   519   0003D8                     
   520                           ;user.c: 214:                 PORTAbits.RA7 = 0;
   521   0003D8  9E80               	bcf	128,7,c	;volatile
   522   0003DA                     
   523                           ;user.c: 215:                 _delay((unsigned long)((400)*(4000000/4000.0)));
   524   0003DA  0E03               	movlw	3
   525   0003DC  6E1A               	movwf	(??_Turn_49A+1)^0,c
   526   0003DE  0E08               	movlw	8
   527   0003E0  6E19               	movwf	??_Turn_49A^0,c
   528   0003E2  0E77               	movlw	119
   529   0003E4                     u397:
   530   0003E4  2EE8               	decfsz	wreg,f,c
   531   0003E6  D7FE               	bra	u397
   532   0003E8  2E19               	decfsz	??_Turn_49A^0,f,c
   533   0003EA  D7FC               	bra	u397
   534   0003EC  2E1A               	decfsz	(??_Turn_49A+1)^0,f,c
   535   0003EE  D7FA               	bra	u397
   536   0003F0  F000               	nop	
   537   0003F2  EFE0  F001         	goto	l1169
   538   0003F6                     l113:
   539   0003F6  0012               	return		;funcret
   540   0003F8                     __end_of_Turn_49A:
   541                           	callstack 0
   542                           
   543 ;; *************** function _GetDirection *****************
   544 ;; Defined at:
   545 ;;		line 167 in file "user.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;		None
   548 ;; Auto vars:     Size  Location     Type
   549 ;;		None
   550 ;; Return value:  Size  Location     Type
   551 ;;                  1    wreg      _Bool 
   552 ;; Registers used:
   553 ;;		wreg, status,2, status,0, cstack
   554 ;; Tracked objects:
   555 ;;		On entry : 0/0
   556 ;;		On exit  : 0/0
   557 ;;		Unchanged: 0/0
   558 ;; Data sizes:     COMRAM   BANK0
   559 ;;      Params:         0       0
   560 ;;      Locals:         0       0
   561 ;;      Temps:          0       0
   562 ;;      Totals:         0       0
   563 ;;Total ram usage:        0 bytes
   564 ;; Hardware stack levels used: 1
   565 ;; Hardware stack levels required when called: 4
   566 ;; This function calls:
   567 ;;		_GetADCValue
   568 ;;		_InitADC
   569 ;; This function is called by:
   570 ;;		_Turn_49A
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574                           	psect	text2
   575   0002AC                     __ptext2:
   576                           	callstack 0
   577   0002AC                     _GetDirection:
   578                           	callstack 25
   579   0002AC                     
   580                           ;user.c: 169:     InitADC(1<<2|3<<3);
   581   0002AC  0E1C               	movlw	28
   582   0002AE  ECC9  F002         	call	_InitADC
   583                           
   584                           ;user.c: 170:     R_ch_in_value = GetADCValue(1<<2);
   585   0002B2  0E04               	movlw	4
   586   0002B4  EC15  F000         	call	_GetADCValue
   587   0002B8  C00A  F027         	movff	?_GetADCValue,_R_ch_in_value
   588   0002BC  C00B  F028         	movff	?_GetADCValue+1,_R_ch_in_value+1
   589                           
   590                           ;user.c: 171:     L_ch_in_value = GetADCValue(3<<3);
   591   0002C0  0E18               	movlw	24
   592   0002C2  EC15  F000         	call	_GetADCValue
   593   0002C6  C00A  F025         	movff	?_GetADCValue,_L_ch_in_value
   594   0002CA  C00B  F026         	movff	?_GetADCValue+1,_L_ch_in_value+1
   595   0002CE                     
   596                           ;user.c: 173:     if (R_ch_in_value > 10 && R_ch_in_value < 10)
   597   0002CE  BE28               	btfsc	(_R_ch_in_value+1)^0,7,c
   598   0002D0  EF73  F001         	goto	u261
   599   0002D4  5028               	movf	(_R_ch_in_value+1)^0,w,c
   600   0002D6  E109               	bnz	u260
   601   0002D8  0E0B               	movlw	11
   602   0002DA  5C27               	subwf	_R_ch_in_value^0,w,c
   603   0002DC  A0D8               	btfss	status,0,c
   604   0002DE  EF73  F001         	goto	u261
   605   0002E2  EF75  F001         	goto	u260
   606   0002E6                     u261:
   607   0002E6  EF87  F001         	goto	l1137
   608   0002EA                     u260:
   609   0002EA  BE28               	btfsc	(_R_ch_in_value+1)^0,7,c
   610   0002EC  EF83  F001         	goto	u270
   611   0002F0  5028               	movf	(_R_ch_in_value+1)^0,w,c
   612   0002F2  E107               	bnz	u271
   613   0002F4  0E0A               	movlw	10
   614   0002F6  5C27               	subwf	_R_ch_in_value^0,w,c
   615   0002F8  B0D8               	btfsc	status,0,c
   616   0002FA  EF81  F001         	goto	u271
   617   0002FE  EF83  F001         	goto	u270
   618   000302                     u271:
   619   000302  EF87  F001         	goto	l1137
   620   000306                     u270:
   621   000306                     
   622                           ;user.c: 174:         {return wasTurningRight = 1;};	Return value of _GetDirection is ne
      +                          ver used
   623   000306  0E01               	movlw	1
   624   000308  6E2B               	movwf	_wasTurningRight^0,c
   625   00030A  EFAB  F001         	goto	l106
   626   00030E                     l1137:
   627   00030E  BE28               	btfsc	(_R_ch_in_value+1)^0,7,c
   628   000310  EF95  F001         	goto	u280
   629   000314  5028               	movf	(_R_ch_in_value+1)^0,w,c
   630   000316  E107               	bnz	u281
   631   000318  0E0A               	movlw	10
   632   00031A  5C27               	subwf	_R_ch_in_value^0,w,c
   633   00031C  B0D8               	btfsc	status,0,c
   634   00031E  EF93  F001         	goto	u281
   635   000322  EF95  F001         	goto	u280
   636   000326                     u281:
   637   000326  EFA7  F001         	goto	l1147
   638   00032A                     u280:
   639   00032A  BE28               	btfsc	(_R_ch_in_value+1)^0,7,c
   640   00032C  EFA1  F001         	goto	u291
   641   000330  5028               	movf	(_R_ch_in_value+1)^0,w,c
   642   000332  E109               	bnz	u290
   643   000334  0E0B               	movlw	11
   644   000336  5C27               	subwf	_R_ch_in_value^0,w,c
   645   000338  A0D8               	btfss	status,0,c
   646   00033A  EFA1  F001         	goto	u291
   647   00033E  EFA3  F001         	goto	u290
   648   000342                     u291:
   649   000342  EFA7  F001         	goto	l1147
   650   000346                     u290:
   651   000346                     
   652                           ;user.c: 176:         {return wasTurningLeft = 1;};	Return value of _GetDirection is nev
      +                          er used
   653   000346  0E01               	movlw	1
   654   000348  6E2A               	movwf	_wasTurningLeft^0,c
   655   00034A  EFAB  F001         	goto	l106
   656   00034E                     l1147:
   657                           
   658                           ;user.c: 178:     {wasTurningRight = 0;
   659   00034E  0E00               	movlw	0
   660   000350  6E2B               	movwf	_wasTurningRight^0,c
   661                           
   662                           ;user.c: 179:     wasTurningLeft = 0;
   663   000352  0E00               	movlw	0
   664   000354  6E2A               	movwf	_wasTurningLeft^0,c
   665   000356                     l106:
   666   000356  0012               	return		;funcret
   667   000358                     __end_of_GetDirection:
   668                           	callstack 0
   669                           
   670 ;; *************** function _GetCurrentValue *****************
   671 ;; Defined at:
   672 ;;		line 157 in file "user.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;		None
   675 ;; Auto vars:     Size  Location     Type
   676 ;;  ADC1_value      2   22[COMRAM] int 
   677 ;;  ADC0_value      2   20[COMRAM] int 
   678 ;; Return value:  Size  Location     Type
   679 ;;                  2   18[COMRAM] int 
   680 ;; Registers used:
   681 ;;		wreg, status,2, status,0, cstack
   682 ;; Tracked objects:
   683 ;;		On entry : 0/0
   684 ;;		On exit  : 0/0
   685 ;;		Unchanged: 0/0
   686 ;; Data sizes:     COMRAM   BANK0
   687 ;;      Params:         2       0
   688 ;;      Locals:         4       0
   689 ;;      Temps:          0       0
   690 ;;      Totals:         6       0
   691 ;;Total ram usage:        6 bytes
   692 ;; Hardware stack levels used: 1
   693 ;; Hardware stack levels required when called: 4
   694 ;; This function calls:
   695 ;;		_GetADCValue
   696 ;;		_InitADC
   697 ;; This function is called by:
   698 ;;		_Turn_49A
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           	psect	text3
   703   000520                     __ptext3:
   704                           	callstack 0
   705   000520                     _GetCurrentValue:
   706                           	callstack 25
   707   000520                     
   708                           ;user.c: 159:     InitADC(1<<0|1<<1);
   709   000520  0E03               	movlw	3
   710   000522  ECC9  F002         	call	_InitADC
   711                           
   712                           ;user.c: 160:     int ADC0_value = GetADCValue(1<<0);
   713   000526  0E01               	movlw	1
   714   000528  EC15  F000         	call	_GetADCValue
   715   00052C  C00A  F015         	movff	?_GetADCValue,GetCurrentValue@ADC0_value
   716   000530  C00B  F016         	movff	?_GetADCValue+1,GetCurrentValue@ADC0_value+1
   717                           
   718                           ;user.c: 161:     int ADC1_value = GetADCValue(1<<1);
   719   000534  0E02               	movlw	2
   720   000536  EC15  F000         	call	_GetADCValue
   721   00053A  C00A  F017         	movff	?_GetADCValue,GetCurrentValue@ADC1_value
   722   00053E  C00B  F018         	movff	?_GetADCValue+1,GetCurrentValue@ADC1_value+1
   723   000542                     
   724                           ;user.c: 162:     return (ADC0_value - ADC1_value);
   725   000542  5017               	movf	GetCurrentValue@ADC1_value^0,w,c
   726   000544  5C15               	subwf	GetCurrentValue@ADC0_value^0,w,c
   727   000546  6E13               	movwf	?_GetCurrentValue^0,c
   728   000548  5018               	movf	(GetCurrentValue@ADC1_value+1)^0,w,c
   729   00054A  5816               	subwfb	(GetCurrentValue@ADC0_value+1)^0,w,c
   730   00054C  6E14               	movwf	(?_GetCurrentValue+1)^0,c
   731   00054E  0012               	return		;funcret
   732   000550                     __end_of_GetCurrentValue:
   733                           	callstack 0
   734                           
   735 ;; *************** function _InitADC *****************
   736 ;; Defined at:
   737 ;;		line 51 in file "user.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;  Channel         1    wreg     unsigned char 
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  Channel         1    1[COMRAM] unsigned char 
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      void 
   744 ;; Registers used:
   745 ;;		wreg, status,2, status,0
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0
   751 ;;      Params:         0       0
   752 ;;      Locals:         1       0
   753 ;;      Temps:          0       0
   754 ;;      Totals:         1       0
   755 ;;Total ram usage:        1 bytes
   756 ;; Hardware stack levels used: 1
   757 ;; Hardware stack levels required when called: 2
   758 ;; This function calls:
   759 ;;		Nothing
   760 ;; This function is called by:
   761 ;;		_main
   762 ;;		_GetCurrentValue
   763 ;;		_GetDirection
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           	psect	text4
   768   000592                     __ptext4:
   769                           	callstack 0
   770   000592                     _InitADC:
   771                           	callstack 26
   772                           
   773                           ;incstack = 0
   774                           ;InitADC@Channel stored from wreg
   775   000592  6E02               	movwf	InitADC@Channel^0,c
   776   000594                     
   777                           ;user.c: 51: void InitADC(unsigned char Channel);user.c: 52: {;user.c: 55:     ADCON1 = 
      +                          0b00000000;
   778   000594  0E00               	movlw	0
   779   000596  6EC1               	movwf	193,c	;volatile
   780                           
   781                           ;user.c: 59:     ADCON0 = 0b00000000;
   782   000598  0E00               	movlw	0
   783   00059A  6EC2               	movwf	194,c	;volatile
   784   00059C                     
   785                           ;user.c: 60:     ADCON0 |= Channel;
   786   00059C  5002               	movf	InitADC@Channel^0,w,c	;volatile
   787   00059E  12C2               	iorwf	194,f,c	;volatile
   788   0005A0                     
   789                           ;user.c: 77:     ADCON2 = 0b00000111;
   790   0005A0  0E07               	movlw	7
   791   0005A2  6EC0               	movwf	192,c	;volatile
   792   0005A4  0012               	return		;funcret
   793   0005A6                     __end_of_InitADC:
   794                           	callstack 0
   795                           
   796 ;; *************** function _GetADCValue *****************
   797 ;; Defined at:
   798 ;;		line 121 in file "user.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;  Channel         1    wreg     unsigned char 
   801 ;; Auto vars:     Size  Location     Type
   802 ;;  Channel         1   13[COMRAM] unsigned char 
   803 ;;  temp_2          2   16[COMRAM] int 
   804 ;;  temp_1          2   14[COMRAM] int 
   805 ;; Return value:  Size  Location     Type
   806 ;;                  2    9[COMRAM] int 
   807 ;; Registers used:
   808 ;;		wreg, status,2, status,0, cstack
   809 ;; Tracked objects:
   810 ;;		On entry : 0/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMRAM   BANK0
   814 ;;      Params:         2       0
   815 ;;      Locals:         5       0
   816 ;;      Temps:          2       0
   817 ;;      Totals:         9       0
   818 ;;Total ram usage:        9 bytes
   819 ;; Hardware stack levels used: 1
   820 ;; Hardware stack levels required when called: 3
   821 ;; This function calls:
   822 ;;		___awdiv
   823 ;; This function is called by:
   824 ;;		_main
   825 ;;		_GetCurrentValue
   826 ;;		_GetDirection
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text5
   831   00002A                     __ptext5:
   832                           	callstack 0
   833   00002A                     _GetADCValue:
   834                           	callstack 25
   835                           
   836                           ;incstack = 0
   837                           ;GetADCValue@Channel stored from wreg
   838   00002A  6E0E               	movwf	GetADCValue@Channel^0,c
   839   00002C                     
   840                           ;user.c: 124:     int temp_2 =0;
   841   00002C  0E00               	movlw	0
   842   00002E  6E12               	movwf	(GetADCValue@temp_2+1)^0,c
   843   000030  0E00               	movlw	0
   844   000032  6E11               	movwf	GetADCValue@temp_2^0,c
   845   000034                     
   846                           ;user.c: 125:     ADCON0 &= 0b11110011;
   847   000034  0EF3               	movlw	243
   848   000036  16C2               	andwf	194,f,c	;volatile
   849                           
   850                           ;user.c: 126:     switch(Channel)
   851   000038  EF31  F000         	goto	l1097
   852   00003C                     l1083:
   853   00003C  50C2               	movf	194,w,c	;volatile
   854   00003E  EF4E  F000         	goto	l1099
   855   000042                     l1085:
   856   000042  84C2               	bsf	194,2,c	;volatile
   857   000044  EF4E  F000         	goto	l1099
   858   000048                     l1087:
   859   000048  86C2               	bsf	194,3,c	;volatile
   860   00004A  EF4E  F000         	goto	l1099
   861   00004E                     l1089:
   862   00004E  0E0C               	movlw	12
   863   000050  12C2               	iorwf	194,f,c	;volatile
   864   000052  EF4E  F000         	goto	l1099
   865   000056                     l1091:
   866   000056  0E00               	movlw	0
   867   000058  6E0B               	movwf	(?_GetADCValue+1)^0,c
   868   00005A  0E00               	movlw	0
   869   00005C  6E0A               	movwf	?_GetADCValue^0,c
   870   00005E  EF8F  F000         	goto	l93
   871   000062                     l1097:
   872   000062  500E               	movf	GetADCValue@Channel^0,w,c
   873   000064  6E0C               	movwf	??_GetADCValue^0,c
   874   000066  6A0D               	clrf	(??_GetADCValue+1)^0,c
   875                           
   876                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   877                           ; Switch size 1, requested type "simple"
   878                           ; Number of cases is 1, Range of values is 0 to 0
   879                           ; switch strategies available:
   880                           ; Name         Instructions Cycles
   881                           ; simple_byte            4     3 (average)
   882                           ;	Chosen strategy is simple_byte
   883   000068  500D               	movf	(??_GetADCValue+1)^0,w,c
   884   00006A  0A00               	xorlw	0	; case 0
   885   00006C  B4D8               	btfsc	status,2,c
   886   00006E  EF3B  F000         	goto	l1227
   887   000072  EF2B  F000         	goto	l1091
   888   000076                     l1227:
   889                           
   890                           ; Switch size 1, requested type "simple"
   891                           ; Number of cases is 4, Range of values is 1 to 24
   892                           ; switch strategies available:
   893                           ; Name         Instructions Cycles
   894                           ; simple_byte           13     7 (average)
   895                           ;	Chosen strategy is simple_byte
   896   000076  500C               	movf	??_GetADCValue^0,w,c
   897   000078  0A01               	xorlw	1	; case 1
   898   00007A  B4D8               	btfsc	status,2,c
   899   00007C  EF1E  F000         	goto	l1083
   900   000080  0A03               	xorlw	3	; case 2
   901   000082  B4D8               	btfsc	status,2,c
   902   000084  EF21  F000         	goto	l1085
   903   000088  0A06               	xorlw	6	; case 4
   904   00008A  B4D8               	btfsc	status,2,c
   905   00008C  EF24  F000         	goto	l1087
   906   000090  0A1C               	xorlw	28	; case 24
   907   000092  B4D8               	btfsc	status,2,c
   908   000094  EF27  F000         	goto	l1089
   909   000098  EF2B  F000         	goto	l1091
   910   00009C                     l1099:
   911                           
   912                           ;user.c: 135:     _delay((unsigned long)((10)*(4000000/4000.0)));
   913   00009C  0E0D               	movlw	13
   914   00009E  6E0C               	movwf	??_GetADCValue^0,c
   915   0000A0  0EFC               	movlw	252
   916   0000A2                     u407:
   917   0000A2  2EE8               	decfsz	wreg,f,c
   918   0000A4  D7FE               	bra	u407
   919   0000A6  2E0C               	decfsz	??_GetADCValue^0,f,c
   920   0000A8  D7FC               	bra	u407
   921   0000AA                     
   922                           ;user.c: 136:  GO_nDONE = 1;
   923   0000AA  82C2               	bsf	4034,1,c	;volatile
   924   0000AC                     l94:
   925                           
   926                           ;user.c: 137:  while(GO_nDONE)
   927   0000AC  B2C2               	btfsc	4034,1,c	;volatile
   928   0000AE  EF5B  F000         	goto	u241
   929   0000B2  EF5D  F000         	goto	u240
   930   0000B6                     u241:
   931   0000B6  EF56  F000         	goto	l94
   932   0000BA                     u240:
   933   0000BA                     
   934                           ;user.c: 141:     temp_1 = ((ADRESH<<8)+ADRESL);
   935   0000BA  50C4               	movf	196,w,c	;volatile
   936   0000BC  6E0D               	movwf	(??_GetADCValue+1)^0,c
   937   0000BE  6A0C               	clrf	??_GetADCValue^0,c
   938   0000C0  50C3               	movf	195,w,c	;volatile
   939   0000C2  240C               	addwf	??_GetADCValue^0,w,c
   940   0000C4  6E0F               	movwf	GetADCValue@temp_1^0,c
   941   0000C6  0E00               	movlw	0
   942   0000C8  200D               	addwfc	(??_GetADCValue+1)^0,w,c
   943   0000CA  6E10               	movwf	(GetADCValue@temp_1+1)^0,c
   944   0000CC                     
   945                           ;user.c: 143:     _delay((unsigned long)((20)*(4000000/4000.0)));
   946   0000CC  0E1A               	movlw	26
   947   0000CE  6E0C               	movwf	??_GetADCValue^0,c
   948   0000D0  0EF8               	movlw	248
   949   0000D2                     u417:
   950   0000D2  2EE8               	decfsz	wreg,f,c
   951   0000D4  D7FE               	bra	u417
   952   0000D6  2E0C               	decfsz	??_GetADCValue^0,f,c
   953   0000D8  D7FC               	bra	u417
   954   0000DA  D000               	nop2	
   955   0000DC                     
   956                           ;user.c: 144:  GO_nDONE = 1;
   957   0000DC  82C2               	bsf	4034,1,c	;volatile
   958   0000DE                     l97:
   959                           
   960                           ;user.c: 145:  while(GO_nDONE)
   961   0000DE  B2C2               	btfsc	4034,1,c	;volatile
   962   0000E0  EF74  F000         	goto	u251
   963   0000E4  EF76  F000         	goto	u250
   964   0000E8                     u251:
   965   0000E8  EF6F  F000         	goto	l97
   966   0000EC                     u250:
   967   0000EC                     
   968                           ;user.c: 148:     temp_2 = ((ADRESH<<8)+ADRESL);
   969   0000EC  50C4               	movf	196,w,c	;volatile
   970   0000EE  6E0D               	movwf	(??_GetADCValue+1)^0,c
   971   0000F0  6A0C               	clrf	??_GetADCValue^0,c
   972   0000F2  50C3               	movf	195,w,c	;volatile
   973   0000F4  240C               	addwf	??_GetADCValue^0,w,c
   974   0000F6  6E11               	movwf	GetADCValue@temp_2^0,c
   975   0000F8  0E00               	movlw	0
   976   0000FA  200D               	addwfc	(??_GetADCValue+1)^0,w,c
   977   0000FC  6E12               	movwf	(GetADCValue@temp_2+1)^0,c
   978   0000FE                     
   979                           ;user.c: 150:     return ((temp_1 + temp_2)/2);
   980   0000FE  5011               	movf	GetADCValue@temp_2^0,w,c
   981   000100  240F               	addwf	GetADCValue@temp_1^0,w,c
   982   000102  6E02               	movwf	___awdiv@dividend^0,c
   983   000104  5012               	movf	(GetADCValue@temp_2+1)^0,w,c
   984   000106  2010               	addwfc	(GetADCValue@temp_1+1)^0,w,c
   985   000108  6E03               	movwf	(___awdiv@dividend+1)^0,c
   986   00010A  0E00               	movlw	0
   987   00010C  6E05               	movwf	(___awdiv@divisor+1)^0,c
   988   00010E  0E02               	movlw	2
   989   000110  6E04               	movwf	___awdiv@divisor^0,c
   990   000112  ECF4  F000         	call	___awdiv	;wreg free
   991   000116  C002  F00A         	movff	?___awdiv,?_GetADCValue
   992   00011A  C003  F00B         	movff	?___awdiv+1,?_GetADCValue+1
   993   00011E                     l93:
   994   00011E  0012               	return		;funcret
   995   000120                     __end_of_GetADCValue:
   996                           	callstack 0
   997                           
   998 ;; *************** function ___awdiv *****************
   999 ;; Defined at:
  1000 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;  dividend        2    1[COMRAM] int 
  1003 ;;  divisor         2    3[COMRAM] int 
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;  quotient        2    7[COMRAM] int 
  1006 ;;  sign            1    6[COMRAM] unsigned char 
  1007 ;;  counter         1    5[COMRAM] unsigned char 
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  2    1[COMRAM] int 
  1010 ;; Registers used:
  1011 ;;		wreg, status,2, status,0
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMRAM   BANK0
  1017 ;;      Params:         4       0
  1018 ;;      Locals:         4       0
  1019 ;;      Temps:          0       0
  1020 ;;      Totals:         8       0
  1021 ;;Total ram usage:        8 bytes
  1022 ;; Hardware stack levels used: 1
  1023 ;; Hardware stack levels required when called: 2
  1024 ;; This function calls:
  1025 ;;		Nothing
  1026 ;; This function is called by:
  1027 ;;		_GetADCValue
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           	psect	text6
  1032   0001E8                     __ptext6:
  1033                           	callstack 0
  1034   0001E8                     ___awdiv:
  1035                           	callstack 25
  1036   0001E8  0E00               	movlw	0
  1037   0001EA  6E07               	movwf	___awdiv@sign^0,c
  1038   0001EC  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
  1039   0001EE  EFFD  F000         	goto	u180
  1040   0001F2  EFFB  F000         	goto	u181
  1041   0001F6                     u181:
  1042   0001F6  EF03  F001         	goto	l1043
  1043   0001FA                     u180:
  1044   0001FA  6C04               	negf	___awdiv@divisor^0,c
  1045   0001FC  1E05               	comf	(___awdiv@divisor+1)^0,f,c
  1046   0001FE  B0D8               	btfsc	status,0,c
  1047   000200  2A05               	incf	(___awdiv@divisor+1)^0,f,c
  1048   000202  0E01               	movlw	1
  1049   000204  6E07               	movwf	___awdiv@sign^0,c
  1050   000206                     l1043:
  1051   000206  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
  1052   000208  EF0A  F001         	goto	u190
  1053   00020C  EF08  F001         	goto	u191
  1054   000210                     u191:
  1055   000210  EF10  F001         	goto	l1049
  1056   000214                     u190:
  1057   000214  6C02               	negf	___awdiv@dividend^0,c
  1058   000216  1E03               	comf	(___awdiv@dividend+1)^0,f,c
  1059   000218  B0D8               	btfsc	status,0,c
  1060   00021A  2A03               	incf	(___awdiv@dividend+1)^0,f,c
  1061   00021C  0E01               	movlw	1
  1062   00021E  1A07               	xorwf	___awdiv@sign^0,f,c
  1063   000220                     l1049:
  1064   000220  0E00               	movlw	0
  1065   000222  6E09               	movwf	(___awdiv@quotient+1)^0,c
  1066   000224  0E00               	movlw	0
  1067   000226  6E08               	movwf	___awdiv@quotient^0,c
  1068   000228  5004               	movf	___awdiv@divisor^0,w,c
  1069   00022A  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
  1070   00022C  B4D8               	btfsc	status,2,c
  1071   00022E  EF1B  F001         	goto	u201
  1072   000232  EF1D  F001         	goto	u200
  1073   000236                     u201:
  1074   000236  EF45  F001         	goto	l1071
  1075   00023A                     u200:
  1076   00023A  0E01               	movlw	1
  1077   00023C  6E06               	movwf	___awdiv@counter^0,c
  1078   00023E  EF25  F001         	goto	l1057
  1079   000242                     l1055:
  1080   000242  90D8               	bcf	status,0,c
  1081   000244  3604               	rlcf	___awdiv@divisor^0,f,c
  1082   000246  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
  1083   000248  2A06               	incf	___awdiv@counter^0,f,c
  1084   00024A                     l1057:
  1085   00024A  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
  1086   00024C  EF2A  F001         	goto	u211
  1087   000250  EF2C  F001         	goto	u210
  1088   000254                     u211:
  1089   000254  EF21  F001         	goto	l1055
  1090   000258                     u210:
  1091   000258                     l1059:
  1092   000258  90D8               	bcf	status,0,c
  1093   00025A  3608               	rlcf	___awdiv@quotient^0,f,c
  1094   00025C  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
  1095   00025E  5004               	movf	___awdiv@divisor^0,w,c
  1096   000260  5C02               	subwf	___awdiv@dividend^0,w,c
  1097   000262  5005               	movf	(___awdiv@divisor+1)^0,w,c
  1098   000264  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
  1099   000266  A0D8               	btfss	status,0,c
  1100   000268  EF38  F001         	goto	u221
  1101   00026C  EF3A  F001         	goto	u220
  1102   000270                     u221:
  1103   000270  EF3F  F001         	goto	l1067
  1104   000274                     u220:
  1105   000274  5004               	movf	___awdiv@divisor^0,w,c
  1106   000276  5E02               	subwf	___awdiv@dividend^0,f,c
  1107   000278  5005               	movf	(___awdiv@divisor+1)^0,w,c
  1108   00027A  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
  1109   00027C  8008               	bsf	___awdiv@quotient^0,0,c
  1110   00027E                     l1067:
  1111   00027E  90D8               	bcf	status,0,c
  1112   000280  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
  1113   000282  3204               	rrcf	___awdiv@divisor^0,f,c
  1114   000284  2E06               	decfsz	___awdiv@counter^0,f,c
  1115   000286  EF2C  F001         	goto	l1059
  1116   00028A                     l1071:
  1117   00028A  5007               	movf	___awdiv@sign^0,w,c
  1118   00028C  B4D8               	btfsc	status,2,c
  1119   00028E  EF4B  F001         	goto	u231
  1120   000292  EF4D  F001         	goto	u230
  1121   000296                     u231:
  1122   000296  EF51  F001         	goto	l1075
  1123   00029A                     u230:
  1124   00029A  6C08               	negf	___awdiv@quotient^0,c
  1125   00029C  1E09               	comf	(___awdiv@quotient+1)^0,f,c
  1126   00029E  B0D8               	btfsc	status,0,c
  1127   0002A0  2A09               	incf	(___awdiv@quotient+1)^0,f,c
  1128   0002A2                     l1075:
  1129   0002A2  C008  F002         	movff	___awdiv@quotient,?___awdiv
  1130   0002A6  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
  1131   0002AA  0012               	return		;funcret
  1132   0002AC                     __end_of___awdiv:
  1133                           	callstack 0
  1134                           
  1135 ;; *************** function _ReversOn *****************
  1136 ;; Defined at:
  1137 ;;		line 265 in file "user.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;		None
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;		None
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMRAM   BANK0
  1151 ;;      Params:         0       0
  1152 ;;      Locals:         0       0
  1153 ;;      Temps:          2       0
  1154 ;;      Totals:         2       0
  1155 ;;Total ram usage:        2 bytes
  1156 ;; Hardware stack levels used: 1
  1157 ;; Hardware stack levels required when called: 2
  1158 ;; This function calls:
  1159 ;;		Nothing
  1160 ;; This function is called by:
  1161 ;;		_main
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           
  1165                           	psect	text7
  1166   000550                     __ptext7:
  1167                           	callstack 0
  1168   000550                     _ReversOn:
  1169                           	callstack 28
  1170   000550                     
  1171                           ;user.c: 270:             _delay((unsigned long)((120)*(4000000/4000.0)));
  1172   000550  0E9C               	movlw	156
  1173   000552  6E02               	movwf	??_ReversOn^0,c
  1174   000554  0ED7               	movlw	215
  1175   000556                     u427:
  1176   000556  2EE8               	decfsz	wreg,f,c
  1177   000558  D7FE               	bra	u427
  1178   00055A  2E02               	decfsz	??_ReversOn^0,f,c
  1179   00055C  D7FC               	bra	u427
  1180   00055E  F000               	nop	
  1181                           
  1182                           ;user.c: 273:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1183   000560  0E03               	movlw	3
  1184   000562  6E03               	movwf	(??_ReversOn+1)^0,c
  1185   000564  0E8A               	movlw	138
  1186   000566  6E02               	movwf	??_ReversOn^0,c
  1187   000568  0E56               	movlw	86
  1188   00056A                     u437:
  1189   00056A  2EE8               	decfsz	wreg,f,c
  1190   00056C  D7FE               	bra	u437
  1191   00056E  2E02               	decfsz	??_ReversOn^0,f,c
  1192   000570  D7FC               	bra	u437
  1193   000572  2E03               	decfsz	(??_ReversOn+1)^0,f,c
  1194   000574  D7FA               	bra	u437
  1195   000576  0012               	return		;funcret
  1196   000578                     __end_of_ReversOn:
  1197                           	callstack 0
  1198                           
  1199 ;; *************** function _AddRightBlinks *****************
  1200 ;; Defined at:
  1201 ;;		line 223 in file "user.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;		None
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;		None
  1206 ;; Return value:  Size  Location     Type
  1207 ;;                  1    wreg      _Bool 
  1208 ;; Registers used:
  1209 ;;		wreg, status,2
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMRAM   BANK0
  1215 ;;      Params:         0       0
  1216 ;;      Locals:         0       0
  1217 ;;      Temps:          2       0
  1218 ;;      Totals:         2       0
  1219 ;;Total ram usage:        2 bytes
  1220 ;; Hardware stack levels used: 1
  1221 ;; Hardware stack levels required when called: 2
  1222 ;; This function calls:
  1223 ;;		Nothing
  1224 ;; This function is called by:
  1225 ;;		_main
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           	psect	text8
  1230   0003F8                     __ptext8:
  1231                           	callstack 0
  1232   0003F8                     _AddRightBlinks:
  1233                           	callstack 28
  1234   0003F8                     
  1235                           ;user.c: 227:             PORTAbits.RA4 = 1;
  1236   0003F8  8880               	bsf	128,4,c	;volatile
  1237   0003FA                     
  1238                           ;user.c: 228:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1239   0003FA  0E02               	movlw	2
  1240   0003FC  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1241   0003FE  0E86               	movlw	134
  1242   000400  6E02               	movwf	??_AddRightBlinks^0,c
  1243   000402  0E99               	movlw	153
  1244   000404                     u447:
  1245   000404  2EE8               	decfsz	wreg,f,c
  1246   000406  D7FE               	bra	u447
  1247   000408  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1248   00040A  D7FC               	bra	u447
  1249   00040C  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1250   00040E  D7FA               	bra	u447
  1251   000410  F000               	nop	
  1252   000412                     
  1253                           ;user.c: 229:             PORTAbits.RA4 = 0;
  1254   000412  9880               	bcf	128,4,c	;volatile
  1255                           
  1256                           ;user.c: 230:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1257   000414  0E03               	movlw	3
  1258   000416  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1259   000418  0E8A               	movlw	138
  1260   00041A  6E02               	movwf	??_AddRightBlinks^0,c
  1261   00041C  0E56               	movlw	86
  1262   00041E                     u457:
  1263   00041E  2EE8               	decfsz	wreg,f,c
  1264   000420  D7FE               	bra	u457
  1265   000422  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1266   000424  D7FC               	bra	u457
  1267   000426  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1268   000428  D7FA               	bra	u457
  1269   00042A                     
  1270                           ;user.c: 231:             PORTAbits.RA4 = 1;
  1271   00042A  8880               	bsf	128,4,c	;volatile
  1272                           
  1273                           ;user.c: 232:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1274   00042C  0E02               	movlw	2
  1275   00042E  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1276   000430  0E86               	movlw	134
  1277   000432  6E02               	movwf	??_AddRightBlinks^0,c
  1278   000434  0E99               	movlw	153
  1279   000436                     u467:
  1280   000436  2EE8               	decfsz	wreg,f,c
  1281   000438  D7FE               	bra	u467
  1282   00043A  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1283   00043C  D7FC               	bra	u467
  1284   00043E  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1285   000440  D7FA               	bra	u467
  1286   000442  F000               	nop	
  1287   000444                     
  1288                           ;user.c: 233:             PORTAbits.RA4 = 0;
  1289   000444  9880               	bcf	128,4,c	;volatile
  1290                           
  1291                           ;user.c: 234:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1292   000446  0E03               	movlw	3
  1293   000448  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1294   00044A  0E8A               	movlw	138
  1295   00044C  6E02               	movwf	??_AddRightBlinks^0,c
  1296   00044E  0E56               	movlw	86
  1297   000450                     u477:
  1298   000450  2EE8               	decfsz	wreg,f,c
  1299   000452  D7FE               	bra	u477
  1300   000454  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1301   000456  D7FC               	bra	u477
  1302   000458  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1303   00045A  D7FA               	bra	u477
  1304   00045C                     
  1305                           ;user.c: 235:             PORTAbits.RA4 = 1;
  1306   00045C  8880               	bsf	128,4,c	;volatile
  1307                           
  1308                           ;user.c: 236:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1309   00045E  0E02               	movlw	2
  1310   000460  6E03               	movwf	(??_AddRightBlinks+1)^0,c
  1311   000462  0E86               	movlw	134
  1312   000464  6E02               	movwf	??_AddRightBlinks^0,c
  1313   000466  0E99               	movlw	153
  1314   000468                     u487:
  1315   000468  2EE8               	decfsz	wreg,f,c
  1316   00046A  D7FE               	bra	u487
  1317   00046C  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1318   00046E  D7FC               	bra	u487
  1319   000470  2E03               	decfsz	(??_AddRightBlinks+1)^0,f,c
  1320   000472  D7FA               	bra	u487
  1321   000474  F000               	nop	
  1322   000476                     
  1323                           ;user.c: 237:             PORTAbits.RA4 = 0;
  1324   000476  9880               	bcf	128,4,c	;volatile
  1325                           
  1326                           ;user.c: 238:             _delay((unsigned long)((100)*(4000000/4000.0)));
  1327   000478  0E82               	movlw	130
  1328   00047A  6E02               	movwf	??_AddRightBlinks^0,c
  1329   00047C  0EDE               	movlw	222
  1330   00047E                     u497:
  1331   00047E  2EE8               	decfsz	wreg,f,c
  1332   000480  D7FE               	bra	u497
  1333   000482  2E02               	decfsz	??_AddRightBlinks^0,f,c
  1334   000484  D7FC               	bra	u497
  1335   000486                     
  1336                           ;user.c: 239:             return wasTurningRight = 0;;	Return value of _AddRightBlinks i
      +                          s never used
  1337   000486  0E00               	movlw	0
  1338   000488  6E2B               	movwf	_wasTurningRight^0,c
  1339   00048A  0012               	return		;funcret
  1340   00048C                     __end_of_AddRightBlinks:
  1341                           	callstack 0
  1342                           
  1343 ;; *************** function _AddLeftBlinks *****************
  1344 ;; Defined at:
  1345 ;;		line 244 in file "user.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;		None
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;		None
  1350 ;; Return value:  Size  Location     Type
  1351 ;;                  1    wreg      _Bool 
  1352 ;; Registers used:
  1353 ;;		wreg, status,2
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMRAM   BANK0
  1359 ;;      Params:         0       0
  1360 ;;      Locals:         0       0
  1361 ;;      Temps:          2       0
  1362 ;;      Totals:         2       0
  1363 ;;Total ram usage:        2 bytes
  1364 ;; Hardware stack levels used: 1
  1365 ;; Hardware stack levels required when called: 2
  1366 ;; This function calls:
  1367 ;;		Nothing
  1368 ;; This function is called by:
  1369 ;;		_main
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           	psect	text9
  1374   00048C                     __ptext9:
  1375                           	callstack 0
  1376   00048C                     _AddLeftBlinks:
  1377                           	callstack 28
  1378   00048C                     
  1379                           ;user.c: 248:             PORTBbits.RB3 = 1;
  1380   00048C  8681               	bsf	129,3,c	;volatile
  1381   00048E                     
  1382                           ;user.c: 249:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1383   00048E  0E02               	movlw	2
  1384   000490  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1385   000492  0E86               	movlw	134
  1386   000494  6E02               	movwf	??_AddLeftBlinks^0,c
  1387   000496  0E99               	movlw	153
  1388   000498                     u507:
  1389   000498  2EE8               	decfsz	wreg,f,c
  1390   00049A  D7FE               	bra	u507
  1391   00049C  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1392   00049E  D7FC               	bra	u507
  1393   0004A0  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1394   0004A2  D7FA               	bra	u507
  1395   0004A4  F000               	nop	
  1396   0004A6                     
  1397                           ;user.c: 250:             PORTBbits.RB3 = 0;
  1398   0004A6  9681               	bcf	129,3,c	;volatile
  1399                           
  1400                           ;user.c: 251:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1401   0004A8  0E03               	movlw	3
  1402   0004AA  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1403   0004AC  0E8A               	movlw	138
  1404   0004AE  6E02               	movwf	??_AddLeftBlinks^0,c
  1405   0004B0  0E56               	movlw	86
  1406   0004B2                     u517:
  1407   0004B2  2EE8               	decfsz	wreg,f,c
  1408   0004B4  D7FE               	bra	u517
  1409   0004B6  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1410   0004B8  D7FC               	bra	u517
  1411   0004BA  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1412   0004BC  D7FA               	bra	u517
  1413   0004BE                     
  1414                           ;user.c: 252:             PORTBbits.RB3 = 1;
  1415   0004BE  8681               	bsf	129,3,c	;volatile
  1416                           
  1417                           ;user.c: 253:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1418   0004C0  0E02               	movlw	2
  1419   0004C2  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1420   0004C4  0E86               	movlw	134
  1421   0004C6  6E02               	movwf	??_AddLeftBlinks^0,c
  1422   0004C8  0E99               	movlw	153
  1423   0004CA                     u527:
  1424   0004CA  2EE8               	decfsz	wreg,f,c
  1425   0004CC  D7FE               	bra	u527
  1426   0004CE  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1427   0004D0  D7FC               	bra	u527
  1428   0004D2  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1429   0004D4  D7FA               	bra	u527
  1430   0004D6  F000               	nop	
  1431   0004D8                     
  1432                           ;user.c: 254:             PORTBbits.RB3 = 0;
  1433   0004D8  9681               	bcf	129,3,c	;volatile
  1434                           
  1435                           ;user.c: 255:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1436   0004DA  0E03               	movlw	3
  1437   0004DC  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1438   0004DE  0E8A               	movlw	138
  1439   0004E0  6E02               	movwf	??_AddLeftBlinks^0,c
  1440   0004E2  0E56               	movlw	86
  1441   0004E4                     u537:
  1442   0004E4  2EE8               	decfsz	wreg,f,c
  1443   0004E6  D7FE               	bra	u537
  1444   0004E8  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1445   0004EA  D7FC               	bra	u537
  1446   0004EC  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1447   0004EE  D7FA               	bra	u537
  1448   0004F0                     
  1449                           ;user.c: 256:             PORTBbits.RB3 = 1;
  1450   0004F0  8681               	bsf	129,3,c	;volatile
  1451                           
  1452                           ;user.c: 257:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1453   0004F2  0E02               	movlw	2
  1454   0004F4  6E03               	movwf	(??_AddLeftBlinks+1)^0,c
  1455   0004F6  0E86               	movlw	134
  1456   0004F8  6E02               	movwf	??_AddLeftBlinks^0,c
  1457   0004FA  0E99               	movlw	153
  1458   0004FC                     u547:
  1459   0004FC  2EE8               	decfsz	wreg,f,c
  1460   0004FE  D7FE               	bra	u547
  1461   000500  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1462   000502  D7FC               	bra	u547
  1463   000504  2E03               	decfsz	(??_AddLeftBlinks+1)^0,f,c
  1464   000506  D7FA               	bra	u547
  1465   000508  F000               	nop	
  1466   00050A                     
  1467                           ;user.c: 258:             PORTBbits.RB3 = 0;
  1468   00050A  9681               	bcf	129,3,c	;volatile
  1469                           
  1470                           ;user.c: 259:             _delay((unsigned long)((100)*(4000000/4000.0)));
  1471   00050C  0E82               	movlw	130
  1472   00050E  6E02               	movwf	??_AddLeftBlinks^0,c
  1473   000510  0EDE               	movlw	222
  1474   000512                     u557:
  1475   000512  2EE8               	decfsz	wreg,f,c
  1476   000514  D7FE               	bra	u557
  1477   000516  2E02               	decfsz	??_AddLeftBlinks^0,f,c
  1478   000518  D7FC               	bra	u557
  1479   00051A                     
  1480                           ;user.c: 260:             return wasTurningLeft = 0;;	Return value of _AddLeftBlinks is 
      +                          never used
  1481   00051A  0E00               	movlw	0
  1482   00051C  6E2A               	movwf	_wasTurningLeft^0,c
  1483   00051E  0012               	return		;funcret
  1484   000520                     __end_of_AddLeftBlinks:
  1485                           	callstack 0
  1486                           
  1487 ;; *************** function _low_isr *****************
  1488 ;; Defined at:
  1489 ;;		line 67 in file "interrupts.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;		None
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		None
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0
  1503 ;;      Params:         0       0
  1504 ;;      Locals:         0       0
  1505 ;;      Temps:          1       0
  1506 ;;      Totals:         1       0
  1507 ;;Total ram usage:        1 bytes
  1508 ;; Hardware stack levels used: 1
  1509 ;; Hardware stack levels required when called: 1
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		Interrupt level 1
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	intcodelo
  1518   000018                     __pintcodelo:
  1519                           	callstack 0
  1520   000018                     _low_isr:
  1521                           	callstack 25
  1522                           
  1523                           ;incstack = 0
  1524   000018  802C               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  1525   00001A  CFE0 F001          	movff	bsr,??_low_isr
  1526   00001E  C001  FFE0         	movff	??_low_isr,bsr
  1527   000022  902C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1528   000024  0010               	retfie	
  1529   000026                     __end_of_low_isr:
  1530                           	callstack 0
  1531                           
  1532 ;; *************** function _high_isr *****************
  1533 ;; Defined at:
  1534 ;;		line 27 in file "interrupts.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;		None
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;		None
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      void 
  1541 ;; Registers used:
  1542 ;;		None
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0
  1548 ;;      Params:         0       0
  1549 ;;      Locals:         0       0
  1550 ;;      Temps:          0       0
  1551 ;;      Totals:         0       0
  1552 ;;Total ram usage:        0 bytes
  1553 ;; Hardware stack levels used: 1
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		Interrupt level 2
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	intcode
  1562   000008                     __pintcode:
  1563                           	callstack 0
  1564   000008                     _high_isr:
  1565                           	callstack 25
  1566                           
  1567                           ;incstack = 0
  1568   000008  822C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1569   00000A  EFD3  F002         	goto	int_func
  1570                           
  1571                           	psect	intcode_body
  1572   0005A6                     __pintcode_body:
  1573                           	callstack 25
  1574   0005A6                     int_func:
  1575                           	callstack 25
  1576   0005A6  922C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1577   0005A8  0011               	retfie		f
  1578   0005AA                     __end_of_high_isr:
  1579                           	callstack 0
  1580   000000                     
  1581                           	psect	rparam
  1582   000000                     
  1583                           	psect	temp
  1584   00002C                     btemp:
  1585                           	callstack 0
  1586   00002C                     	ds	1
  1587   000000                     int$flags	set	btemp
  1588   000000                     wtemp8	set	btemp+1
  1589   000000                     ttemp5	set	btemp+1
  1590   000000                     ttemp6	set	btemp+4
  1591   000000                     ttemp7	set	btemp+8
  1592                           
  1593                           	psect	idloc
  1594                           
  1595                           ;Config register IDLOC0 @ 0x200000
  1596                           ;	unspecified, using default values
  1597   200000                     	org	2097152
  1598   200000  FF                 	db	255
  1599                           
  1600                           ;Config register IDLOC1 @ 0x200001
  1601                           ;	unspecified, using default values
  1602   200001                     	org	2097153
  1603   200001  FF                 	db	255
  1604                           
  1605                           ;Config register IDLOC2 @ 0x200002
  1606                           ;	unspecified, using default values
  1607   200002                     	org	2097154
  1608   200002  FF                 	db	255
  1609                           
  1610                           ;Config register IDLOC3 @ 0x200003
  1611                           ;	unspecified, using default values
  1612   200003                     	org	2097155
  1613   200003  FF                 	db	255
  1614                           
  1615                           ;Config register IDLOC4 @ 0x200004
  1616                           ;	unspecified, using default values
  1617   200004                     	org	2097156
  1618   200004  FF                 	db	255
  1619                           
  1620                           ;Config register IDLOC5 @ 0x200005
  1621                           ;	unspecified, using default values
  1622   200005                     	org	2097157
  1623   200005  FF                 	db	255
  1624                           
  1625                           ;Config register IDLOC6 @ 0x200006
  1626                           ;	unspecified, using default values
  1627   200006                     	org	2097158
  1628   200006  FF                 	db	255
  1629                           
  1630                           ;Config register IDLOC7 @ 0x200007
  1631                           ;	unspecified, using default values
  1632   200007                     	org	2097159
  1633   200007  FF                 	db	255
  1634                           
  1635                           	psect	config
  1636                           
  1637                           ; Padding undefined space
  1638   300000                     	org	3145728
  1639   300000  FF                 	db	255
  1640                           
  1641                           ;Config register CONFIG1H @ 0x300001
  1642                           ;	Oscillator Selection bits
  1643                           ;	OSC = INTIO2, Internal RC oscillator, port function on RA6 and port function on RA7
  1644                           ;	Fail-Safe Clock Monitor Enable bit
  1645                           ;	FSCM = ON, Fail-Safe Clock Monitor enabled
  1646                           ;	Internal External Switchover bit
  1647                           ;	IESO = ON, Internal External Switchover mode enabled
  1648   300001                     	org	3145729
  1649   300001  C8                 	db	200
  1650                           
  1651                           ;Config register CONFIG2L @ 0x300002
  1652                           ;	Power-up Timer Enable bit
  1653                           ;	PWRT = OFF, PWRT disabled
  1654                           ;	Brown-out Reset Enable bit
  1655                           ;	BOR = ON, Brown-out Reset enabled
  1656                           ;	Brown-out Reset Voltage bits
  1657                           ;	BORV = 0x3, unprogrammed default
  1658   300002                     	org	3145730
  1659   300002  0F                 	db	15
  1660                           
  1661                           ;Config register CONFIG2H @ 0x300003
  1662                           ;	Watchdog Timer Enable bit
  1663                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1664                           ;	Watchdog Timer Postscale Select bits
  1665                           ;	WDTPS = 32768, 1:32768
  1666   300003                     	org	3145731
  1667   300003  1E                 	db	30
  1668                           
  1669                           ; Padding undefined space
  1670   300004                     	org	3145732
  1671   300004  FF                 	db	255
  1672                           
  1673                           ;Config register CONFIG3H @ 0x300005
  1674                           ;	MCLR Pin Enable bit
  1675                           ;	MCLRE = OFF, RA5 input pin enabled, MCLR disabled
  1676   300005                     	org	3145733
  1677   300005  00                 	db	0
  1678                           
  1679                           ;Config register CONFIG4L @ 0x300006
  1680                           ;	Stack Full/Underflow Reset Enable bit
  1681                           ;	STVR = ON, Stack full/underflow will cause Reset
  1682                           ;	Low-Voltage ICSP Enable bit
  1683                           ;	LVP = ON, Low-Voltage ICSP enabled
  1684                           ;	Background Debugger Enable bit
  1685                           ;	DEBUG = 0x1, unprogrammed default
  1686   300006                     	org	3145734
  1687   300006  85                 	db	133
  1688                           
  1689                           ; Padding undefined space
  1690   300007                     	org	3145735
  1691   300007  FF                 	db	255
  1692                           
  1693                           ;Config register CONFIG5L @ 0x300008
  1694                           ;	Code Protection bit
  1695                           ;	CP0 = OFF, Block 0 (00200-000FFFh) not code-protected
  1696                           ;	Code Protection bit
  1697                           ;	CP1 = OFF, Block 1 (001000-001FFFh) not code-protected
  1698   300008                     	org	3145736
  1699   300008  03                 	db	3
  1700                           
  1701                           ;Config register CONFIG5H @ 0x300009
  1702                           ;	Boot Block Code Protection bit
  1703                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  1704                           ;	Data EEPROM Code Protection bit
  1705                           ;	CPD = OFF, Data EEPROM not code-protected
  1706   300009                     	org	3145737
  1707   300009  C0                 	db	192
  1708                           
  1709                           ;Config register CONFIG6L @ 0x30000A
  1710                           ;	Write Protection bit
  1711                           ;	WRT0 = OFF, Block 0 (00200-000FFFh) not write-protected
  1712                           ;	Write Protection bit
  1713                           ;	WRT1 = OFF, Block 1 (001000-001FFFh) not write-protected
  1714   30000A                     	org	3145738
  1715   30000A  03                 	db	3
  1716                           
  1717                           ;Config register CONFIG6H @ 0x30000B
  1718                           ;	Configuration Register Write Protection bit
  1719                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1720                           ;	Boot Block Write Protection bit
  1721                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  1722                           ;	Data EEPROM Write Protection bit
  1723                           ;	WRTD = OFF, Data EEPROM not write-protected
  1724   30000B                     	org	3145739
  1725   30000B  E0                 	db	224
  1726                           
  1727                           ;Config register CONFIG7L @ 0x30000C
  1728                           ;	Table Read Protection bit
  1729                           ;	EBTR0 = OFF, Block 0 (00200-000FFFh) not protected from table reads executed in other 
      +                          blocks
  1730                           ;	Table Read Protection bit
  1731                           ;	EBTR1 = OFF, Block 1 (001000-001FFFh) not protected from table reads executed in other
      +                           blocks
  1732   30000C                     	org	3145740
  1733   30000C  03                 	db	3
  1734                           
  1735                           ;Config register CONFIG7H @ 0x30000D
  1736                           ;	Boot Block Table Read Protection bit
  1737                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  1738   30000D                     	org	3145741
  1739   30000D  40                 	db	64
  1740                           tosu	equ	0xFFF
  1741                           tosh	equ	0xFFE
  1742                           tosl	equ	0xFFD
  1743                           stkptr	equ	0xFFC
  1744                           pclatu	equ	0xFFB
  1745                           pclath	equ	0xFFA
  1746                           pcl	equ	0xFF9
  1747                           tblptru	equ	0xFF8
  1748                           tblptrh	equ	0xFF7
  1749                           tblptrl	equ	0xFF6
  1750                           tablat	equ	0xFF5
  1751                           prodh	equ	0xFF4
  1752                           prodl	equ	0xFF3
  1753                           indf0	equ	0xFEF
  1754                           postinc0	equ	0xFEE
  1755                           postdec0	equ	0xFED
  1756                           preinc0	equ	0xFEC
  1757                           plusw0	equ	0xFEB
  1758                           fsr0h	equ	0xFEA
  1759                           fsr0l	equ	0xFE9
  1760                           wreg	equ	0xFE8
  1761                           indf1	equ	0xFE7
  1762                           postinc1	equ	0xFE6
  1763                           postdec1	equ	0xFE5
  1764                           preinc1	equ	0xFE4
  1765                           plusw1	equ	0xFE3
  1766                           fsr1h	equ	0xFE2
  1767                           fsr1l	equ	0xFE1
  1768                           bsr	equ	0xFE0
  1769                           indf2	equ	0xFDF
  1770                           postinc2	equ	0xFDE
  1771                           postdec2	equ	0xFDD
  1772                           preinc2	equ	0xFDC
  1773                           plusw2	equ	0xFDB
  1774                           fsr2h	equ	0xFDA
  1775                           fsr2l	equ	0xFD9
  1776                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     36      43
    BANK0           128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Turn_49A
    _Turn_49A->_GetCurrentValue
    _GetDirection->_GetADCValue
    _GetCurrentValue->_GetADCValue
    _GetADCValue->___awdiv

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    1736
                                             28 COMRAM     8     8      0
                      _AddLeftBlinks
                     _AddRightBlinks
                        _GetADCValue
                            _InitADC
                           _ReversOn
                           _Turn_49A
 ---------------------------------------------------------------------------------
 (1) _Turn_49A                                             4     4      0    1145
                                             24 COMRAM     4     4      0
                    _GetCurrentValue
                       _GetDirection
 ---------------------------------------------------------------------------------
 (2) _GetDirection                                         0     0      0     537
                        _GetADCValue
                            _InitADC
 ---------------------------------------------------------------------------------
 (2) _GetCurrentValue                                      6     4      2     583
                                             18 COMRAM     6     4      2
                        _GetADCValue
                            _InitADC
 ---------------------------------------------------------------------------------
 (3) _InitADC                                              1     1      0      15
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _GetADCValue                                          9     7      2     522
                                              9 COMRAM     9     7      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     452
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _ReversOn                                             2     2      0       0
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _AddRightBlinks                                       2     2      0       0
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _AddLeftBlinks                                        2     2      0       0
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddLeftBlinks
   _AddRightBlinks
   _GetADCValue
     ___awdiv
   _InitADC
   _ReversOn
   _Turn_49A
     _GetCurrentValue
       _GetADCValue
       _InitADC
     _GetDirection
       _GetADCValue
       _InitADC

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       9        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     24      2B       1       34.1%
BITBIGSFRl          3E      0       0       7        0.0%
BITBIGSFRhh         3B      0       0       6        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2B       8        0.0%
DATA                 0      0      2B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Jul 24 23:28:47 2022

                       l39 01E4                         l83 05A4                         l93 011E  
                       l94 00AC                         l97 00DE               ___awdiv@sign 0007  
                       bsr 000FE0                        l102 054E                        l120 051E  
                      l112 03C4                        l113 03F6                        l106 0356  
                      l123 0576                        l117 048A                        l357 02AA  
                      l921 0550                        l843 0594                        l845 059C  
                      l847 05A0                        l961 03FA                        l971 0476  
                      l963 0412                        l981 04A6                        l973 0486  
                      l965 042A                        l991 051A                        l983 04BE  
                      l967 0444                        l959 03F8                        l985 04D8  
                      l977 048C                        l969 045C                        l987 04F0  
                      l979 048E                        l989 050A                        u200 023A  
                      u201 0236                        u210 0258                        u211 0254  
                      u220 0274                        u300 0390                        u221 0270  
                      u301 038C                        u230 029A                        u310 017C  
                      u231 0296                        u311 0178                        u240 00BA  
                      u320 01A0                        u241 00B6                        u321 019C  
                      u250 00EC                        u330 01B8                        u251 00E8  
                      u331 01B4                        u180 01FA                        u260 02EA  
                      u340 01D0                        u181 01F6                        u261 02E6  
                      u341 01CC                        u190 0214                        u270 0306  
                      u191 0210                        u407 00A2                        u271 0302  
                      u280 032A                        u417 00D2                        u281 0326  
                      u290 0346                        u507 0498                        u427 0556  
                      u291 0342                        u517 04B2                        u437 056A  
                      u357 0360                        u527 04CA                        u447 0404  
                      u367 039C                        u537 04E4                        u457 041E  
                      u377 03B2                        u547 04FC                        u467 0436  
                      u387 03D0                        i2l5 05A6                        u557 0512  
                      u477 0450                        u397 03E4                        u487 0468  
                      u497 047E                        wreg 000FE8       __end_of_GetDirection 0358  
          ??_AddLeftBlinks 0002              _R_ch_in_value 0027                       l1101 00AA  
                     l1111 00FE                       l1103 00BA                       l1041 0202  
                     l1105 00CC                       l1121 0542                       l1201 0160  
                     l1051 0228                       l1043 0206                       l1035 01E8  
                     l1107 00DC                       l1131 0306                       l1211 01A0  
                     l1203 017C                       l1061 025E                       l1053 023A  
                     l1045 0214                       l1037 01EC                       l1109 00EC  
                     l1141 0346                       l1125 02AC                       l1221 01D8  
                     l1213 01A8                       l1063 0274                       l1055 0242  
                     l1071 028A                       l1047 021C                       l1039 01FA  
                     l1119 0520                       l1127 02CE                       l1151 0358  
                     l1215 01B8                       l1073 029A                       l1065 027C  
                     l1057 024A                       l1049 0220                       l1081 0034  
                     l1129 02EA                       l1137 030E                       l1161 0392  
                     l1153 035A                       l1217 01C0                       l1209 0184  
                     l1075 02A2                       l1067 027E                       l1059 0258  
                     l1227 0076                       l1091 0056                       l1083 003C  
                     l1139 032A                       l1147 034E                       l1163 0396  
                     l1155 0368                       l1219 01D0                       l1069 0284  
                     l1085 0042                       l1181 03DA                       l1165 03A6  
                     l1157 0374                       l1087 0048                       l1079 002C  
                     l1175 03C6                       l1167 03A8                       l1159 0390  
                     l1191 013A                       l1089 004E                       l1097 0062  
                     l1177 03CA                       l1169 03C0                       l1193 013C  
                     l1099 009C                       l1179 03D8                       l1195 013E  
                     l1187 0120                       l1197 0144                       l1189 0138  
                     l1199 0152                       i1l10 001E                       _main 0120  
                     btemp 002C                _GetADCValue 002A                       start 0026  
             ___param_bank 000000            __end_of_InitADC 05A6                      ?_main 0001  
          __end_of___awdiv 02AC            ___awdiv@divisor 0004            ___awdiv@counter 0006  
          __end_of_low_isr 0026          ??_GetCurrentValue 0015                      ttemp5 002D  
                    ttemp6 0030                      ttemp7 0034                      status 000FD8  
                    wtemp8 002D            __initialization 0578               __end_of_main 01E8  
                   ??_main 001D          main@_49A_in_value 0021              __activetblptr 000002  
         __end_of_ReversOn 0578                     _ADCON0 000FC2                     _ADCON1 000FC1  
                   _ADCON2 000FC0           __end_of_Turn_49A 03F8                     _ADRESH 000FC4  
                   _ADRESL 000FC3           ___awdiv@dividend 0002                  ??_InitADC 0002  
         __end_of_high_isr 05AA                  ??___awdiv 0006           ??_AddRightBlinks 0002  
                   clear_0 057E           ___awdiv@quotient 0008                     isa$std 000001  
                ??_low_isr 0001                     tblptru 000FF8                 __accesstop 0080  
  __end_of__initialization 0584              ___rparam_used 000001               _GetDirection 02AC  
           __pcstackCOMRAM 0001            _wasTurningRight 002B               ?_GetADCValue 000A  
                ?_ReversOn 0001                  ?_Turn_49A 0001            _GetCurrentValue 0520  
        main@L_ch_in_value 001F                 _hazardIsOn 0029      __end_of_AddLeftBlinks 0520  
                ?_high_isr 0001                    _InitADC 0592                    __Hparam 0000  
                  __Lparam 0000                 ??_ReversOn 0002                    ___awdiv 01E8  
               ??_Turn_49A 0019                    __pcinit 0578                    __ramtop 0100  
                  __ptext0 0120                    __ptext1 0358                    __ptext2 02AC  
                  __ptext3 0520                    __ptext4 0592                    __ptext5 002A  
                  __ptext6 01E8                    __ptext7 0550                    __ptext8 03F8  
                  __ptext9 048C                    _low_isr 0018                 ??_high_isr 0001  
           __pintcode_body 05A6       end_of_initialization 0584              __Lmediumconst 0000  
                  int_func 05A6      Turn_49A@Current_value 001B                    postinc0 000FEE  
  __end_of_GetCurrentValue 0550                  _PORTAbits 000F80                  _PORTBbits 000F81  
       GetADCValue@Channel 000E        start_initialization 0578           ?_GetCurrentValue 0013  
              __pbssCOMRAM 0025              _L_ch_in_value 0025             _wasTurningLeft 002A  
                 ?_InitADC 0001                  __pintcode 0008                   ?___awdiv 0002  
              __pintcodelo 0018                   ?_low_isr 0001                   _GO_nDONE 007E11  
        main@R_ch_in_value 001D  GetCurrentValue@ADC0_value 0015  GetCurrentValue@ADC1_value 0017  
                 __Hrparam 0000              ?_GetDirection 0001                   _ReversOn 0550  
                 __Lrparam 0000          GetADCValue@temp_1 000F          GetADCValue@temp_2 0011  
                 _Turn_49A 0358             _AddRightBlinks 03F8                   _high_isr 0008  
            _AddLeftBlinks 048C              ??_GetADCValue 000C             ??_GetDirection 0013  
                 isa$xinst 000000       main@Reverse_in_value 0023                   int$flags 002C  
   __end_of_AddRightBlinks 048C             ?_AddLeftBlinks 0001                   intlevel1 0000  
                 intlevel2 0000        __end_of_GetADCValue 0120            ?_AddRightBlinks 0001  
           InitADC@Channel 0002  
